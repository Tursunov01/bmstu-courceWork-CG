; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	c:\Users\User\Desktop\ComputerGraphicsProject\Viewer\Texture.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	??0Texture@@QAE@XZ				; Texture::Texture
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\users\user\desktop\computergraphicsproject\viewer\texture.cpp
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT ??0Texture@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0Texture@@QAE@XZ PROC					; Texture::Texture, COMDAT
; _this$ = ecx

; 7    : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 8    :   m_nID=0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 9    : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0Texture@@QAE@XZ ENDP					; Texture::Texture
_TEXT	ENDS
PUBLIC	?Free@Texture@@QAEXXZ				; Texture::Free
PUBLIC	??1Texture@@QAE@XZ				; Texture::~Texture
EXTRN	__RTC_CheckEsp:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1Texture@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1Texture@@QAE@XZ PROC					; Texture::~Texture, COMDAT
; _this$ = ecx

; 12   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 13   :   Free();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Free@Texture@@QAEXXZ			; Texture::Free

; 14   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1Texture@@QAE@XZ ENDP					; Texture::~Texture
_TEXT	ENDS
PUBLIC	?Create@Texture@@QAE_NPAVImage@@0@Z		; Texture::Create
PUBLIC	?Create@Texture@@QAE_NPADP6A_N0PAVImage@@@Z@Z	; Texture::Create
EXTRN	??1Image@@UAE@XZ:PROC				; Image::~Image
EXTRN	?Create@Image@@QAE_NPADP6A_N0PAV1@@Z@Z:PROC	; Image::Create
EXTRN	??0Image@@QAE@XZ:PROC				; Image::Image
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Create@Texture@@QAE_NPADP6A_N0PAVImage@@@Z@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Create@Texture@@QAE_NPADP6A_N0PAVImage@@@Z@Z$0
__ehfuncinfo$?Create@Texture@@QAE_NPADP6A_N0PAVImage@@@Z@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Create@Texture@@QAE_NPADP6A_N0PAVImage@@@Z@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ?Create@Texture@@QAE_NPADP6A_N0PAVImage@@@Z@Z
_TEXT	SEGMENT
$T32888 = -269						; size = 1
$T32889 = -257						; size = 1
_img$ = -56						; size = 28
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_szImageName$ = 8					; size = 4
_imgLoader$ = 12					; size = 4
?Create@Texture@@QAE_NPADP6A_N0PAVImage@@@Z@Z PROC	; Texture::Create, COMDAT
; _this$ = ecx

; 17   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Create@Texture@@QAE_NPADP6A_N0PAVImage@@@Z@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 264				; 00000108H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-276]
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 18   :   Image img;

	lea	ecx, DWORD PTR _img$[ebp]
	call	??0Image@@QAE@XZ			; Image::Image
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 19   :   if( img.Create( szImageName, imgLoader ) == false )

	mov	eax, DWORD PTR _imgLoader$[ebp]
	push	eax
	mov	ecx, DWORD PTR _szImageName$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _img$[ebp]
	call	?Create@Image@@QAE_NPADP6A_N0PAV1@@Z@Z	; Image::Create
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN1@Create

; 20   :     return false;

	mov	BYTE PTR $T32888[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _img$[ebp]
	call	??1Image@@UAE@XZ			; Image::~Image
	mov	al, BYTE PTR $T32888[ebp]
	jmp	SHORT $LN2@Create
$LN1@Create:

; 21   : 
; 22   :   return Create( &img );

	push	0
	lea	eax, DWORD PTR _img$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Create@Texture@@QAE_NPAVImage@@0@Z	; Texture::Create
	mov	BYTE PTR $T32889[ebp], al
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _img$[ebp]
	call	??1Image@@UAE@XZ			; Image::~Image
	mov	al, BYTE PTR $T32889[ebp]
$LN2@Create:

; 23   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@Create
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 276				; 00000114H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	3
$LN8@Create:
	DD	1
	DD	$LN7@Create
$LN7@Create:
	DD	-56					; ffffffc8H
	DD	28					; 0000001cH
	DD	$LN5@Create
$LN5@Create:
	DB	105					; 00000069H
	DB	109					; 0000006dH
	DB	103					; 00000067H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Create@Texture@@QAE_NPADP6A_N0PAVImage@@@Z@Z$0:
	lea	ecx, DWORD PTR _img$[ebp]
	jmp	??1Image@@UAE@XZ			; Image::~Image
__ehhandler$?Create@Texture@@QAE_NPADP6A_N0PAVImage@@@Z@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-280]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Create@Texture@@QAE_NPADP6A_N0PAVImage@@@Z@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Create@Texture@@QAE_NPADP6A_N0PAVImage@@@Z@Z ENDP	; Texture::Create
PUBLIC	?GetData@Image@@QAEPAXXZ			; Image::GetData
PUBLIC	?GetHeight@Image@@QAEKXZ			; Image::GetHeight
PUBLIC	?GetWidth@Image@@QAEKXZ				; Image::GetWidth
PUBLIC	?GetBPP@Image@@QAEHXZ				; Image::GetBPP
PUBLIC	__real@461c0400
PUBLIC	__real@46180400
PUBLIC	__real@46240400
EXTRN	?Free@Image@@UAEXXZ:PROC			; Image::Free
EXTRN	_gluBuild2DMipmaps@28:PROC
EXTRN	?Create@Image@@QAE_NKKK@Z:PROC			; Image::Create
EXTRN	__imp__glTexParameterf@12:PROC
EXTRN	__imp__glBindTexture@8:PROC
EXTRN	__imp__glGenTextures@8:PROC
EXTRN	__fltused:DWORD
;	COMDAT __real@461c0400
CONST	SEGMENT
__real@461c0400 DD 0461c0400r			; 9985
CONST	ENDS
;	COMDAT __real@46180400
CONST	SEGMENT
__real@46180400 DD 046180400r			; 9729
CONST	ENDS
;	COMDAT __real@46240400
CONST	SEGMENT
__real@46240400 DD 046240400r			; 10497
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Create@Texture@@QAE_NPAVImage@@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Create@Texture@@QAE_NPAVImage@@0@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?Create@Texture@@QAE_NPAVImage@@0@Z$1
__ehfuncinfo$?Create@Texture@@QAE_NPAVImage@@0@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?Create@Texture@@QAE_NPAVImage@@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ?Create@Texture@@QAE_NPAVImage@@0@Z
_TEXT	SEGMENT
tv255 = -460						; size = 4
tv199 = -460						; size = 4
tv132 = -460						; size = 4
$T32910 = -449						; size = 1
$T32911 = -437						; size = 1
$T32914 = -425						; size = 1
$T32915 = -413						; size = 1
_iX$32742 = -212					; size = 4
_iY$32738 = -200					; size = 4
_pSrcAlpha$32736 = -188					; size = 4
_pSrcData$32734 = -176					; size = 4
_pFinal$32732 = -164					; size = 4
_imgFinal$32729 = -152					; size = 28
_iX$32721 = -116					; size = 4
_iY$32717 = -104					; size = 4
_pSrcAlpha$32715 = -92					; size = 4
_pSrcData$32713 = -80					; size = 4
_pFinal$32711 = -68					; size = 4
_imgFinal$32708 = -56					; size = 28
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_pImage$ = 8						; size = 4
_pAlpha$ = 12						; size = 4
?Create@Texture@@QAE_NPAVImage@@0@Z PROC		; Texture::Create, COMDAT
; _this$ = ecx

; 27   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Create@Texture@@QAE_NPAVImage@@0@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 448				; 000001c0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-460]
	mov	ecx, 112				; 00000070H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 28   :   Free();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Free@Texture@@QAEXXZ			; Texture::Free

; 29   : 
; 30   :   // Generate texture id.
; 31   :   glGenTextures(1, &m_nID);

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	push	1
	call	DWORD PTR __imp__glGenTextures@8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 32   :   m_nID++; // Use an offset of +1 to differentiate from non-initialized state.

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], ecx

; 33   : 
; 34   :   glBindTexture(GL_TEXTURE_2D, m_nID-1);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 1
	mov	esi, esp
	push	ecx
	push	3553					; 00000de1H
	call	DWORD PTR __imp__glBindTexture@8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 35   :   glTexParameterf(GL_TEXTURE_2D,GL_TEXTURE_WRAP_S, GL_REPEAT);

	mov	esi, esp
	push	ecx
	fld	DWORD PTR __real@46240400
	fstp	DWORD PTR [esp]
	push	10242					; 00002802H
	push	3553					; 00000de1H
	call	DWORD PTR __imp__glTexParameterf@12
	cmp	esi, esp
	call	__RTC_CheckEsp

; 36   :   glTexParameterf(GL_TEXTURE_2D,GL_TEXTURE_WRAP_T, GL_REPEAT);

	mov	esi, esp
	push	ecx
	fld	DWORD PTR __real@46240400
	fstp	DWORD PTR [esp]
	push	10243					; 00002803H
	push	3553					; 00000de1H
	call	DWORD PTR __imp__glTexParameterf@12
	cmp	esi, esp
	call	__RTC_CheckEsp

; 37   :   glTexParameterf(GL_TEXTURE_2D,GL_TEXTURE_MAG_FILTER, GL_LINEAR);

	mov	esi, esp
	push	ecx
	fld	DWORD PTR __real@46180400
	fstp	DWORD PTR [esp]
	push	10240					; 00002800H
	push	3553					; 00000de1H
	call	DWORD PTR __imp__glTexParameterf@12
	cmp	esi, esp
	call	__RTC_CheckEsp

; 38   :   glTexParameterf(GL_TEXTURE_2D,GL_TEXTURE_MIN_FILTER, GL_LINEAR_MIPMAP_NEAREST);

	mov	esi, esp
	push	ecx
	fld	DWORD PTR __real@461c0400
	fstp	DWORD PTR [esp]
	push	10241					; 00002801H
	push	3553					; 00000de1H
	call	DWORD PTR __imp__glTexParameterf@12
	cmp	esi, esp
	call	__RTC_CheckEsp

; 39   : 
; 40   :   if( pAlpha && (pImage->GetBPP() == 8))

	cmp	DWORD PTR _pAlpha$[ebp], 0
	je	$LN25@Create@2
	mov	ecx, DWORD PTR _pImage$[ebp]
	call	?GetBPP@Image@@QAEHXZ			; Image::GetBPP
	cmp	eax, 8
	jne	$LN25@Create@2

; 41   :   {
; 42   :     if( ((pAlpha->GetBPP() == 8) &&
; 43   :         (pAlpha->GetWidth()==pImage->GetWidth()) &&
; 44   :         (pAlpha->GetHeight()==pImage->GetHeight())
; 45   :        ) == false )

	mov	ecx, DWORD PTR _pAlpha$[ebp]
	call	?GetBPP@Image@@QAEHXZ			; Image::GetBPP
	cmp	eax, 8
	jne	SHORT $LN28@Create@2
	mov	ecx, DWORD PTR _pAlpha$[ebp]
	call	?GetWidth@Image@@QAEKXZ			; Image::GetWidth
	mov	esi, eax
	mov	ecx, DWORD PTR _pImage$[ebp]
	call	?GetWidth@Image@@QAEKXZ			; Image::GetWidth
	cmp	esi, eax
	jne	SHORT $LN28@Create@2
	mov	ecx, DWORD PTR _pAlpha$[ebp]
	call	?GetHeight@Image@@QAEKXZ		; Image::GetHeight
	mov	esi, eax
	mov	ecx, DWORD PTR _pImage$[ebp]
	call	?GetHeight@Image@@QAEKXZ		; Image::GetHeight
	cmp	esi, eax
	jne	SHORT $LN28@Create@2
	mov	DWORD PTR tv132[ebp], 1
	jmp	SHORT $LN29@Create@2
$LN28@Create@2:
	mov	DWORD PTR tv132[ebp], 0
$LN29@Create@2:
	cmp	DWORD PTR tv132[ebp], 0
	jne	SHORT $LN24@Create@2

; 46   :     {
; 47   :       Free();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Free@Texture@@QAEXXZ			; Texture::Free

; 48   :       return false;

	xor	al, al
	jmp	$LN26@Create@2
$LN24@Create@2:

; 49   :     }
; 50   : 
; 51   :     // Build a 16bit final image, for texture creation...
; 52   :     Image imgFinal;

	lea	ecx, DWORD PTR _imgFinal$32708[ebp]
	call	??0Image@@QAE@XZ			; Image::Image
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 53   :     if( imgFinal.Create( pImage->GetWidth(), pImage->GetHeight(), 16 ) == false)

	push	16					; 00000010H
	mov	ecx, DWORD PTR _pImage$[ebp]
	call	?GetHeight@Image@@QAEKXZ		; Image::GetHeight
	push	eax
	mov	ecx, DWORD PTR _pImage$[ebp]
	call	?GetWidth@Image@@QAEKXZ			; Image::GetWidth
	push	eax
	lea	ecx, DWORD PTR _imgFinal$32708[ebp]
	call	?Create@Image@@QAE_NKKK@Z		; Image::Create
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN23@Create@2

; 54   :     { // Make sure we catch a bad image creation failure.
; 55   :       Free();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Free@Texture@@QAEXXZ			; Texture::Free

; 56   :       return false;

	mov	BYTE PTR $T32910[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _imgFinal$32708[ebp]
	call	??1Image@@UAE@XZ			; Image::~Image
	mov	al, BYTE PTR $T32910[ebp]
	jmp	$LN26@Create@2
$LN23@Create@2:

; 57   :     }
; 58   : 
; 59   :     // Combine Blit the source image & alpha into the final 32bit image.
; 60   :     {
; 61   :       UInt8 *pFinal = (UInt8*)imgFinal.GetData();

	lea	ecx, DWORD PTR _imgFinal$32708[ebp]
	call	?GetData@Image@@QAEPAXXZ		; Image::GetData
	mov	DWORD PTR _pFinal$32711[ebp], eax

; 62   :       UInt8 *pSrcData = (UInt8*)pImage->GetData();

	mov	ecx, DWORD PTR _pImage$[ebp]
	call	?GetData@Image@@QAEPAXXZ		; Image::GetData
	mov	DWORD PTR _pSrcData$32713[ebp], eax

; 63   :       UInt8 *pSrcAlpha = (UInt8*)pAlpha->GetData();

	mov	ecx, DWORD PTR _pAlpha$[ebp]
	call	?GetData@Image@@QAEPAXXZ		; Image::GetData
	mov	DWORD PTR _pSrcAlpha$32715[ebp], eax

; 64   : 
; 65   :       // Now blit 8 (Image and Alpha) to 16bit (LumiAlpha)
; 66   :       for( UInt32 iY=0; iY<pImage->GetHeight(); iY++)

	mov	DWORD PTR _iY$32717[ebp], 0
	jmp	SHORT $LN22@Create@2
$LN21@Create@2:
	mov	eax, DWORD PTR _iY$32717[ebp]
	add	eax, 1
	mov	DWORD PTR _iY$32717[ebp], eax
$LN22@Create@2:
	mov	ecx, DWORD PTR _pImage$[ebp]
	call	?GetHeight@Image@@QAEKXZ		; Image::GetHeight
	cmp	DWORD PTR _iY$32717[ebp], eax
	jae	SHORT $LN20@Create@2

; 67   :       {
; 68   :         for( UInt32 iX=0; iX<pImage->GetWidth(); iX++, pFinal+=2, pSrcData++, pSrcAlpha++)

	mov	DWORD PTR _iX$32721[ebp], 0
	jmp	SHORT $LN19@Create@2
$LN18@Create@2:
	mov	eax, DWORD PTR _iX$32721[ebp]
	add	eax, 1
	mov	DWORD PTR _iX$32721[ebp], eax
	mov	ecx, DWORD PTR _pFinal$32711[ebp]
	add	ecx, 2
	mov	DWORD PTR _pFinal$32711[ebp], ecx
	mov	edx, DWORD PTR _pSrcData$32713[ebp]
	add	edx, 1
	mov	DWORD PTR _pSrcData$32713[ebp], edx
	mov	eax, DWORD PTR _pSrcAlpha$32715[ebp]
	add	eax, 1
	mov	DWORD PTR _pSrcAlpha$32715[ebp], eax
$LN19@Create@2:
	mov	ecx, DWORD PTR _pImage$[ebp]
	call	?GetWidth@Image@@QAEKXZ			; Image::GetWidth
	cmp	DWORD PTR _iX$32721[ebp], eax
	jae	SHORT $LN17@Create@2

; 69   :         {
; 70   :           pFinal[0] = *pSrcData;

	mov	eax, DWORD PTR _pFinal$32711[ebp]
	mov	ecx, DWORD PTR _pSrcData$32713[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl

; 71   :           pFinal[1] = *pSrcAlpha;

	mov	eax, DWORD PTR _pFinal$32711[ebp]
	mov	ecx, DWORD PTR _pSrcAlpha$32715[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax+1], dl

; 72   :         }

	jmp	SHORT $LN18@Create@2
$LN17@Create@2:

; 73   :       }

	jmp	SHORT $LN21@Create@2
$LN20@Create@2:

; 74   :     }
; 75   : 
; 76   :     gluBuild2DMipmaps(GL_TEXTURE_2D, 2, imgFinal.GetWidth(), imgFinal.GetHeight(),
; 77   :                       GL_LUMINANCE_ALPHA, GL_UNSIGNED_BYTE, imgFinal.GetData());

	lea	ecx, DWORD PTR _imgFinal$32708[ebp]
	call	?GetData@Image@@QAEPAXXZ		; Image::GetData
	push	eax
	push	5121					; 00001401H
	push	6410					; 0000190aH
	lea	ecx, DWORD PTR _imgFinal$32708[ebp]
	call	?GetHeight@Image@@QAEKXZ		; Image::GetHeight
	push	eax
	lea	ecx, DWORD PTR _imgFinal$32708[ebp]
	call	?GetWidth@Image@@QAEKXZ			; Image::GetWidth
	push	eax
	push	2
	push	3553					; 00000de1H
	call	_gluBuild2DMipmaps@28

; 78   :     imgFinal.Free();

	lea	ecx, DWORD PTR _imgFinal$32708[ebp]
	call	?Free@Image@@UAEXXZ			; Image::Free

; 79   :     return true;

	mov	BYTE PTR $T32911[ebp], 1
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _imgFinal$32708[ebp]
	call	??1Image@@UAE@XZ			; Image::~Image
	mov	al, BYTE PTR $T32911[ebp]
	jmp	$LN26@Create@2
	jmp	$LN4@Create@2
$LN25@Create@2:

; 80   :   } else if( pAlpha && (pImage->GetBPP() == 24))

	cmp	DWORD PTR _pAlpha$[ebp], 0
	je	$LN15@Create@2
	mov	ecx, DWORD PTR _pImage$[ebp]
	call	?GetBPP@Image@@QAEHXZ			; Image::GetBPP
	cmp	eax, 24					; 00000018H
	jne	$LN15@Create@2

; 81   :   {
; 82   :     if( ((pAlpha->GetBPP() == 8) &&
; 83   :         (pAlpha->GetWidth()==pImage->GetWidth()) &&
; 84   :         (pAlpha->GetHeight()==pImage->GetHeight())
; 85   :        ) == false )

	mov	ecx, DWORD PTR _pAlpha$[ebp]
	call	?GetBPP@Image@@QAEHXZ			; Image::GetBPP
	cmp	eax, 8
	jne	SHORT $LN30@Create@2
	mov	ecx, DWORD PTR _pAlpha$[ebp]
	call	?GetWidth@Image@@QAEKXZ			; Image::GetWidth
	mov	esi, eax
	mov	ecx, DWORD PTR _pImage$[ebp]
	call	?GetWidth@Image@@QAEKXZ			; Image::GetWidth
	cmp	esi, eax
	jne	SHORT $LN30@Create@2
	mov	ecx, DWORD PTR _pAlpha$[ebp]
	call	?GetHeight@Image@@QAEKXZ		; Image::GetHeight
	mov	esi, eax
	mov	ecx, DWORD PTR _pImage$[ebp]
	call	?GetHeight@Image@@QAEKXZ		; Image::GetHeight
	cmp	esi, eax
	jne	SHORT $LN30@Create@2
	mov	DWORD PTR tv199[ebp], 1
	jmp	SHORT $LN31@Create@2
$LN30@Create@2:
	mov	DWORD PTR tv199[ebp], 0
$LN31@Create@2:
	cmp	DWORD PTR tv199[ebp], 0
	jne	SHORT $LN14@Create@2

; 86   :     {
; 87   :       Free();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Free@Texture@@QAEXXZ			; Texture::Free

; 88   :       return false;

	xor	al, al
	jmp	$LN26@Create@2
$LN14@Create@2:

; 89   :     }
; 90   : 
; 91   :     // Build a 32bit final image, for texture creation...
; 92   :     Image imgFinal;

	lea	ecx, DWORD PTR _imgFinal$32729[ebp]
	call	??0Image@@QAE@XZ			; Image::Image
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 93   :     if( imgFinal.Create( pImage->GetWidth(), pImage->GetHeight(), 32 ) == false)

	push	32					; 00000020H
	mov	ecx, DWORD PTR _pImage$[ebp]
	call	?GetHeight@Image@@QAEKXZ		; Image::GetHeight
	push	eax
	mov	ecx, DWORD PTR _pImage$[ebp]
	call	?GetWidth@Image@@QAEKXZ			; Image::GetWidth
	push	eax
	lea	ecx, DWORD PTR _imgFinal$32729[ebp]
	call	?Create@Image@@QAE_NKKK@Z		; Image::Create
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN13@Create@2

; 94   :     { 
; 95   :       Free();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Free@Texture@@QAEXXZ			; Texture::Free

; 96   :       return false;

	mov	BYTE PTR $T32914[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _imgFinal$32729[ebp]
	call	??1Image@@UAE@XZ			; Image::~Image
	mov	al, BYTE PTR $T32914[ebp]
	jmp	$LN26@Create@2
$LN13@Create@2:

; 97   :     }
; 98   : 
; 99   :     {
; 100  :       UInt8 *pFinal = (UInt8*)imgFinal.GetData();

	lea	ecx, DWORD PTR _imgFinal$32729[ebp]
	call	?GetData@Image@@QAEPAXXZ		; Image::GetData
	mov	DWORD PTR _pFinal$32732[ebp], eax

; 101  :       UInt8 *pSrcData = (UInt8*)pImage->GetData();

	mov	ecx, DWORD PTR _pImage$[ebp]
	call	?GetData@Image@@QAEPAXXZ		; Image::GetData
	mov	DWORD PTR _pSrcData$32734[ebp], eax

; 102  :       UInt8 *pSrcAlpha = (UInt8*)pAlpha->GetData();

	mov	ecx, DWORD PTR _pAlpha$[ebp]
	call	?GetData@Image@@QAEPAXXZ		; Image::GetData
	mov	DWORD PTR _pSrcAlpha$32736[ebp], eax

; 103  : 
; 104  :       // Now blit 8 (Image and Alpha) to 16bit (LumiAlpha)
; 105  :       for( UInt32 iY=0; iY<pImage->GetHeight(); iY++)

	mov	DWORD PTR _iY$32738[ebp], 0
	jmp	SHORT $LN12@Create@2
$LN11@Create@2:
	mov	eax, DWORD PTR _iY$32738[ebp]
	add	eax, 1
	mov	DWORD PTR _iY$32738[ebp], eax
$LN12@Create@2:
	mov	ecx, DWORD PTR _pImage$[ebp]
	call	?GetHeight@Image@@QAEKXZ		; Image::GetHeight
	cmp	DWORD PTR _iY$32738[ebp], eax
	jae	$LN10@Create@2

; 106  :       {
; 107  :         for( UInt32 iX=0; iX<pImage->GetWidth(); iX++, pFinal+=4, pSrcData+=3, pSrcAlpha++)

	mov	DWORD PTR _iX$32742[ebp], 0
	jmp	SHORT $LN9@Create@2
$LN8@Create@2:
	mov	eax, DWORD PTR _iX$32742[ebp]
	add	eax, 1
	mov	DWORD PTR _iX$32742[ebp], eax
	mov	ecx, DWORD PTR _pFinal$32732[ebp]
	add	ecx, 4
	mov	DWORD PTR _pFinal$32732[ebp], ecx
	mov	edx, DWORD PTR _pSrcData$32734[ebp]
	add	edx, 3
	mov	DWORD PTR _pSrcData$32734[ebp], edx
	mov	eax, DWORD PTR _pSrcAlpha$32736[ebp]
	add	eax, 1
	mov	DWORD PTR _pSrcAlpha$32736[ebp], eax
$LN9@Create@2:
	mov	ecx, DWORD PTR _pImage$[ebp]
	call	?GetWidth@Image@@QAEKXZ			; Image::GetWidth
	cmp	DWORD PTR _iX$32742[ebp], eax
	jae	SHORT $LN7@Create@2

; 108  :         {
; 109  :           pFinal[0] = pSrcData[0];

	mov	eax, DWORD PTR _pFinal$32732[ebp]
	mov	ecx, DWORD PTR _pSrcData$32734[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl

; 110  :           pFinal[1] = pSrcData[1];

	mov	eax, DWORD PTR _pFinal$32732[ebp]
	mov	ecx, DWORD PTR _pSrcData$32734[ebp]
	mov	dl, BYTE PTR [ecx+1]
	mov	BYTE PTR [eax+1], dl

; 111  :           pFinal[2] = pSrcData[2];

	mov	eax, DWORD PTR _pFinal$32732[ebp]
	mov	ecx, DWORD PTR _pSrcData$32734[ebp]
	mov	dl, BYTE PTR [ecx+2]
	mov	BYTE PTR [eax+2], dl

; 112  :           pFinal[3] = pSrcAlpha[0];

	mov	eax, DWORD PTR _pFinal$32732[ebp]
	mov	ecx, DWORD PTR _pSrcAlpha$32736[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax+3], dl

; 113  :         }

	jmp	$LN8@Create@2
$LN7@Create@2:

; 114  :       }

	jmp	$LN11@Create@2
$LN10@Create@2:

; 115  :     }
; 116  : 
; 117  :     // Upload the texture, and finish our work.
; 118  :     gluBuild2DMipmaps(GL_TEXTURE_2D, 4, imgFinal.GetWidth(), imgFinal.GetHeight(),
; 119  :                       GL_RGBA, GL_UNSIGNED_BYTE, imgFinal.GetData());

	lea	ecx, DWORD PTR _imgFinal$32729[ebp]
	call	?GetData@Image@@QAEPAXXZ		; Image::GetData
	push	eax
	push	5121					; 00001401H
	push	6408					; 00001908H
	lea	ecx, DWORD PTR _imgFinal$32729[ebp]
	call	?GetHeight@Image@@QAEKXZ		; Image::GetHeight
	push	eax
	lea	ecx, DWORD PTR _imgFinal$32729[ebp]
	call	?GetWidth@Image@@QAEKXZ			; Image::GetWidth
	push	eax
	push	4
	push	3553					; 00000de1H
	call	_gluBuild2DMipmaps@28

; 120  :     imgFinal.Free();

	lea	ecx, DWORD PTR _imgFinal$32729[ebp]
	call	?Free@Image@@UAEXXZ			; Image::Free

; 121  :     return true;

	mov	BYTE PTR $T32915[ebp], 1
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _imgFinal$32729[ebp]
	call	??1Image@@UAE@XZ			; Image::~Image
	mov	al, BYTE PTR $T32915[ebp]
	jmp	$LN26@Create@2

; 122  :   } else

	jmp	$LN4@Create@2
$LN15@Create@2:

; 123  :   { 
; 124  :     switch( pImage->GetBPP() )

	mov	ecx, DWORD PTR _pImage$[ebp]
	call	?GetBPP@Image@@QAEHXZ			; Image::GetBPP
	mov	DWORD PTR tv255[ebp], eax
	cmp	DWORD PTR tv255[ebp], 8
	je	SHORT $LN3@Create@2
	cmp	DWORD PTR tv255[ebp], 24		; 00000018H
	je	SHORT $LN2@Create@2
	cmp	DWORD PTR tv255[ebp], 32		; 00000020H
	je	SHORT $LN1@Create@2
	jmp	$LN4@Create@2
$LN3@Create@2:

; 125  :     { 
; 126  :       case 8: // Upload a grayscale image.
; 127  :         gluBuild2DMipmaps(GL_TEXTURE_2D, 1, pImage->GetWidth(), pImage->GetHeight(),
; 128  :           GL_LUMINANCE, GL_UNSIGNED_BYTE, pImage->GetData());

	mov	ecx, DWORD PTR _pImage$[ebp]
	call	?GetData@Image@@QAEPAXXZ		; Image::GetData
	push	eax
	push	5121					; 00001401H
	push	6409					; 00001909H
	mov	ecx, DWORD PTR _pImage$[ebp]
	call	?GetHeight@Image@@QAEKXZ		; Image::GetHeight
	push	eax
	mov	ecx, DWORD PTR _pImage$[ebp]
	call	?GetWidth@Image@@QAEKXZ			; Image::GetWidth
	push	eax
	push	1
	push	3553					; 00000de1H
	call	_gluBuild2DMipmaps@28

; 129  :         return true;

	mov	al, 1
	jmp	SHORT $LN26@Create@2
$LN2@Create@2:

; 130  :       case 24: // Upload an RGB 24bit image.
; 131  :         gluBuild2DMipmaps(GL_TEXTURE_2D, 3, pImage->GetWidth(), pImage->GetHeight(),
; 132  :           GL_RGB, GL_UNSIGNED_BYTE, pImage->GetData());

	mov	ecx, DWORD PTR _pImage$[ebp]
	call	?GetData@Image@@QAEPAXXZ		; Image::GetData
	push	eax
	push	5121					; 00001401H
	push	6407					; 00001907H
	mov	ecx, DWORD PTR _pImage$[ebp]
	call	?GetHeight@Image@@QAEKXZ		; Image::GetHeight
	push	eax
	mov	ecx, DWORD PTR _pImage$[ebp]
	call	?GetWidth@Image@@QAEKXZ			; Image::GetWidth
	push	eax
	push	3
	push	3553					; 00000de1H
	call	_gluBuild2DMipmaps@28

; 133  :         return true;

	mov	al, 1
	jmp	SHORT $LN26@Create@2
$LN1@Create@2:

; 134  :       case 32: // Upload an RGBA 32bit image.
; 135  :         gluBuild2DMipmaps(GL_TEXTURE_2D, 4, pImage->GetWidth(), pImage->GetHeight(),
; 136  :           GL_RGBA, GL_UNSIGNED_BYTE, pImage->GetData());

	mov	ecx, DWORD PTR _pImage$[ebp]
	call	?GetData@Image@@QAEPAXXZ		; Image::GetData
	push	eax
	push	5121					; 00001401H
	push	6408					; 00001908H
	mov	ecx, DWORD PTR _pImage$[ebp]
	call	?GetHeight@Image@@QAEKXZ		; Image::GetHeight
	push	eax
	mov	ecx, DWORD PTR _pImage$[ebp]
	call	?GetWidth@Image@@QAEKXZ			; Image::GetWidth
	push	eax
	push	4
	push	3553					; 00000de1H
	call	_gluBuild2DMipmaps@28

; 137  :         return true;

	mov	al, 1
	jmp	SHORT $LN26@Create@2
$LN4@Create@2:

; 138  :     }
; 139  :   }
; 140  : 
; 141  :   return true;

	mov	al, 1
$LN26@Create@2:

; 142  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN38@Create@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 460				; 000001ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
$LN38@Create@2:
	DD	2
	DD	$LN37@Create@2
$LN37@Create@2:
	DD	-56					; ffffffc8H
	DD	28					; 0000001cH
	DD	$LN34@Create@2
	DD	-152					; ffffff68H
	DD	28					; 0000001cH
	DD	$LN35@Create@2
$LN35@Create@2:
	DB	105					; 00000069H
	DB	109					; 0000006dH
	DB	103					; 00000067H
	DB	70					; 00000046H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	0
$LN34@Create@2:
	DB	105					; 00000069H
	DB	109					; 0000006dH
	DB	103					; 00000067H
	DB	70					; 00000046H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Create@Texture@@QAE_NPAVImage@@0@Z$0:
	lea	ecx, DWORD PTR _imgFinal$32708[ebp]
	jmp	??1Image@@UAE@XZ			; Image::~Image
__unwindfunclet$?Create@Texture@@QAE_NPAVImage@@0@Z$1:
	lea	ecx, DWORD PTR _imgFinal$32729[ebp]
	jmp	??1Image@@UAE@XZ			; Image::~Image
__ehhandler$?Create@Texture@@QAE_NPAVImage@@0@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-464]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Create@Texture@@QAE_NPAVImage@@0@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Create@Texture@@QAE_NPAVImage@@0@Z ENDP		; Texture::Create
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\user\desktop\computergraphicsproject\viewer\image.h
;	COMDAT ?GetBPP@Image@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetBPP@Image@@QAEHXZ PROC				; Image::GetBPP, COMDAT
; _this$ = ecx

; 43   :   int     GetBPP()    {return m_nBPP;}    // Bits per pixel. Valid types are 8(intensity), 24(RGB), 32(RGBA)

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetBPP@Image@@QAEHXZ ENDP				; Image::GetBPP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?GetWidth@Image@@QAEKXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetWidth@Image@@QAEKXZ PROC				; Image::GetWidth, COMDAT
; _this$ = ecx

; 44   :   UInt32  GetWidth()  {return m_nWidth;}  // Width of image.

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetWidth@Image@@QAEKXZ ENDP				; Image::GetWidth
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?GetHeight@Image@@QAEKXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetHeight@Image@@QAEKXZ PROC				; Image::GetHeight, COMDAT
; _this$ = ecx

; 46   :   UInt32  GetHeight() {return m_nHeight;} // Height of image.

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+12]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetHeight@Image@@QAEKXZ ENDP				; Image::GetHeight
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?GetData@Image@@QAEPAXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetData@Image@@QAEPAXXZ PROC				; Image::GetData, COMDAT
; _this$ = ecx

; 49   :   void*   GetData()   {return m_pData;}   // Get a pointer to the pixel data.

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+24]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetData@Image@@QAEPAXXZ ENDP				; Image::GetData
_TEXT	ENDS
EXTRN	__imp__glDeleteTextures@8:PROC
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\user\desktop\computergraphicsproject\viewer\texture.cpp
;	COMDAT ?Free@Texture@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?Free@Texture@@QAEXXZ PROC				; Texture::Free, COMDAT
; _this$ = ecx

; 145  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 146  :   if( m_nID )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@Free

; 147  :   {
; 148  :     m_nID--;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], ecx

; 149  :     glDeleteTextures(1, &m_nID);

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	push	1
	call	DWORD PTR __imp__glDeleteTextures@8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 150  :     m_nID=0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
$LN2@Free:

; 151  :   }
; 152  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Free@Texture@@QAEXXZ ENDP				; Texture::Free
_TEXT	ENDS
PUBLIC	?Use@Texture@@QAEXXZ				; Texture::Use
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?Use@Texture@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?Use@Texture@@QAEXXZ PROC				; Texture::Use, COMDAT
; _this$ = ecx

; 155  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 156  :   glBindTexture(GL_TEXTURE_2D, m_nID-1);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 1
	mov	esi, esp
	push	ecx
	push	3553					; 00000de1H
	call	DWORD PTR __imp__glBindTexture@8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 157  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Use@Texture@@QAEXXZ ENDP				; Texture::Use
_TEXT	ENDS
END
