; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	c:\Users\User\Desktop\ComputerGraphicsProject\Viewer\PerlinNoise.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	?cos@@YAMM@Z					; cos
PUBLIC	?sin@@YAMM@Z					; sin
PUBLIC	__real@00000000
PUBLIC	__real@3cc90fda
PUBLIC	?setup@PerlinNoise@@AAEXXZ			; PerlinNoise::setup
EXTRN	_rand:PROC
EXTRN	_srand:PROC
EXTRN	__fltused:DWORD
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT __real@00000000
; File c:\users\user\desktop\computergraphicsproject\viewer\perlinnoise.cpp
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT __real@3cc90fda
CONST	SEGMENT
__real@3cc90fda DD 03cc90fdar			; 0.0245437
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT ?setup@PerlinNoise@@AAEXXZ
_TEXT	SEGMENT
_i$4689 = -44						; size = 4
_val$ = -32						; size = 4
_step$ = -20						; size = 4
_this$ = -8						; size = 4
?setup@PerlinNoise@@AAEXXZ PROC				; PerlinNoise::setup, COMDAT
; _this$ = ecx

; 5    : {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 6    : 	float step = 6.283185f / k_tableSize;

	fld	DWORD PTR __real@3cc90fda
	fstp	DWORD PTR _step$[ebp]

; 7    : 	float val=0.0f;

	fldz
	fstp	DWORD PTR _val$[ebp]

; 8    : 
; 9    : 	srand((unsigned)time(NULL)); 

	push	0
	call	_time
	add	esp, 4
	push	eax
	call	_srand
	add	esp, 4

; 10   : 	for (int i=0; i<k_tableSize; ++i)

	mov	DWORD PTR _i$4689[ebp], 0
	jmp	SHORT $LN3@setup
$LN2@setup:
	mov	eax, DWORD PTR _i$4689[ebp]
	add	eax, 1
	mov	DWORD PTR _i$4689[ebp], eax
$LN3@setup:
	cmp	DWORD PTR _i$4689[ebp], 256		; 00000100H
	jge	SHORT $LN1@setup

; 11   : 	{
; 12   : 		m_vecTable[i].x = (float)sin(val);

	push	ecx
	fld	DWORD PTR _val$[ebp]
	fstp	DWORD PTR [esp]
	call	?sin@@YAMM@Z				; sin
	add	esp, 4
	mov	eax, DWORD PTR _i$4689[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+eax*8]

; 13   : 		m_vecTable[i].y = (float)cos(val);

	push	ecx
	fld	DWORD PTR _val$[ebp]
	fstp	DWORD PTR [esp]
	call	?cos@@YAMM@Z				; cos
	add	esp, 4
	mov	eax, DWORD PTR _i$4689[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+eax*8+4]

; 14   : 		val += step;

	fld	DWORD PTR _val$[ebp]
	fadd	DWORD PTR _step$[ebp]
	fstp	DWORD PTR _val$[ebp]

; 15   : 
; 16   : 		m_lut[i] = rand() & k_tableMask;

	call	_rand
	and	eax, 255				; 000000ffH
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR _i$4689[ebp]
	mov	BYTE PTR [ecx+2048], al
	jmp	SHORT $LN2@setup
$LN1@setup:

; 17   : 	}
; 18   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?setup@PerlinNoise@@AAEXXZ ENDP				; PerlinNoise::setup
_TEXT	ENDS
EXTRN	__time64:PROC
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\time.inl
;	COMDAT _time
_TEXT	SEGMENT
__Time$ = 8						; size = 4
_time	PROC						; COMDAT

; 134  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 135  :     return _time64(_Time);

	mov	eax, DWORD PTR __Time$[ebp]
	push	eax
	call	__time64
	add	esp, 4

; 136  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_time	ENDP
_TEXT	ENDS
PUBLIC	_cosf
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\math.h
;	COMDAT ?cos@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?cos@@YAMM@Z PROC					; cos, COMDAT

; 504  :         {return (cosf(_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	push	ecx
	fld	DWORD PTR __X$[ebp]
	fstp	DWORD PTR [esp]
	call	_cosf
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?cos@@YAMM@Z ENDP					; cos
_TEXT	ENDS
EXTRN	_cos:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _cosf
_TEXT	SEGMENT
tv73 = -196						; size = 4
__X$ = 8						; size = 4
_cosf	PROC						; COMDAT

; 399  :         {return ((float)cos((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	fld	DWORD PTR __X$[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	_cos
	add	esp, 8
	fstp	DWORD PTR tv73[ebp]
	fld	DWORD PTR tv73[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_cosf	ENDP
_TEXT	ENDS
PUBLIC	_sinf
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?sin@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?sin@@YAMM@Z PROC					; sin, COMDAT

; 530  :         {return (sinf(_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	push	ecx
	fld	DWORD PTR __X$[ebp]
	fstp	DWORD PTR [esp]
	call	_sinf
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?sin@@YAMM@Z ENDP					; sin
_TEXT	ENDS
EXTRN	_sin:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _sinf
_TEXT	SEGMENT
tv73 = -196						; size = 4
__X$ = 8						; size = 4
_sinf	PROC						; COMDAT

; 419  :         {return ((float)sin((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	fld	DWORD PTR __X$[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	_sin
	add	esp, 8
	fstp	DWORD PTR tv73[ebp]
	fld	DWORD PTR tv73[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_sinf	ENDP
_TEXT	ENDS
PUBLIC	?noise@PerlinNoise@@QAEMMMM@Z			; PerlinNoise::noise
PUBLIC	?noise@PerlinNoise@@QAEMHHM@Z			; PerlinNoise::noise
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\user\desktop\computergraphicsproject\viewer\perlinnoise.cpp
;	COMDAT ?noise@PerlinNoise@@QAEMHHM@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_scale$ = 16						; size = 4
?noise@PerlinNoise@@QAEMHHM@Z PROC			; PerlinNoise::noise, COMDAT
; _this$ = ecx

; 97   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 98   : 	return noise((float)x, (float)y, scale);

	push	ecx
	fld	DWORD PTR _scale$[ebp]
	fstp	DWORD PTR [esp]
	fild	DWORD PTR _y$[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	fild	DWORD PTR _x$[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?noise@PerlinNoise@@QAEMMMM@Z		; PerlinNoise::noise

; 99   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?noise@PerlinNoise@@QAEMHHM@Z ENDP			; PerlinNoise::noise
_TEXT	ENDS
PUBLIC	__real@4024000000000000
PUBLIC	__real@40400000
PUBLIC	__real@402e000000000000
PUBLIC	__real@40800000
PUBLIC	__real@4018000000000000
PUBLIC	_powf
PUBLIC	__real@40a00000
PUBLIC	?getVec@PerlinNoise@@ABEABUvec2@1@HH@Z		; PerlinNoise::getVec
PUBLIC	__real@3ff0000000000000
PUBLIC	?floor@@YAMM@Z					; floor
PUBLIC	??0vec2@PerlinNoise@@QAE@MM@Z			; PerlinNoise::vec2::vec2
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	__ftol2_sse:PROC
;	COMDAT __real@4024000000000000
CONST	SEGMENT
__real@4024000000000000 DQ 04024000000000000r	; 10
CONST	ENDS
;	COMDAT __real@40400000
CONST	SEGMENT
__real@40400000 DD 040400000r			; 3
CONST	ENDS
;	COMDAT __real@402e000000000000
CONST	SEGMENT
__real@402e000000000000 DQ 0402e000000000000r	; 15
CONST	ENDS
;	COMDAT __real@40800000
CONST	SEGMENT
__real@40800000 DD 040800000r			; 4
CONST	ENDS
;	COMDAT __real@4018000000000000
CONST	SEGMENT
__real@4018000000000000 DQ 04018000000000000r	; 6
CONST	ENDS
;	COMDAT __real@40a00000
CONST	SEGMENT
__real@40a00000 DD 040a00000r			; 5
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?noise@PerlinNoise@@QAEMMMM@Z
_TEXT	SEGMENT
tv510 = -504						; size = 8
tv506 = -504						; size = 8
tv508 = -496						; size = 8
tv504 = -496						; size = 8
tv412 = -496						; size = 4
tv406 = -496						; size = 4
tv400 = -496						; size = 4
tv394 = -496						; size = 4
tv334 = -496						; size = 4
tv411 = -492						; size = 4
tv405 = -492						; size = 4
tv399 = -492						; size = 4
tv393 = -492						; size = 4
tv333 = -492						; size = 4
_result$ = -292						; size = 4
_avgX1$ = -280						; size = 4
_avgX0$ = -268						; size = 4
_Sy$ = -256						; size = 4
_Sx$ = -244						; size = 4
_h3$ = -232						; size = 4
_h2$ = -220						; size = 4
_h1$ = -208						; size = 4
_h0$ = -196						; size = 4
_d3$ = -184						; size = 8
_d2$ = -168						; size = 8
_d1$ = -152						; size = 8
_d0$ = -136						; size = 8
_v3$ = -120						; size = 4
_v2$ = -108						; size = 4
_v1$ = -96						; size = 4
_v0$ = -84						; size = 4
_Y1$ = -72						; size = 4
_Y0$ = -60						; size = 4
_X1$ = -48						; size = 4
_X0$ = -36						; size = 4
_pos$ = -24						; size = 8
_this$ = -8						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_scale$ = 16						; size = 4
?noise@PerlinNoise@@QAEMMMM@Z PROC			; PerlinNoise::noise, COMDAT
; _this$ = ecx

; 35   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 504				; 000001f8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-504]
	mov	ecx, 126				; 0000007eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 36   : 	vec2 pos(x*scale,y*scale);

	fld	DWORD PTR _y$[ebp]
	fmul	DWORD PTR _scale$[ebp]
	fstp	DWORD PTR tv333[ebp]
	fld	DWORD PTR tv333[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	fld	DWORD PTR _x$[ebp]
	fmul	DWORD PTR _scale$[ebp]
	fstp	DWORD PTR tv334[ebp]
	fld	DWORD PTR tv334[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR _pos$[ebp]
	call	??0vec2@PerlinNoise@@QAE@MM@Z		; PerlinNoise::vec2::vec2

; 37   : 
; 38   : 	float X0 = (float)floor(pos.x);

	push	ecx
	fld	DWORD PTR _pos$[ebp]
	fstp	DWORD PTR [esp]
	call	?floor@@YAMM@Z				; floor
	add	esp, 4
	fstp	DWORD PTR _X0$[ebp]

; 39   : 	float X1 = X0 + 1.0f;

	fld	DWORD PTR _X0$[ebp]
	fadd	QWORD PTR __real@3ff0000000000000
	fstp	DWORD PTR _X1$[ebp]

; 40   : 	float Y0 = (float)floor(pos.y);

	push	ecx
	fld	DWORD PTR _pos$[ebp+4]
	fstp	DWORD PTR [esp]
	call	?floor@@YAMM@Z				; floor
	add	esp, 4
	fstp	DWORD PTR _Y0$[ebp]

; 41   : 	float Y1 = Y0 + 1.0f;

	fld	DWORD PTR _Y0$[ebp]
	fadd	QWORD PTR __real@3ff0000000000000
	fstp	DWORD PTR _Y1$[ebp]

; 42   : 
; 43   : 	const vec2& v0 = 
; 44   : 		getVec((int)X0, (int)Y0);

	fld	DWORD PTR _Y0$[ebp]
	call	__ftol2_sse
	push	eax
	fld	DWORD PTR _X0$[ebp]
	call	__ftol2_sse
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getVec@PerlinNoise@@ABEABUvec2@1@HH@Z	; PerlinNoise::getVec
	mov	DWORD PTR _v0$[ebp], eax

; 45   : 	const vec2& v1 = 
; 46   : 		getVec((int)X0, (int)Y1);

	fld	DWORD PTR _Y1$[ebp]
	call	__ftol2_sse
	push	eax
	fld	DWORD PTR _X0$[ebp]
	call	__ftol2_sse
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getVec@PerlinNoise@@ABEABUvec2@1@HH@Z	; PerlinNoise::getVec
	mov	DWORD PTR _v1$[ebp], eax

; 47   : 	const vec2& v2 = 
; 48   : 		getVec((int)X1, (int)Y0);

	fld	DWORD PTR _Y0$[ebp]
	call	__ftol2_sse
	push	eax
	fld	DWORD PTR _X1$[ebp]
	call	__ftol2_sse
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getVec@PerlinNoise@@ABEABUvec2@1@HH@Z	; PerlinNoise::getVec
	mov	DWORD PTR _v2$[ebp], eax

; 49   : 	const vec2& v3 = 
; 50   : 		getVec((int)X1, (int)Y1);

	fld	DWORD PTR _Y1$[ebp]
	call	__ftol2_sse
	push	eax
	fld	DWORD PTR _X1$[ebp]
	call	__ftol2_sse
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getVec@PerlinNoise@@ABEABUvec2@1@HH@Z	; PerlinNoise::getVec
	mov	DWORD PTR _v3$[ebp], eax

; 51   : 
; 52   : 	vec2 d0(pos.x-X0, pos.y-Y0);

	fld	DWORD PTR _pos$[ebp+4]
	fsub	DWORD PTR _Y0$[ebp]
	fstp	DWORD PTR tv393[ebp]
	fld	DWORD PTR tv393[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	fld	DWORD PTR _pos$[ebp]
	fsub	DWORD PTR _X0$[ebp]
	fstp	DWORD PTR tv394[ebp]
	fld	DWORD PTR tv394[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR _d0$[ebp]
	call	??0vec2@PerlinNoise@@QAE@MM@Z		; PerlinNoise::vec2::vec2

; 53   : 	vec2 d1(pos.x-X0, pos.y-Y1);

	fld	DWORD PTR _pos$[ebp+4]
	fsub	DWORD PTR _Y1$[ebp]
	fstp	DWORD PTR tv399[ebp]
	fld	DWORD PTR tv399[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	fld	DWORD PTR _pos$[ebp]
	fsub	DWORD PTR _X0$[ebp]
	fstp	DWORD PTR tv400[ebp]
	fld	DWORD PTR tv400[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR _d1$[ebp]
	call	??0vec2@PerlinNoise@@QAE@MM@Z		; PerlinNoise::vec2::vec2

; 54   : 	vec2 d2(pos.x-X1, pos.y-Y0);

	fld	DWORD PTR _pos$[ebp+4]
	fsub	DWORD PTR _Y0$[ebp]
	fstp	DWORD PTR tv405[ebp]
	fld	DWORD PTR tv405[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	fld	DWORD PTR _pos$[ebp]
	fsub	DWORD PTR _X1$[ebp]
	fstp	DWORD PTR tv406[ebp]
	fld	DWORD PTR tv406[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR _d2$[ebp]
	call	??0vec2@PerlinNoise@@QAE@MM@Z		; PerlinNoise::vec2::vec2

; 55   : 	vec2 d3(pos.x-X1, pos.y-Y1);

	fld	DWORD PTR _pos$[ebp+4]
	fsub	DWORD PTR _Y1$[ebp]
	fstp	DWORD PTR tv411[ebp]
	fld	DWORD PTR tv411[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	fld	DWORD PTR _pos$[ebp]
	fsub	DWORD PTR _X1$[ebp]
	fstp	DWORD PTR tv412[ebp]
	fld	DWORD PTR tv412[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR _d3$[ebp]
	call	??0vec2@PerlinNoise@@QAE@MM@Z		; PerlinNoise::vec2::vec2

; 56   : 
; 57   : 	float h0 = (d0.x * v0.x)+(d0.y * v0.y);

	fld	DWORD PTR _d0$[ebp]
	mov	eax, DWORD PTR _v0$[ebp]
	fmul	DWORD PTR [eax]
	fld	DWORD PTR _d0$[ebp+4]
	mov	ecx, DWORD PTR _v0$[ebp]
	fmul	DWORD PTR [ecx+4]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR _h0$[ebp]

; 58   : 	float h1 = (d1.x * v1.x)+(d1.y * v1.y);

	fld	DWORD PTR _d1$[ebp]
	mov	eax, DWORD PTR _v1$[ebp]
	fmul	DWORD PTR [eax]
	fld	DWORD PTR _d1$[ebp+4]
	mov	ecx, DWORD PTR _v1$[ebp]
	fmul	DWORD PTR [ecx+4]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR _h1$[ebp]

; 59   : 	float h2 = (d2.x * v2.x)+(d2.y * v2.y);

	fld	DWORD PTR _d2$[ebp]
	mov	eax, DWORD PTR _v2$[ebp]
	fmul	DWORD PTR [eax]
	fld	DWORD PTR _d2$[ebp+4]
	mov	ecx, DWORD PTR _v2$[ebp]
	fmul	DWORD PTR [ecx+4]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR _h2$[ebp]

; 60   : 	float h3 = (d3.x * v3.x)+(d3.y * v3.y);

	fld	DWORD PTR _d3$[ebp]
	mov	eax, DWORD PTR _v3$[ebp]
	fmul	DWORD PTR [eax]
	fld	DWORD PTR _d3$[ebp+4]
	mov	ecx, DWORD PTR _v3$[ebp]
	fmul	DWORD PTR [ecx+4]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR _h3$[ebp]

; 61   : 
; 62   : 	float Sx,Sy;
; 63   : 
; 64   : 
; 65   : 
; 66   : 	/*Sx = (3*powf(d0.x,2.0f))
; 67   : 		-(2*powf(d0.x,3.0f));
; 68   : 
; 69   : 	Sy = (3*powf(d0.y,2.0f))
; 70   : 		-(2*powf(d0.y,3.0f));*/
; 71   : 
; 72   : 
; 73   : 	// the revised blend equation is 
; 74   : 	// considered more ideal, but is
; 75   : 	// slower to compute
; 76   : 	Sx = (6*powf(d0.x,5.0f))
; 77   : 		-(15*powf(d0.x,4.0f))
; 78   : 		+(10*powf(d0.x,3.0f));

	push	ecx
	fld	DWORD PTR __real@40a00000
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _d0$[ebp]
	fstp	DWORD PTR [esp]
	call	_powf
	add	esp, 8
	fmul	QWORD PTR __real@4018000000000000
	push	ecx
	fld	DWORD PTR __real@40800000
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _d0$[ebp]
	fstp	DWORD PTR [esp]
	fstp	QWORD PTR tv504[ebp]
	call	_powf
	add	esp, 8
	fmul	QWORD PTR __real@402e000000000000
	fsubr	QWORD PTR tv504[ebp]
	push	ecx
	fld	DWORD PTR __real@40400000
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _d0$[ebp]
	fstp	DWORD PTR [esp]
	fstp	QWORD PTR tv506[ebp]
	call	_powf
	add	esp, 8
	fmul	QWORD PTR __real@4024000000000000
	fadd	QWORD PTR tv506[ebp]
	fstp	DWORD PTR _Sx$[ebp]

; 79   : 
; 80   : 	Sy = (6*powf(d0.y,5.0f))
; 81   : 		-(15*powf(d0.y,4.0f))
; 82   : 		+(10*powf(d0.y,3.0f));

	push	ecx
	fld	DWORD PTR __real@40a00000
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _d0$[ebp+4]
	fstp	DWORD PTR [esp]
	call	_powf
	add	esp, 8
	fmul	QWORD PTR __real@4018000000000000
	push	ecx
	fld	DWORD PTR __real@40800000
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _d0$[ebp+4]
	fstp	DWORD PTR [esp]
	fstp	QWORD PTR tv508[ebp]
	call	_powf
	add	esp, 8
	fmul	QWORD PTR __real@402e000000000000
	fsubr	QWORD PTR tv508[ebp]
	push	ecx
	fld	DWORD PTR __real@40400000
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _d0$[ebp+4]
	fstp	DWORD PTR [esp]
	fstp	QWORD PTR tv510[ebp]
	call	_powf
	add	esp, 8
	fmul	QWORD PTR __real@4024000000000000
	fadd	QWORD PTR tv510[ebp]
	fstp	DWORD PTR _Sy$[ebp]

; 83   : 
; 84   : 
; 85   : 	float avgX0 = h0 + (Sx*(h2 - h0));

	fld	DWORD PTR _h2$[ebp]
	fsub	DWORD PTR _h0$[ebp]
	fmul	DWORD PTR _Sx$[ebp]
	fadd	DWORD PTR _h0$[ebp]
	fstp	DWORD PTR _avgX0$[ebp]

; 86   : 	float avgX1 = h1 + (Sx*(h3 - h1));

	fld	DWORD PTR _h3$[ebp]
	fsub	DWORD PTR _h1$[ebp]
	fmul	DWORD PTR _Sx$[ebp]
	fadd	DWORD PTR _h1$[ebp]
	fstp	DWORD PTR _avgX1$[ebp]

; 87   : 	float result = avgX0 + (Sy*(avgX1 - avgX0)); 

	fld	DWORD PTR _avgX1$[ebp]
	fsub	DWORD PTR _avgX0$[ebp]
	fmul	DWORD PTR _Sy$[ebp]
	fadd	DWORD PTR _avgX0$[ebp]
	fstp	DWORD PTR _result$[ebp]

; 88   : 	//float result = 
; 89   : 
; 90   : 	return result;

	fld	DWORD PTR _result$[ebp]

; 91   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@noise
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 504				; 000001f8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	2
$LN9@noise:
	DD	5
	DD	$LN8@noise
$LN8@noise:
	DD	-24					; ffffffe8H
	DD	8
	DD	$LN3@noise
	DD	-136					; ffffff78H
	DD	8
	DD	$LN4@noise
	DD	-152					; ffffff68H
	DD	8
	DD	$LN5@noise
	DD	-168					; ffffff58H
	DD	8
	DD	$LN6@noise
	DD	-184					; ffffff48H
	DD	8
	DD	$LN7@noise
$LN7@noise:
	DB	100					; 00000064H
	DB	51					; 00000033H
	DB	0
$LN6@noise:
	DB	100					; 00000064H
	DB	50					; 00000032H
	DB	0
$LN5@noise:
	DB	100					; 00000064H
	DB	49					; 00000031H
	DB	0
$LN4@noise:
	DB	100					; 00000064H
	DB	48					; 00000030H
	DB	0
$LN3@noise:
	DB	112					; 00000070H
	DB	111					; 0000006fH
	DB	115					; 00000073H
	DB	0
?noise@PerlinNoise@@QAEMMMM@Z ENDP			; PerlinNoise::noise
_TEXT	ENDS
EXTRN	_pow:PROC
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\math.h
;	COMDAT _powf
_TEXT	SEGMENT
tv77 = -196						; size = 4
__X$ = 8						; size = 4
__Y$ = 12						; size = 4
_powf	PROC						; COMDAT

; 417  :         {return ((float)pow((double)_X, (double)_Y)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	fld	DWORD PTR __Y$[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	fld	DWORD PTR __X$[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	_pow
	add	esp, 16					; 00000010H
	fstp	DWORD PTR tv77[ebp]
	fld	DWORD PTR tv77[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_powf	ENDP
_TEXT	ENDS
PUBLIC	_floorf
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?floor@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?floor@@YAMM@Z PROC					; floor, COMDAT

; 512  :         {return (floorf(_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	push	ecx
	fld	DWORD PTR __X$[ebp]
	fstp	DWORD PTR [esp]
	call	_floorf
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?floor@@YAMM@Z ENDP					; floor
_TEXT	ENDS
EXTRN	_floor:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _floorf
_TEXT	SEGMENT
tv73 = -196						; size = 4
__X$ = 8						; size = 4
_floorf	PROC						; COMDAT

; 405  :         {return ((float)floor((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	fld	DWORD PTR __X$[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	_floor
	add	esp, 8
	fstp	DWORD PTR tv73[ebp]
	fld	DWORD PTR tv73[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_floorf	ENDP
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\user\desktop\computergraphicsproject\viewer\perlinnoise.h
_TEXT	ENDS
;	COMDAT ??0vec2@PerlinNoise@@QAE@MM@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__x$ = 8						; size = 4
__y$ = 12						; size = 4
??0vec2@PerlinNoise@@QAE@MM@Z PROC			; PerlinNoise::vec2::vec2, COMDAT
; _this$ = ecx

; 15   : 		vec2(float _x, float _y):x(_x),y(_y){}; 

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR __x$[ebp]
	fstp	DWORD PTR [eax]
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR __y$[ebp]
	fstp	DWORD PTR [eax+4]
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0vec2@PerlinNoise@@QAE@MM@Z ENDP			; PerlinNoise::vec2::vec2
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\user\desktop\computergraphicsproject\viewer\perlinnoise.cpp
_TEXT	ENDS
;	COMDAT ?getVec@PerlinNoise@@ABEABUvec2@1@HH@Z
_TEXT	SEGMENT
_val$ = -41						; size = 1
_b$ = -29						; size = 1
_a$ = -17						; size = 1
_this$ = -8						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?getVec@PerlinNoise@@ABEABUvec2@1@HH@Z PROC		; PerlinNoise::getVec, COMDAT
; _this$ = ecx

; 23   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 24   : 	unsigned char a = m_lut[x&k_tableMask]; 

	mov	eax, DWORD PTR _x$[ebp]
	and	eax, 255				; 000000ffH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR [ecx+eax+2048]
	mov	BYTE PTR _a$[ebp], dl

; 25   : 	unsigned char b = m_lut[y&k_tableMask]; 

	mov	eax, DWORD PTR _y$[ebp]
	and	eax, 255				; 000000ffH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR [ecx+eax+2048]
	mov	BYTE PTR _b$[ebp], dl

; 26   : 	unsigned char val = m_lut[(a+b)&k_tableMask];

	movzx	eax, BYTE PTR _a$[ebp]
	movzx	ecx, BYTE PTR _b$[ebp]
	add	eax, ecx
	and	eax, 255				; 000000ffH
	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [edx+eax+2048]
	mov	BYTE PTR _val$[ebp], al

; 27   : 	return m_vecTable[val];

	movzx	eax, BYTE PTR _val$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 28   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?getVec@PerlinNoise@@ABEABUvec2@1@HH@Z ENDP		; PerlinNoise::getVec
_TEXT	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	??0vec2@PerlinNoise@@QAE@XZ			; PerlinNoise::vec2::vec2
PUBLIC	??0PerlinNoise@@QAE@XZ				; PerlinNoise::PerlinNoise
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0PerlinNoise@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0PerlinNoise@@QAE@XZ PROC				; PerlinNoise::PerlinNoise, COMDAT
; _this$ = ecx

; 102  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??0vec2@PerlinNoise@@QAE@XZ	; PerlinNoise::vec2::vec2
	push	256					; 00000100H
	push	8
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_H@YGXPAXIHP6EPAX0@Z@Z

; 103  : 	setup();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?setup@PerlinNoise@@AAEXXZ		; PerlinNoise::setup

; 104  : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0PerlinNoise@@QAE@XZ ENDP				; PerlinNoise::PerlinNoise
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\user\desktop\computergraphicsproject\viewer\perlinnoise.h
_TEXT	ENDS
;	COMDAT ??0vec2@PerlinNoise@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0vec2@PerlinNoise@@QAE@XZ PROC			; PerlinNoise::vec2::vec2, COMDAT
; _this$ = ecx

; 16   : 		vec2(){};

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0vec2@PerlinNoise@@QAE@XZ ENDP			; PerlinNoise::vec2::vec2
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
$LN2@vector:
	mov	eax, DWORD PTR ___n$[ebp]
	sub	eax, 1
	mov	DWORD PTR ___n$[ebp], eax
	js	SHORT $LN3@vector
	mov	esi, esp
	mov	ecx, DWORD PTR ___t$[ebp]
	call	DWORD PTR ___f$[ebp]
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	eax, DWORD PTR ___t$[ebp]
	add	eax, DWORD PTR ___s$[ebp]
	mov	DWORD PTR ___t$[ebp], eax
	jmp	SHORT $LN2@vector
$LN3@vector:
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	??1PerlinNoise@@QAE@XZ				; PerlinNoise::~PerlinNoise
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\user\desktop\computergraphicsproject\viewer\perlinnoise.cpp
;	COMDAT ??1PerlinNoise@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1PerlinNoise@@QAE@XZ PROC				; PerlinNoise::~PerlinNoise, COMDAT
; _this$ = ecx

; 107  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 108  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1PerlinNoise@@QAE@XZ ENDP				; PerlinNoise::~PerlinNoise
_TEXT	ENDS
END
