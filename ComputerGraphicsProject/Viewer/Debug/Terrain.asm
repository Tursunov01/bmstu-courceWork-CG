; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	c:\Users\User\Desktop\ComputerGraphicsProject\Viewer\Terrain.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	?fLightPos@@3PAMA				; fLightPos
PUBLIC	?fNoLight@@3PAMA				; fNoLight
PUBLIC	?fLowLight@@3PAMA				; fLowLight
PUBLIC	?fBrightLight@@3PAMA				; fBrightLight
_BSS	SEGMENT
?fNoLight@@3PAMA DD 04H DUP (?)				; fNoLight
_BSS	ENDS
_DATA	SEGMENT
?fLightPos@@3PAMA DD 0c2c80000r			; -100	; fLightPos
	DD	042c80000r			; 100
	DD	042480000r			; 50
	DD	03f800000r			; 1
?fLowLight@@3PAMA DD 03f000000r			; 0.5	; fLowLight
	DD	03f000000r			; 0.5
	DD	03f000000r			; 0.5
	DD	03f800000r			; 1
?fBrightLight@@3PAMA DD 03f800000r		; 1	; fBrightLight
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	03f800000r			; 1
_DATA	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	??0Vector@@QAE@XZ				; Vector::Vector
PUBLIC	??0Terrain@@QAE@XZ				; Terrain::Terrain
EXTRN	??1Image@@UAE@XZ:PROC				; Image::~Image
EXTRN	__imp__glLightfv@12:PROC
EXTRN	__imp__glLightModelfv@8:PROC
EXTRN	??0Image@@QAE@XZ:PROC				; Image::Image
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT xdata$x
; File c:\users\user\desktop\computergraphicsproject\viewer\terrain.cpp
xdata$x	SEGMENT
__unwindtable$??0Terrain@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0Terrain@@QAE@XZ$0
__ehfuncinfo$??0Terrain@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0Terrain@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT ??0Terrain@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??0Terrain@@QAE@XZ PROC					; Terrain::Terrain, COMDAT
; _this$ = ecx

; 20   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0Terrain@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??0Image@@QAE@XZ			; Image::Image
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	call	??0Vector@@QAE@XZ			; Vector::Vector
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 68					; 00000044H
	call	??0Vector@@QAE@XZ			; Vector::Vector
	push	OFFSET ??0Vector@@QAE@XZ		; Vector::Vector
	push	12					; 0000000cH
	push	12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 124				; 0000007cH
	push	eax
	call	??_H@YGXPAXIHP6EPAX0@Z@Z

; 21   : 	this->wireFrame = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0

; 22   : 	this->drawDetail = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 1

; 23   : 	this->drawLightmap = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 1

; 24   : 	this->drawTexture = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 1

; 25   : 
; 26   : 	glLightModelfv(GL_LIGHT_MODEL_AMBIENT, fNoLight);

	mov	esi, esp
	push	OFFSET ?fNoLight@@3PAMA			; fNoLight
	push	2899					; 00000b53H
	call	DWORD PTR __imp__glLightModelfv@8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 27   :     glLightfv(GL_LIGHT0, GL_AMBIENT, fLowLight);

	mov	esi, esp
	push	OFFSET ?fLowLight@@3PAMA		; fLowLight
	push	4608					; 00001200H
	push	16384					; 00004000H
	call	DWORD PTR __imp__glLightfv@12
	cmp	esi, esp
	call	__RTC_CheckEsp

; 28   :     glLightfv(GL_LIGHT0, GL_DIFFUSE, fBrightLight);

	mov	esi, esp
	push	OFFSET ?fBrightLight@@3PAMA		; fBrightLight
	push	4609					; 00001201H
	push	16384					; 00004000H
	call	DWORD PTR __imp__glLightfv@12
	cmp	esi, esp
	call	__RTC_CheckEsp

; 29   :     glLightfv(GL_LIGHT0, GL_SPECULAR, fBrightLight);    

	mov	esi, esp
	push	OFFSET ?fBrightLight@@3PAMA		; fBrightLight
	push	4610					; 00001202H
	push	16384					; 00004000H
	call	DWORD PTR __imp__glLightfv@12
	cmp	esi, esp
	call	__RTC_CheckEsp

; 30   : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0Terrain@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	jmp	??1Image@@UAE@XZ			; Image::~Image
__ehhandler$??0Terrain@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0Terrain@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0Terrain@@QAE@XZ ENDP					; Terrain::Terrain
PUBLIC	__real@00000000
EXTRN	?Set@Vector@@QAEXMMM@Z:PROC			; Vector::Set
EXTRN	__fltused:DWORD
;	COMDAT __real@00000000
; File c:\users\user\desktop\computergraphicsproject\viewer\vector.h
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ??0Vector@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0Vector@@QAE@XZ PROC					; Vector::Vector, COMDAT
; _this$ = ecx

; 20   : 	Vector()								{ Set(0, 0, 0); }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector@@QAEXMMM@Z			; Vector::Set
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0Vector@@QAE@XZ ENDP					; Vector::Vector
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
$LN2@vector:
	mov	eax, DWORD PTR ___n$[ebp]
	sub	eax, 1
	mov	DWORD PTR ___n$[ebp], eax
	js	SHORT $LN3@vector
	mov	esi, esp
	mov	ecx, DWORD PTR ___t$[ebp]
	call	DWORD PTR ___f$[ebp]
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	eax, DWORD PTR ___t$[ebp]
	add	eax, DWORD PTR ___s$[ebp]
	mov	DWORD PTR ___t$[ebp], eax
	jmp	SHORT $LN2@vector
$LN3@vector:
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	??1Terrain@@QAE@XZ				; Terrain::~Terrain
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
;	COMDAT xdata$x
; File c:\users\user\desktop\computergraphicsproject\viewer\terrain.cpp
xdata$x	SEGMENT
__unwindtable$??1Terrain@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1Terrain@@QAE@XZ$0
__ehfuncinfo$??1Terrain@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1Terrain@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??1Terrain@@QAE@XZ
_TEXT	SEGMENT
$T33874 = -224						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1Terrain@@QAE@XZ PROC					; Terrain::~Terrain, COMDAT
; _this$ = ecx

; 33   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1Terrain@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 34   : 	delete pVertexData;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	mov	DWORD PTR $T33874[ebp], ecx
	mov	edx, DWORD PTR $T33874[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 35   : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??1Image@@UAE@XZ			; Image::~Image
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1Terrain@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	jmp	??1Image@@UAE@XZ			; Image::~Image
__ehhandler$??1Terrain@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-232]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1Terrain@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1Terrain@@QAE@XZ ENDP					; Terrain::~Terrain
PUBLIC	?SetParams@Terrain@@QAEXAAVVector@@0M@Z		; Terrain::SetParams
PUBLIC	?GetBPP@Image@@QAEHXZ				; Image::GetBPP
PUBLIC	?GetHeight@Image@@QAEKXZ			; Image::GetHeight
PUBLIC	?GetWidth@Image@@QAEKXZ				; Image::GetWidth
PUBLIC	?SetHeightmapTerrain@Terrain@@QAEXPADAAVVector@@1M@Z ; Terrain::SetHeightmapTerrain
EXTRN	?Create@Image@@QAE_NPADP6A_N0PAV1@@Z@Z:PROC	; Image::Create
EXTRN	?imgLoadBMP@@YA_NPADPAVImage@@@Z:PROC		; imgLoadBMP
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?SetHeightmapTerrain@Terrain@@QAEXPADAAVVector@@1M@Z
_TEXT	SEGMENT
tv132 = -208						; size = 4
_this$ = -8						; size = 4
_pHeightMapName$ = 8					; size = 4
_origin$ = 12						; size = 4
_dimen$ = 16						; size = 4
_density$ = 20						; size = 4
?SetHeightmapTerrain@Terrain@@QAEXPADAAVVector@@1M@Z PROC ; Terrain::SetHeightmapTerrain, COMDAT
; _this$ = ecx

; 38   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 39   : 	imgHeightMap.Create(pHeightMapName, imgLoadBMP);

	push	OFFSET ?imgLoadBMP@@YA_NPADPAVImage@@@Z	; imgLoadBMP
	mov	eax, DWORD PTR _pHeightMapName$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	?Create@Image@@QAE_NPADP6A_N0PAV1@@Z@Z	; Image::Create

; 40   : 
; 41   : 	mapXRes = imgHeightMap.GetWidth();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	?GetWidth@Image@@QAEKXZ			; Image::GetWidth
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+48], eax

; 42   : 	mapYRes = imgHeightMap.GetHeight();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	?GetHeight@Image@@QAEKXZ		; Image::GetHeight
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+52], eax

; 43   : 
; 44   : 	HeightDim = (1 << imgHeightMap.GetBPP());

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	?GetBPP@Image@@QAEHXZ			; Image::GetBPP
	mov	edx, 1
	mov	ecx, eax
	shl	edx, cl
	mov	DWORD PTR tv132[ebp], edx
	fild	DWORD PTR tv132[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+88]

; 45   : 	
; 46   : 	this->RandGen = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+104], 0

; 47   : 	SetParams(origin, dimen, density);

	push	ecx
	fld	DWORD PTR _density$[ebp]
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _dimen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _origin$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetParams@Terrain@@QAEXAAVVector@@0M@Z	; Terrain::SetParams

; 48   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?SetHeightmapTerrain@Terrain@@QAEXPADAAVVector@@1M@Z ENDP ; Terrain::SetHeightmapTerrain
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\user\desktop\computergraphicsproject\viewer\image.h
_TEXT	ENDS
;	COMDAT ?GetBPP@Image@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetBPP@Image@@QAEHXZ PROC				; Image::GetBPP, COMDAT
; _this$ = ecx

; 43   :   int     GetBPP()    {return m_nBPP;}    // Bits per pixel. Valid types are 8(intensity), 24(RGB), 32(RGBA)

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetBPP@Image@@QAEHXZ ENDP				; Image::GetBPP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?GetWidth@Image@@QAEKXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetWidth@Image@@QAEKXZ PROC				; Image::GetWidth, COMDAT
; _this$ = ecx

; 44   :   UInt32  GetWidth()  {return m_nWidth;}  // Width of image.

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetWidth@Image@@QAEKXZ ENDP				; Image::GetWidth
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?GetHeight@Image@@QAEKXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetHeight@Image@@QAEKXZ PROC				; Image::GetHeight, COMDAT
; _this$ = ecx

; 46   :   UInt32  GetHeight() {return m_nHeight;} // Height of image.

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+12]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetHeight@Image@@QAEKXZ ENDP				; Image::GetHeight
_TEXT	ENDS
PUBLIC	?SetRandomTerrain@Terrain@@QAEXAAVVector@@00MM@Z ; Terrain::SetRandomTerrain
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\user\desktop\computergraphicsproject\viewer\terrain.cpp
;	COMDAT ?SetRandomTerrain@Terrain@@QAEXAAVVector@@00MM@Z
_TEXT	SEGMENT
tv92 = -220						; size = 8
tv82 = -220						; size = 8
tv90 = -212						; size = 4
tv80 = -212						; size = 4
tv87 = -206						; size = 2
tv77 = -206						; size = 2
_this$ = -8						; size = 4
_origin$ = 8						; size = 4
_dimen$ = 12						; size = 4
_Size$ = 16						; size = 4
_density$ = 20						; size = 4
_rand_seed$ = 24					; size = 4
?SetRandomTerrain@Terrain@@QAEXAAVVector@@00MM@Z PROC	; Terrain::SetRandomTerrain, COMDAT
; _this$ = ecx

; 51   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 52   : 	mapXRes = (dword)Size.x;

	mov	eax, DWORD PTR _Size$[ebp]
	fld	DWORD PTR [eax]
	fnstcw	WORD PTR tv77[ebp]
	movzx	eax, WORD PTR tv77[ebp]
	or	eax, 3072				; 00000c00H
	mov	DWORD PTR tv80[ebp], eax
	fldcw	WORD PTR tv80[ebp]
	fistp	QWORD PTR tv82[ebp]
	fldcw	WORD PTR tv77[ebp]
	mov	ecx, DWORD PTR tv82[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+48], ecx

; 53   : 	mapYRes = (dword)Size.y;

	mov	eax, DWORD PTR _Size$[ebp]
	fld	DWORD PTR [eax+4]
	fnstcw	WORD PTR tv87[ebp]
	movzx	eax, WORD PTR tv87[ebp]
	or	eax, 3072				; 00000c00H
	mov	DWORD PTR tv90[ebp], eax
	fldcw	WORD PTR tv90[ebp]
	fistp	QWORD PTR tv92[ebp]
	fldcw	WORD PTR tv87[ebp]
	mov	ecx, DWORD PTR tv92[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+52], ecx

; 54   : 	
; 55   : 	this->rand_seed = rand_seed;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _rand_seed$[ebp]
	fstp	DWORD PTR [eax+100]

; 56   : 	this->RandGen = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+104], 1

; 57   : 	SetParams(origin, dimen, density);

	push	ecx
	fld	DWORD PTR _density$[ebp]
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _dimen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _origin$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetParams@Terrain@@QAEXAAVVector@@0M@Z	; Terrain::SetParams

; 58   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?SetRandomTerrain@Terrain@@QAEXAAVVector@@00MM@Z ENDP	; Terrain::SetRandomTerrain
_TEXT	ENDS
PUBLIC	__real@3f000000
PUBLIC	__real@4028000000000000
PUBLIC	?BuildTerrain@Terrain@@AAEXXZ			; Terrain::BuildTerrain
PUBLIC	??0VertexData@@QAE@XZ				; VertexData::VertexData
EXTRN	??HVector@@QAE?AV0@AAV0@@Z:PROC			; Vector::operator+
EXTRN	??DVector@@QAE?AV0@M@Z:PROC			; Vector::operator*
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	@_RTC_CheckStackVars@8:PROC
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@4028000000000000
CONST	SEGMENT
__real@4028000000000000 DQ 04028000000000000r	; 12
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?SetParams@Terrain@@QAEXAAVVector@@0M@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SetParams@Terrain@@QAEXAAVVector@@0M@Z$0
__ehfuncinfo$?SetParams@Terrain@@QAEXAAVVector@@0M@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?SetParams@Terrain@@QAEXAAVVector@@0M@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ?SetParams@Terrain@@QAEXAAVVector@@0M@Z
_TEXT	SEGMENT
tv376 = -368						; size = 8
tv362 = -368						; size = 8
tv374 = -360						; size = 4
tv360 = -360						; size = 4
tv483 = -356						; size = 4
tv473 = -356						; size = 4
tv463 = -356						; size = 4
tv453 = -356						; size = 4
tv371 = -354						; size = 2
tv357 = -354						; size = 2
tv519 = -352						; size = 4
tv510 = -352						; size = 4
tv501 = -352						; size = 4
tv492 = -352						; size = 4
tv482 = -352						; size = 4
tv472 = -352						; size = 4
tv462 = -352						; size = 4
tv452 = -352						; size = 4
tv398 = -352						; size = 8
tv389 = -352						; size = 8
tv367 = -352						; size = 8
tv353 = -352						; size = 8
tv518 = -348						; size = 4
tv509 = -348						; size = 4
tv500 = -348						; size = 4
tv491 = -348						; size = 4
tv481 = -348						; size = 4
tv471 = -348						; size = 4
tv461 = -348						; size = 4
tv451 = -348						; size = 4
tv167 = -348						; size = 4
$T33894 = -340						; size = 4
$T33895 = -328						; size = 4
$T33896 = -316						; size = 4
$T33899 = -304						; size = 12
$T33900 = -284						; size = 12
_rad$ = -72						; size = 4
_radius$ = -60						; size = 12
_center$ = -40						; size = 12
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_origin$ = 8						; size = 4
_dimen$ = 12						; size = 4
_density$ = 16						; size = 4
?SetParams@Terrain@@QAEXAAVVector@@0M@Z PROC		; Terrain::SetParams, COMDAT
; _this$ = ecx

; 61   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?SetParams@Terrain@@QAEXAAVVector@@0M@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 356				; 00000164H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-368]
	mov	ecx, 89					; 00000059H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 62   : 	this->origin = origin;

	mov	eax, DWORD PTR _origin$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax

; 63   : 	this->dimen = dimen;

	mov	eax, DWORD PTR _dimen$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 68					; 00000044H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax

; 64   : 	//this->waterHeight = waterHeight;
; 65   : 
; 66   : 	// calculate the resolution of our vertex-map
; 67   : 	vertXRes = (dword)(mapXRes * density);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	DWORD PTR tv353[ebp], ecx
	mov	DWORD PTR tv353[ebp+4], 0
	fild	QWORD PTR tv353[ebp]
	fmul	DWORD PTR _density$[ebp]
	fnstcw	WORD PTR tv357[ebp]
	movzx	eax, WORD PTR tv357[ebp]
	or	eax, 3072				; 00000c00H
	mov	DWORD PTR tv360[ebp], eax
	fldcw	WORD PTR tv360[ebp]
	fistp	QWORD PTR tv362[ebp]
	fldcw	WORD PTR tv357[ebp]
	mov	edx, DWORD PTR tv362[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+80], edx

; 68   : 	vertYRes = (dword)(mapYRes * density);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	mov	DWORD PTR tv367[ebp], ecx
	mov	DWORD PTR tv367[ebp+4], 0
	fild	QWORD PTR tv367[ebp]
	fmul	DWORD PTR _density$[ebp]
	fnstcw	WORD PTR tv371[ebp]
	movzx	eax, WORD PTR tv371[ebp]
	or	eax, 3072				; 00000c00H
	mov	DWORD PTR tv374[ebp], eax
	fldcw	WORD PTR tv374[ebp]
	fistp	QWORD PTR tv376[ebp]
	fldcw	WORD PTR tv371[ebp]
	mov	edx, DWORD PTR tv376[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+84], edx

; 69   : 
; 70   : 	if (vertXRes < 3)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+80], 3
	jae	SHORT $LN2@SetParams

; 71   : 		vertXRes = 3;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+80], 3
$LN2@SetParams:

; 72   : 
; 73   : 	if (vertYRes < 3)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+84], 3
	jae	SHORT $LN1@SetParams

; 74   : 		vertYRes = 3;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+84], 3
$LN1@SetParams:

; 75   : 
; 76   : 	vertXRes = 1 + ((vertXRes-1)>>1)*2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+80]
	sub	ecx, 1
	shr	ecx, 1
	lea	edx, DWORD PTR [ecx+ecx+1]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+80], edx

; 77   : 	vertYRes = 1 + ((vertYRes-1)>>1)*2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	sub	ecx, 1
	shr	ecx, 1
	lea	edx, DWORD PTR [ecx+ecx+1]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+84], edx

; 78   : 
; 79   : 	TileX = dimen.x / vertXRes;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+80]
	mov	DWORD PTR tv389[ebp], ecx
	mov	DWORD PTR tv389[ebp+4], 0
	fild	QWORD PTR tv389[ebp]
	mov	edx, DWORD PTR _dimen$[ebp]
	fdivr	DWORD PTR [edx]
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+92]

; 80   : 	TileY = dimen.z / vertYRes;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	DWORD PTR tv398[ebp], ecx
	mov	DWORD PTR tv398[ebp+4], 0
	fild	QWORD PTR tv398[ebp]
	mov	edx, DWORD PTR _dimen$[ebp]
	fdivr	DWORD PTR [edx+8]
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+96]

; 81   : 
; 82   : 	pVertexData = new VertexData[vertXRes*vertYRes];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+80]
	imul	edx, DWORD PTR [ecx+84]
	mov	DWORD PTR $T33894[ebp], edx
	xor	ecx, ecx
	mov	eax, DWORD PTR $T33894[ebp]
	mov	edx, 32					; 00000020H
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T33896[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T33896[ebp], 0
	je	SHORT $LN5@SetParams
	push	OFFSET ??0VertexData@@QAE@XZ
	mov	eax, DWORD PTR $T33894[ebp]
	push	eax
	push	32					; 00000020H
	mov	ecx, DWORD PTR $T33896[ebp]
	push	ecx
	call	??_H@YGXPAXIHP6EPAX0@Z@Z
	mov	edx, DWORD PTR $T33896[ebp]
	mov	DWORD PTR tv167[ebp], edx
	jmp	SHORT $LN6@SetParams
$LN5@SetParams:
	mov	DWORD PTR tv167[ebp], 0
$LN6@SetParams:
	mov	eax, DWORD PTR tv167[ebp]
	mov	DWORD PTR $T33895[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T33895[ebp]
	mov	DWORD PTR [ecx+108], edx

; 83   : 
; 84   : 	BuildTerrain();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?BuildTerrain@Terrain@@AAEXXZ		; Terrain::BuildTerrain

; 85   : 
; 86   : 	// vertices
; 87   : 	Vector	center, radius;

	lea	ecx, DWORD PTR _center$[ebp]
	call	??0Vector@@QAE@XZ			; Vector::Vector
	lea	ecx, DWORD PTR _radius$[ebp]
	call	??0Vector@@QAE@XZ			; Vector::Vector

; 88   : 	const float rad = dimen.x*12;

	mov	eax, DWORD PTR _dimen$[ebp]
	fld	DWORD PTR [eax]
	fmul	QWORD PTR __real@4028000000000000
	fstp	DWORD PTR _rad$[ebp]

; 89   : 
; 90   : 	center = origin + (dimen * 0.5f);

	push	ecx
	fld	DWORD PTR __real@3f000000
	fstp	DWORD PTR [esp]
	lea	eax, DWORD PTR $T33899[ebp]
	push	eax
	mov	ecx, DWORD PTR _dimen$[ebp]
	call	??DVector@@QAE?AV0@M@Z			; Vector::operator*
	push	eax
	lea	ecx, DWORD PTR $T33900[ebp]
	push	ecx
	mov	ecx, DWORD PTR _origin$[ebp]
	call	??HVector@@QAE?AV0@AAV0@@Z		; Vector::operator+
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR _center$[ebp], edx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _center$[ebp+4], ecx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR _center$[ebp+8], edx

; 91   : 	center.y = origin.y+dimen.y*this->waterHeight;

	mov	eax, DWORD PTR _dimen$[ebp]
	fld	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx+16]
	mov	edx, DWORD PTR _origin$[ebp]
	fadd	DWORD PTR [edx+4]
	fstp	DWORD PTR _center$[ebp+4]

; 92   : 	radius.Set(rad, rad, rad);

	push	ecx
	fld	DWORD PTR _rad$[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _rad$[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _rad$[ebp]
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR _radius$[ebp]
	call	?Set@Vector@@QAEXMMM@Z			; Vector::Set

; 93   : 
; 94   : 	// top
; 95   : 	skyBoxVerts[0].Set(center.x-radius.x, center.y+radius.y, center.z+radius.z);

	fld	DWORD PTR _center$[ebp+8]
	fadd	DWORD PTR _radius$[ebp+8]
	fstp	DWORD PTR tv451[ebp]
	fld	DWORD PTR tv451[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	fld	DWORD PTR _center$[ebp+4]
	fadd	DWORD PTR _radius$[ebp+4]
	fstp	DWORD PTR tv452[ebp]
	fld	DWORD PTR tv452[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	fld	DWORD PTR _center$[ebp]
	fsub	DWORD PTR _radius$[ebp]
	fstp	DWORD PTR tv453[ebp]
	fld	DWORD PTR tv453[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 124				; 0000007cH
	call	?Set@Vector@@QAEXMMM@Z			; Vector::Set

; 96   : 	skyBoxVerts[1].Set(center.x+radius.x, center.y+radius.y, center.z+radius.z);

	fld	DWORD PTR _center$[ebp+8]
	fadd	DWORD PTR _radius$[ebp+8]
	fstp	DWORD PTR tv461[ebp]
	fld	DWORD PTR tv461[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	fld	DWORD PTR _center$[ebp+4]
	fadd	DWORD PTR _radius$[ebp+4]
	fstp	DWORD PTR tv462[ebp]
	fld	DWORD PTR tv462[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	fld	DWORD PTR _center$[ebp]
	fadd	DWORD PTR _radius$[ebp]
	fstp	DWORD PTR tv463[ebp]
	fld	DWORD PTR tv463[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 136				; 00000088H
	call	?Set@Vector@@QAEXMMM@Z			; Vector::Set

; 97   : 	skyBoxVerts[2].Set(center.x+radius.x, center.y+radius.y, center.z-radius.z);

	fld	DWORD PTR _center$[ebp+8]
	fsub	DWORD PTR _radius$[ebp+8]
	fstp	DWORD PTR tv471[ebp]
	fld	DWORD PTR tv471[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	fld	DWORD PTR _center$[ebp+4]
	fadd	DWORD PTR _radius$[ebp+4]
	fstp	DWORD PTR tv472[ebp]
	fld	DWORD PTR tv472[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	fld	DWORD PTR _center$[ebp]
	fadd	DWORD PTR _radius$[ebp]
	fstp	DWORD PTR tv473[ebp]
	fld	DWORD PTR tv473[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 148				; 00000094H
	call	?Set@Vector@@QAEXMMM@Z			; Vector::Set

; 98   : 	skyBoxVerts[3].Set(center.x-radius.x, center.y+radius.y, center.z-radius.z);

	fld	DWORD PTR _center$[ebp+8]
	fsub	DWORD PTR _radius$[ebp+8]
	fstp	DWORD PTR tv481[ebp]
	fld	DWORD PTR tv481[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	fld	DWORD PTR _center$[ebp+4]
	fadd	DWORD PTR _radius$[ebp+4]
	fstp	DWORD PTR tv482[ebp]
	fld	DWORD PTR tv482[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	fld	DWORD PTR _center$[ebp]
	fsub	DWORD PTR _radius$[ebp]
	fstp	DWORD PTR tv483[ebp]
	fld	DWORD PTR tv483[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 160				; 000000a0H
	call	?Set@Vector@@QAEXMMM@Z			; Vector::Set

; 99   : 
; 100  : 	// bottom
; 101  : 	skyBoxVerts[4].Set(center.x-radius.x, center.y, center.z+radius.z);

	fld	DWORD PTR _center$[ebp+8]
	fadd	DWORD PTR _radius$[ebp+8]
	fstp	DWORD PTR tv491[ebp]
	fld	DWORD PTR tv491[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _center$[ebp+4]
	fstp	DWORD PTR [esp]
	fld	DWORD PTR _center$[ebp]
	fsub	DWORD PTR _radius$[ebp]
	fstp	DWORD PTR tv492[ebp]
	fld	DWORD PTR tv492[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 172				; 000000acH
	call	?Set@Vector@@QAEXMMM@Z			; Vector::Set

; 102  : 	skyBoxVerts[5].Set(center.x+radius.x, center.y, center.z+radius.z);

	fld	DWORD PTR _center$[ebp+8]
	fadd	DWORD PTR _radius$[ebp+8]
	fstp	DWORD PTR tv500[ebp]
	fld	DWORD PTR tv500[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _center$[ebp+4]
	fstp	DWORD PTR [esp]
	fld	DWORD PTR _center$[ebp]
	fadd	DWORD PTR _radius$[ebp]
	fstp	DWORD PTR tv501[ebp]
	fld	DWORD PTR tv501[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 184				; 000000b8H
	call	?Set@Vector@@QAEXMMM@Z			; Vector::Set

; 103  : 	skyBoxVerts[6].Set(center.x+radius.x, center.y, center.z-radius.z);

	fld	DWORD PTR _center$[ebp+8]
	fsub	DWORD PTR _radius$[ebp+8]
	fstp	DWORD PTR tv509[ebp]
	fld	DWORD PTR tv509[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _center$[ebp+4]
	fstp	DWORD PTR [esp]
	fld	DWORD PTR _center$[ebp]
	fadd	DWORD PTR _radius$[ebp]
	fstp	DWORD PTR tv510[ebp]
	fld	DWORD PTR tv510[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 196				; 000000c4H
	call	?Set@Vector@@QAEXMMM@Z			; Vector::Set

; 104  : 	skyBoxVerts[7].Set(center.x-radius.x, center.y, center.z-radius.z);

	fld	DWORD PTR _center$[ebp+8]
	fsub	DWORD PTR _radius$[ebp+8]
	fstp	DWORD PTR tv518[ebp]
	fld	DWORD PTR tv518[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _center$[ebp+4]
	fstp	DWORD PTR [esp]
	fld	DWORD PTR _center$[ebp]
	fsub	DWORD PTR _radius$[ebp]
	fstp	DWORD PTR tv519[ebp]
	fld	DWORD PTR tv519[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 208				; 000000d0H
	call	?Set@Vector@@QAEXMMM@Z			; Vector::Set

; 105  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@SetParams
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 368				; 00000170H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	1
$LN12@SetParams:
	DD	2
	DD	$LN11@SetParams
$LN11@SetParams:
	DD	-40					; ffffffd8H
	DD	12					; 0000000cH
	DD	$LN8@SetParams
	DD	-60					; ffffffc4H
	DD	12					; 0000000cH
	DD	$LN9@SetParams
$LN9@SetParams:
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	105					; 00000069H
	DB	117					; 00000075H
	DB	115					; 00000073H
	DB	0
$LN8@SetParams:
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?SetParams@Terrain@@QAEXAAVVector@@0M@Z$0:
	mov	eax, DWORD PTR $T33896[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?SetParams@Terrain@@QAEXAAVVector@@0M@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-372]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?SetParams@Terrain@@QAEXAAVVector@@0M@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?SetParams@Terrain@@QAEXAAVVector@@0M@Z ENDP		; Terrain::SetParams
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0VertexData@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0VertexData@@QAE@XZ PROC				; VertexData::VertexData, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Vector@@QAE@XZ			; Vector::Vector
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0VertexData@@QAE@XZ ENDP				; VertexData::VertexData
_TEXT	ENDS
PUBLIC	__real@3ff0000000000000
PUBLIC	?GetPixel@@YAMPAEKKMM@Z				; GetPixel
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?GetPixel@@YAMPAEKKMM@Z
_TEXT	SEGMENT
tv245 = -280						; size = 4
tv192 = -280						; size = 8
tv184 = -280						; size = 8
tv242 = -276						; size = 4
tv237 = -272						; size = 4
tv201 = -272						; size = 8
tv195 = -272						; size = 8
tv190 = -272						; size = 4
tv182 = -272						; size = 4
tv230 = -268						; size = 4
tv187 = -266						; size = 2
tv179 = -266						; size = 2
_retCol$ = -68						; size = 4
_colors$ = -56						; size = 4
_vFrac$ = -44						; size = 4
_uFrac$ = -32						; size = 4
_vInt$ = -20						; size = 4
_uInt$ = -8						; size = 4
_pData$ = 8						; size = 4
_xRes$ = 12						; size = 4
_yRes$ = 16						; size = 4
_s$ = 20						; size = 4
_t$ = 24						; size = 4
?GetPixel@@YAMPAEKKMM@Z PROC				; GetPixel, COMDAT

; 108  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 280				; 00000118H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-280]
	mov	ecx, 70					; 00000046H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 109  : 	dword	uInt, vInt;
; 110  : 	float	uFrac, vFrac;
; 111  : 
; 112  : 	byte	colors[4];
; 113  : 	float	retCol;
; 114  : 
; 115  : 	// find integer coordinates
; 116  : 	uInt = (dword)s;

	fld	DWORD PTR _s$[ebp]
	fnstcw	WORD PTR tv179[ebp]
	movzx	eax, WORD PTR tv179[ebp]
	or	eax, 3072				; 00000c00H
	mov	DWORD PTR tv182[ebp], eax
	fldcw	WORD PTR tv182[ebp]
	fistp	QWORD PTR tv184[ebp]
	fldcw	WORD PTR tv179[ebp]
	mov	eax, DWORD PTR tv184[ebp]
	mov	DWORD PTR _uInt$[ebp], eax

; 117  : 	vInt = (dword)t;

	fld	DWORD PTR _t$[ebp]
	fnstcw	WORD PTR tv187[ebp]
	movzx	eax, WORD PTR tv187[ebp]
	or	eax, 3072				; 00000c00H
	mov	DWORD PTR tv190[ebp], eax
	fldcw	WORD PTR tv190[ebp]
	fistp	QWORD PTR tv192[ebp]
	fldcw	WORD PTR tv187[ebp]
	mov	eax, DWORD PTR tv192[ebp]
	mov	DWORD PTR _vInt$[ebp], eax

; 118  : 
; 119  : 	uFrac = s - uInt;

	mov	eax, DWORD PTR _uInt$[ebp]
	mov	DWORD PTR tv195[ebp], eax
	mov	DWORD PTR tv195[ebp+4], 0
	fild	QWORD PTR tv195[ebp]
	fsubr	DWORD PTR _s$[ebp]
	fstp	DWORD PTR _uFrac$[ebp]

; 120  : 	vFrac = t - vInt;

	mov	eax, DWORD PTR _vInt$[ebp]
	mov	DWORD PTR tv201[ebp], eax
	mov	DWORD PTR tv201[ebp+4], 0
	fild	QWORD PTR tv201[ebp]
	fsubr	DWORD PTR _t$[ebp]
	fstp	DWORD PTR _vFrac$[ebp]

; 121  : 
; 122  : 	// bilinear filtering
; 123  : 	colors[0] = pData[vInt*xRes + uInt];

	mov	eax, DWORD PTR _vInt$[ebp]
	imul	eax, DWORD PTR _xRes$[ebp]
	add	eax, DWORD PTR _uInt$[ebp]
	mov	ecx, DWORD PTR _pData$[ebp]
	mov	dl, BYTE PTR [ecx+eax]
	mov	BYTE PTR _colors$[ebp], dl

; 124  : 	colors[1] = pData[vInt*xRes + ((uInt+1)%xRes)];

	mov	ecx, DWORD PTR _vInt$[ebp]
	imul	ecx, DWORD PTR _xRes$[ebp]
	mov	eax, DWORD PTR _uInt$[ebp]
	add	eax, 1
	xor	edx, edx
	div	DWORD PTR _xRes$[ebp]
	add	edx, DWORD PTR _pData$[ebp]
	mov	dl, BYTE PTR [edx+ecx]
	mov	BYTE PTR _colors$[ebp+1], dl

; 125  : 	colors[2] = pData[((vInt+1)%yRes)*xRes + ((uInt+1)%xRes)];

	mov	eax, DWORD PTR _vInt$[ebp]
	add	eax, 1
	xor	edx, edx
	div	DWORD PTR _yRes$[ebp]
	mov	ecx, edx
	imul	ecx, DWORD PTR _xRes$[ebp]
	mov	eax, DWORD PTR _uInt$[ebp]
	add	eax, 1
	xor	edx, edx
	div	DWORD PTR _xRes$[ebp]
	add	edx, DWORD PTR _pData$[ebp]
	mov	dl, BYTE PTR [edx+ecx]
	mov	BYTE PTR _colors$[ebp+2], dl

; 126  : 	colors[3] = pData[((vInt+1)%yRes)*xRes + uInt];

	mov	eax, DWORD PTR _vInt$[ebp]
	add	eax, 1
	xor	edx, edx
	div	DWORD PTR _yRes$[ebp]
	imul	edx, DWORD PTR _xRes$[ebp]
	add	edx, DWORD PTR _uInt$[ebp]
	mov	eax, DWORD PTR _pData$[ebp]
	mov	cl, BYTE PTR [eax+edx]
	mov	BYTE PTR _colors$[ebp+3], cl

; 127  : 
; 128  : 	retCol =	colors[0] * ((1-uFrac)*(1-vFrac)) +
; 129  : 				colors[1] * (uFrac*(1-vFrac)) +
; 130  : 				colors[2] * (uFrac*vFrac) +
; 131  : 				colors[3] * ((1-uFrac)*vFrac);

	movzx	eax, BYTE PTR _colors$[ebp]
	mov	DWORD PTR tv230[ebp], eax
	fild	DWORD PTR tv230[ebp]
	fld	DWORD PTR _uFrac$[ebp]
	fld1
	fsubrp	ST(1), ST(0)
	fld	DWORD PTR _vFrac$[ebp]
	fld1
	fsubrp	ST(1), ST(0)
	fmulp	ST(1), ST(0)
	fmulp	ST(1), ST(0)
	movzx	ecx, BYTE PTR _colors$[ebp+1]
	mov	DWORD PTR tv237[ebp], ecx
	fild	DWORD PTR tv237[ebp]
	fld	DWORD PTR _vFrac$[ebp]
	fld1
	fsubrp	ST(1), ST(0)
	fmul	DWORD PTR _uFrac$[ebp]
	fmulp	ST(1), ST(0)
	faddp	ST(1), ST(0)
	movzx	edx, BYTE PTR _colors$[ebp+2]
	mov	DWORD PTR tv242[ebp], edx
	fild	DWORD PTR tv242[ebp]
	fld	DWORD PTR _uFrac$[ebp]
	fmul	DWORD PTR _vFrac$[ebp]
	fmulp	ST(1), ST(0)
	faddp	ST(1), ST(0)
	movzx	eax, BYTE PTR _colors$[ebp+3]
	mov	DWORD PTR tv245[ebp], eax
	fild	DWORD PTR tv245[ebp]
	fld	DWORD PTR _uFrac$[ebp]
	fld1
	fsubrp	ST(1), ST(0)
	fmul	DWORD PTR _vFrac$[ebp]
	fmulp	ST(1), ST(0)
	faddp	ST(1), ST(0)
	fstp	DWORD PTR _retCol$[ebp]

; 132  : 
; 133  : 	return retCol;

	fld	DWORD PTR _retCol$[ebp]

; 134  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@GetPixel
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN5@GetPixel:
	DD	1
	DD	$LN4@GetPixel
$LN4@GetPixel:
	DD	-56					; ffffffc8H
	DD	4
	DD	$LN3@GetPixel
$LN3@GetPixel:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	115					; 00000073H
	DB	0
?GetPixel@@YAMPAEKKMM@Z ENDP				; GetPixel
_TEXT	ENDS
PUBLIC	??_GPerlinNoise@@QAEPAXI@Z			; PerlinNoise::`scalar deleting destructor'
PUBLIC	__real@4034000000000000
PUBLIC	__real@42c80000
PUBLIC	__real@4070000000000000
PUBLIC	?GetData@Image@@QAEPAXXZ			; Image::GetData
EXTRN	?Normalize@Vector@@QAE?AV1@XZ:PROC		; Vector::Normalize
EXTRN	??TVector@@QAE?AV0@AAV0@@Z:PROC			; Vector::operator^
EXTRN	??GVector@@QAE?AV0@AAV0@@Z:PROC			; Vector::operator-
EXTRN	__imp__glGetError@0:PROC
EXTRN	?glLockArraysEXT@@3P6GXHH@ZA:DWORD		; glLockArraysEXT
EXTRN	__imp__glTexCoordPointer@16:PROC
EXTRN	?glClientActiveTextureARB@@3P6GXI@ZA:DWORD	; glClientActiveTextureARB
EXTRN	__imp__glColorPointer@16:PROC
EXTRN	__imp__glEnableClientState@4:PROC
EXTRN	__imp__glVertexPointer@16:PROC
EXTRN	?noise@PerlinNoise@@QAEMMMM@Z:PROC		; PerlinNoise::noise
EXTRN	??0PerlinNoise@@QAE@XZ:PROC			; PerlinNoise::PerlinNoise
;	COMDAT __real@4034000000000000
CONST	SEGMENT
__real@4034000000000000 DQ 04034000000000000r	; 20
CONST	ENDS
;	COMDAT __real@42c80000
CONST	SEGMENT
__real@42c80000 DD 042c80000r			; 100
CONST	ENDS
;	COMDAT __real@4070000000000000
CONST	SEGMENT
__real@4070000000000000 DQ 04070000000000000r	; 256
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?BuildTerrain@Terrain@@AAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?BuildTerrain@Terrain@@AAEXXZ$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?BuildTerrain@Terrain@@AAEXXZ$1
__ehfuncinfo$?BuildTerrain@Terrain@@AAEXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?BuildTerrain@Terrain@@AAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ?BuildTerrain@Terrain@@AAEXXZ
_TEXT	SEGMENT
tv678 = -688						; size = 4
tv652 = -688						; size = 4
tv675 = -684						; size = 4
tv649 = -684						; size = 4
tv636 = -684						; size = 4
tv626 = -684						; size = 8
tv619 = -684						; size = 8
tv610 = -684						; size = 8
tv603 = -684						; size = 8
tv589 = -684						; size = 8
tv581 = -684						; size = 8
tv674 = -680						; size = 4
tv648 = -680						; size = 4
tv634 = -680						; size = 4
tv357 = -680						; size = 4
tv95 = -680						; size = 4
$T33928 = -672						; size = 4
$T33929 = -660						; size = 4
$T33932 = -648						; size = 4
$T33933 = -636						; size = 4
$T33934 = -624						; size = 4
$T33935 = -612						; size = 4
$T33938 = -600						; size = 12
$T33939 = -580						; size = 12
$T33940 = -560						; size = 12
$T33941 = -540						; size = 12
$T33942 = -520						; size = 12
$T33943 = -500						; size = 12
$T33944 = -480						; size = 12
$T33945 = -460						; size = 12
_x$33511 = -248						; size = 4
_i$ = -236						; size = 4
_blet$ = -224						; size = 4
_pixelHeight$33486 = -212				; size = 4
_pNoise$ = -200						; size = 4
_k$ = -188						; size = 4
_t$ = -176						; size = 4
_pHeightMap$ = -164					; size = 4
_rDensY$ = -152						; size = 4
_rDensX$ = -140						; size = 4
_tCoord$ = -128						; size = 4
_sCoord$ = -116						; size = 4
_stepY$ = -104						; size = 4
_stepX$ = -92						; size = 4
_y$ = -80						; size = 4
_x$ = -68						; size = 4
_yScale$ = -56						; size = 4
_deltaY$ = -44						; size = 4
_minY$ = -32						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
?BuildTerrain@Terrain@@AAEXXZ PROC			; Terrain::BuildTerrain, COMDAT
; _this$ = ecx

; 138  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?BuildTerrain@Terrain@@AAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 676				; 000002a4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-688]
	mov	ecx, 169				; 000000a9H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 139  : 	float		 minY, deltaY, yScale;
; 140  : 	dword		 x, y;
; 141  : 	float		 stepX, stepY;
; 142  : 	float		 sCoord, tCoord;
; 143  : 	float		 rDensX, rDensY;
; 144  : 	byte *pHeightMap;
; 145  : 	//if ((imgHeightMap.GetBPP() == 8) || (imgHeightMap.GetBPP() == 24))
; 146  : 		pHeightMap = (byte*)imgHeightMap.GetData();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	?GetData@Image@@QAEPAXXZ		; Image::GetData
	mov	DWORD PTR _pHeightMap$[ebp], eax

; 147  : 
; 148  : 	minY = origin.y;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+60]
	fstp	DWORD PTR _minY$[ebp]

; 149  : 	deltaY = dimen.y - minY;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+72]
	fsub	DWORD PTR _minY$[ebp]
	fstp	DWORD PTR _deltaY$[ebp]

; 150  : 	yScale = deltaY / 256;

	fld	DWORD PTR _deltaY$[ebp]
	fdiv	QWORD PTR __real@4070000000000000
	fstp	DWORD PTR _yScale$[ebp]

; 151  : 
; 152  : 	rDensX = 1.f / vertXRes;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+80]
	mov	DWORD PTR tv581[ebp], ecx
	mov	DWORD PTR tv581[ebp+4], 0
	fild	QWORD PTR tv581[ebp]
	fld1
	fdivrp	ST(1), ST(0)
	fstp	DWORD PTR _rDensX$[ebp]

; 153  : 	rDensY = 1.f / vertYRes;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	DWORD PTR tv589[ebp], ecx
	mov	DWORD PTR tv589[ebp+4], 0
	fild	QWORD PTR tv589[ebp]
	fld1
	fdivrp	ST(1), ST(0)
	fstp	DWORD PTR _rDensY$[ebp]

; 154  : 
; 155  : 	float t;
; 156  : 
; 157  : 	unsigned k = 0;

	mov	DWORD PTR _k$[ebp], 0

; 158  : 	PerlinNoise *pNoise = new PerlinNoise();

	push	2304					; 00000900H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T33929[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T33929[ebp], 0
	je	SHORT $LN17@BuildTerra
	mov	ecx, DWORD PTR $T33929[ebp]
	call	??0PerlinNoise@@QAE@XZ			; PerlinNoise::PerlinNoise
	mov	DWORD PTR tv95[ebp], eax
	jmp	SHORT $LN18@BuildTerra
$LN17@BuildTerra:
	mov	DWORD PTR tv95[ebp], 0
$LN18@BuildTerra:
	mov	eax, DWORD PTR tv95[ebp]
	mov	DWORD PTR $T33928[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T33928[ebp]
	mov	DWORD PTR _pNoise$[ebp], ecx

; 159  : 
; 160  : 	for (y=0; y<vertYRes; y++)

	mov	DWORD PTR _y$[ebp], 0
	jmp	SHORT $LN14@BuildTerra
$LN13@BuildTerra:
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 1
	mov	DWORD PTR _y$[ebp], eax
$LN14@BuildTerra:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _y$[ebp]
	cmp	ecx, DWORD PTR [eax+84]
	jae	$LN12@BuildTerra

; 161  : 	{
; 162  : 		stepY = (float)y*rDensX;

	mov	eax, DWORD PTR _y$[ebp]
	mov	DWORD PTR tv603[ebp], eax
	mov	DWORD PTR tv603[ebp+4], 0
	fild	QWORD PTR tv603[ebp]
	fmul	DWORD PTR _rDensX$[ebp]
	fstp	DWORD PTR _stepY$[ebp]

; 163  : 
; 164  : 		tCoord = stepY*mapYRes;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	mov	DWORD PTR tv610[ebp], ecx
	mov	DWORD PTR tv610[ebp+4], 0
	fild	QWORD PTR tv610[ebp]
	fmul	DWORD PTR _stepY$[ebp]
	fstp	DWORD PTR _tCoord$[ebp]

; 165  : 
; 166  : 		for (x=0; x<vertXRes; x++)

	mov	DWORD PTR _x$[ebp], 0
	jmp	SHORT $LN11@BuildTerra
$LN10@BuildTerra:
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	mov	DWORD PTR _x$[ebp], eax
$LN11@BuildTerra:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _x$[ebp]
	cmp	ecx, DWORD PTR [eax+80]
	jae	$LN9@BuildTerra

; 167  : 		{
; 168  : 			stepX = (float)x*rDensY;

	mov	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR tv619[ebp], eax
	mov	DWORD PTR tv619[ebp+4], 0
	fild	QWORD PTR tv619[ebp]
	fmul	DWORD PTR _rDensY$[ebp]
	fstp	DWORD PTR _stepX$[ebp]

; 169  : 
; 170  : 			sCoord = stepX*mapXRes;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	DWORD PTR tv626[ebp], ecx
	mov	DWORD PTR tv626[ebp+4], 0
	fild	QWORD PTR tv626[ebp]
	fmul	DWORD PTR _stepX$[ebp]
	fstp	DWORD PTR _sCoord$[ebp]

; 171  : 
; 172  : 			float	pixelHeight;
; 173  : 
; 174  : 			if (RandGen)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+104]
	test	ecx, ecx
	je	$LN8@BuildTerra

; 175  : 			{
; 176  : 				yScale = 100.0f;

	fld	DWORD PTR __real@42c80000
	fstp	DWORD PTR _yScale$[ebp]

; 177  : 				t = pNoise->noise(stepX*dimen.x, stepY*dimen.z, rand_seed);

	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	fld	DWORD PTR [eax+100]
	fstp	DWORD PTR [esp]
	fld	DWORD PTR _stepY$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx+76]
	fstp	DWORD PTR tv634[ebp]
	fld	DWORD PTR tv634[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	fld	DWORD PTR _stepX$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [edx+68]
	fstp	DWORD PTR tv636[ebp]
	fld	DWORD PTR tv636[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _pNoise$[ebp]
	call	?noise@PerlinNoise@@QAEMMMM@Z		; PerlinNoise::noise
	fstp	DWORD PTR _t$[ebp]

; 178  : 				pVertexData[k].pos.Set(origin.x+stepX*dimen.x, 
; 179  : 									   minY + t*yScale, 
; 180  : 									   origin.z+stepY*dimen.z);		

	fld	DWORD PTR _stepY$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+76]
	mov	ecx, DWORD PTR _this$[ebp]
	fadd	DWORD PTR [ecx+64]
	fstp	DWORD PTR tv648[ebp]
	fld	DWORD PTR tv648[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	fld	DWORD PTR _t$[ebp]
	fmul	DWORD PTR _yScale$[ebp]
	fadd	DWORD PTR _minY$[ebp]
	fstp	DWORD PTR tv649[ebp]
	fld	DWORD PTR tv649[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	fld	DWORD PTR _stepX$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [edx+68]
	mov	eax, DWORD PTR _this$[ebp]
	fadd	DWORD PTR [eax+56]
	fstp	DWORD PTR tv652[ebp]
	fld	DWORD PTR tv652[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _k$[ebp]
	shl	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+108]
	call	?Set@Vector@@QAEXMMM@Z			; Vector::Set

; 181  : 			}
; 182  : 			else

	jmp	$LN7@BuildTerra
$LN8@BuildTerra:

; 183  : 			{
; 184  : 				pixelHeight = GetPixel(pHeightMap, mapXRes, mapYRes, sCoord, tCoord);

	push	ecx
	fld	DWORD PTR _tCoord$[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _sCoord$[ebp]
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+48]
	push	eax
	mov	ecx, DWORD PTR _pHeightMap$[ebp]
	push	ecx
	call	?GetPixel@@YAMPAEKKMM@Z			; GetPixel
	add	esp, 20					; 00000014H
	fstp	DWORD PTR _pixelHeight$33486[ebp]

; 185  : 	//			if (pixelHeight/HeightDim < waterHeight) {
; 186  : 	//				pixelHeight = waterHeight*HeightDim - 2;
; 187  : 	//			}
; 188  : 				pVertexData[k].pos.Set(origin.x+stepX*dimen.x, minY + pixelHeight*yScale, origin.z+stepY*dimen.z );

	fld	DWORD PTR _stepY$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+76]
	mov	ecx, DWORD PTR _this$[ebp]
	fadd	DWORD PTR [ecx+64]
	fstp	DWORD PTR tv674[ebp]
	fld	DWORD PTR tv674[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	fld	DWORD PTR _pixelHeight$33486[ebp]
	fmul	DWORD PTR _yScale$[ebp]
	fadd	DWORD PTR _minY$[ebp]
	fstp	DWORD PTR tv675[ebp]
	fld	DWORD PTR tv675[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	fld	DWORD PTR _stepX$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [edx+68]
	mov	eax, DWORD PTR _this$[ebp]
	fadd	DWORD PTR [eax+56]
	fstp	DWORD PTR tv678[ebp]
	fld	DWORD PTR tv678[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _k$[ebp]
	shl	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+108]
	call	?Set@Vector@@QAEXMMM@Z			; Vector::Set
$LN7@BuildTerra:

; 189  : 			}
; 190  : 
; 191  : 
; 192  : 			pVertexData[k].s = stepX;

	mov	eax, DWORD PTR _k$[ebp]
	shl	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+108]
	fld	DWORD PTR _stepX$[ebp]
	fstp	DWORD PTR [edx+eax+16]

; 193  : 			pVertexData[k].t = stepY;

	mov	eax, DWORD PTR _k$[ebp]
	shl	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+108]
	fld	DWORD PTR _stepY$[ebp]
	fstp	DWORD PTR [edx+eax+20]

; 194  : 			pVertexData[k].u = stepX*20.f;

	fld	DWORD PTR _stepX$[ebp]
	fmul	QWORD PTR __real@4034000000000000
	mov	eax, DWORD PTR _k$[ebp]
	shl	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+108]
	fstp	DWORD PTR [edx+eax+24]

; 195  : 			pVertexData[k].v = stepY*20.f;

	fld	DWORD PTR _stepY$[ebp]
	fmul	QWORD PTR __real@4034000000000000
	mov	eax, DWORD PTR _k$[ebp]
	shl	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+108]
	fstp	DWORD PTR [edx+eax+28]

; 196  : 
; 197  : 			/*pVertexData[k].col[0] = 1.f;
; 198  : 			pVertexData[k].col[1] = 1.f;
; 199  : 			pVertexData[k].col[2] = 1.f;
; 200  : 			pVertexData[k].col[3] = 1.f;*/
; 201  : 
; 202  : 			k++;

	mov	eax, DWORD PTR _k$[ebp]
	add	eax, 1
	mov	DWORD PTR _k$[ebp], eax

; 203  : 		}

	jmp	$LN10@BuildTerra
$LN9@BuildTerra:

; 204  : 	}

	jmp	$LN13@BuildTerra
$LN12@BuildTerra:

; 205  : 
; 206  : 	pNoise->~PerlinNoise();

	push	0
	mov	ecx, DWORD PTR _pNoise$[ebp]
	call	??_GPerlinNoise@@QAEPAXI@Z

; 207  : 	imgHeightMap.Free();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+20]
	mov	esi, esp
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 208  : 
; 209  : 
; 210  : 	// vertices
; 211  : 	glVertexPointer(3, GL_FLOAT, sizeof(VertexData), pVertexData);

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	push	ecx
	push	32					; 00000020H
	push	5126					; 00001406H
	push	3
	call	DWORD PTR __imp__glVertexPointer@16
	cmp	esi, esp
	call	__RTC_CheckEsp

; 212  : 	glEnableClientState(GL_VERTEX_ARRAY);

	mov	esi, esp
	push	32884					; 00008074H
	call	DWORD PTR __imp__glEnableClientState@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 213  : 
; 214  : 	// color
; 215  : 	glColorPointer(4, GL_UNSIGNED_BYTE, sizeof(VertexData), (float*)pVertexData+3);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	add	ecx, 12					; 0000000cH
	mov	esi, esp
	push	ecx
	push	32					; 00000020H
	push	5121					; 00001401H
	push	4
	call	DWORD PTR __imp__glColorPointer@16
	cmp	esi, esp
	call	__RTC_CheckEsp

; 216  : 	glEnableClientState(GL_COLOR_ARRAY);

	mov	esi, esp
	push	32886					; 00008076H
	call	DWORD PTR __imp__glEnableClientState@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 217  : 
; 218  : 	// 1'st texture coordinates
; 219  : 	glClientActiveTextureARB(GL_TEXTURE0_ARB); 

	mov	esi, esp
	push	33984					; 000084c0H
	call	DWORD PTR ?glClientActiveTextureARB@@3P6GXI@ZA ; glClientActiveTextureARB
	cmp	esi, esp
	call	__RTC_CheckEsp

; 220  : 	glTexCoordPointer(2, GL_FLOAT, sizeof(VertexData), (float*)pVertexData+4);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	add	ecx, 16					; 00000010H
	mov	esi, esp
	push	ecx
	push	32					; 00000020H
	push	5126					; 00001406H
	push	2
	call	DWORD PTR __imp__glTexCoordPointer@16
	cmp	esi, esp
	call	__RTC_CheckEsp

; 221  : 	glEnableClientState(GL_TEXTURE_COORD_ARRAY);

	mov	esi, esp
	push	32888					; 00008078H
	call	DWORD PTR __imp__glEnableClientState@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 222  : 	
; 223  : 	// 2'nd texture coordinates
; 224  : 	glClientActiveTextureARB(GL_TEXTURE1_ARB); 

	mov	esi, esp
	push	33985					; 000084c1H
	call	DWORD PTR ?glClientActiveTextureARB@@3P6GXI@ZA ; glClientActiveTextureARB
	cmp	esi, esp
	call	__RTC_CheckEsp

; 225  : 	glTexCoordPointer(2, GL_FLOAT, sizeof(VertexData), (float*)pVertexData+6);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	add	ecx, 24					; 00000018H
	mov	esi, esp
	push	ecx
	push	32					; 00000020H
	push	5126					; 00001406H
	push	2
	call	DWORD PTR __imp__glTexCoordPointer@16
	cmp	esi, esp
	call	__RTC_CheckEsp

; 226  : 	glEnableClientState(GL_TEXTURE_COORD_ARRAY);

	mov	esi, esp
	push	32888					; 00008078H
	call	DWORD PTR __imp__glEnableClientState@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 227  : 
; 228  : 	// 3'nd texture coordinates
; 229  : 	glClientActiveTextureARB(GL_TEXTURE2_ARB); 

	mov	esi, esp
	push	33986					; 000084c2H
	call	DWORD PTR ?glClientActiveTextureARB@@3P6GXI@ZA ; glClientActiveTextureARB
	cmp	esi, esp
	call	__RTC_CheckEsp

; 230  : 	glTexCoordPointer(2, GL_FLOAT, sizeof(VertexData), (float*)pVertexData+4);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	add	ecx, 16					; 00000010H
	mov	esi, esp
	push	ecx
	push	32					; 00000020H
	push	5126					; 00001406H
	push	2
	call	DWORD PTR __imp__glTexCoordPointer@16
	cmp	esi, esp
	call	__RTC_CheckEsp

; 231  : 	glEnableClientState(GL_TEXTURE_COORD_ARRAY);	

	mov	esi, esp
	push	32888					; 00008078H
	call	DWORD PTR __imp__glEnableClientState@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 232  : 
; 233  : 	glClientActiveTextureARB(GL_TEXTURE0_ARB); 

	mov	esi, esp
	push	33984					; 000084c0H
	call	DWORD PTR ?glClientActiveTextureARB@@3P6GXI@ZA ; glClientActiveTextureARB
	cmp	esi, esp
	call	__RTC_CheckEsp

; 234  : 
; 235  : 	glLockArraysEXT(0, vertXRes*vertYRes);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+80]
	imul	edx, DWORD PTR [ecx+84]
	mov	esi, esp
	push	edx
	push	0
	call	DWORD PTR ?glLockArraysEXT@@3P6GXHH@ZA	; glLockArraysEXT
	cmp	esi, esp
	call	__RTC_CheckEsp

; 236  : 	GLenum blet;
; 237  : 	blet = glGetError();

	mov	esi, esp
	call	DWORD PTR __imp__glGetError@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _blet$[ebp], eax

; 238  : 
; 239  : 	// generate an index-array
; 240  : 	pIndexArray = new word[vertYRes*vertXRes*2];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+84]
	imul	eax, DWORD PTR [ecx+80]
	shl	eax, 1
	xor	ecx, ecx
	mov	edx, 2
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T33932[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T33932[ebp]
	mov	DWORD PTR [eax+116], ecx

; 241  : 	pNormals = new Vector[(vertYRes-1)*(vertXRes-1)*2];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	sub	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+80]
	sub	eax, 1
	imul	ecx, eax
	shl	ecx, 1
	mov	DWORD PTR $T33933[ebp], ecx
	xor	ecx, ecx
	mov	eax, DWORD PTR $T33933[ebp]
	mov	edx, 12					; 0000000cH
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T33935[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T33935[ebp], 0
	je	SHORT $LN19@BuildTerra
	push	OFFSET ??0Vector@@QAE@XZ		; Vector::Vector
	mov	eax, DWORD PTR $T33933[ebp]
	push	eax
	push	12					; 0000000cH
	mov	ecx, DWORD PTR $T33935[ebp]
	push	ecx
	call	??_H@YGXPAXIHP6EPAX0@Z@Z
	mov	edx, DWORD PTR $T33935[ebp]
	mov	DWORD PTR tv357[ebp], edx
	jmp	SHORT $LN20@BuildTerra
$LN19@BuildTerra:
	mov	DWORD PTR tv357[ebp], 0
$LN20@BuildTerra:
	mov	eax, DWORD PTR tv357[ebp]
	mov	DWORD PTR $T33934[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T33934[ebp]
	mov	DWORD PTR [ecx+120], edx

; 242  : 	k = 0;

	mov	DWORD PTR _k$[ebp], 0

; 243  : 	int i = 0;

	mov	DWORD PTR _i$[ebp], 0

; 244  : 	for (y=0; y < vertYRes-1; y++)

	mov	DWORD PTR _y$[ebp], 0
	jmp	SHORT $LN6@BuildTerra
$LN5@BuildTerra:
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 1
	mov	DWORD PTR _y$[ebp], eax
$LN6@BuildTerra:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	sub	ecx, 1
	cmp	DWORD PTR _y$[ebp], ecx
	jae	$LN4@BuildTerra

; 245  : 	{
; 246  : 		pIndexArray[k] = y * vertXRes;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _y$[ebp]
	imul	ecx, DWORD PTR [eax+80]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+116]
	mov	edx, DWORD PTR _k$[ebp]
	mov	WORD PTR [eax+edx*2], cx

; 247  : 		k++;

	mov	eax, DWORD PTR _k$[ebp]
	add	eax, 1
	mov	DWORD PTR _k$[ebp], eax

; 248  : 		pIndexArray[k] = (y+1) * vertXRes;

	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	imul	eax, DWORD PTR [ecx+80]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+116]
	mov	edx, DWORD PTR _k$[ebp]
	mov	WORD PTR [ecx+edx*2], ax

; 249  : 		k++;

	mov	eax, DWORD PTR _k$[ebp]
	add	eax, 1
	mov	DWORD PTR _k$[ebp], eax

; 250  : 		for (dword x = 1; x < vertXRes; x++)

	mov	DWORD PTR _x$33511[ebp], 1
	jmp	SHORT $LN3@BuildTerra
$LN2@BuildTerra:
	mov	eax, DWORD PTR _x$33511[ebp]
	add	eax, 1
	mov	DWORD PTR _x$33511[ebp], eax
$LN3@BuildTerra:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _x$33511[ebp]
	cmp	ecx, DWORD PTR [eax+80]
	jae	$LN1@BuildTerra

; 251  : 		{
; 252  : 			pIndexArray[k] = y * vertXRes + x;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _y$[ebp]
	imul	ecx, DWORD PTR [eax+80]
	add	ecx, DWORD PTR _x$33511[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+116]
	mov	edx, DWORD PTR _k$[ebp]
	mov	WORD PTR [eax+edx*2], cx

; 253  : 			k++;

	mov	eax, DWORD PTR _k$[ebp]
	add	eax, 1
	mov	DWORD PTR _k$[ebp], eax

; 254  : 			pIndexArray[k] = (y+1) * vertXRes + x;

	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	imul	eax, DWORD PTR [ecx+80]
	add	eax, DWORD PTR _x$33511[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+116]
	mov	edx, DWORD PTR _k$[ebp]
	mov	WORD PTR [ecx+edx*2], ax

; 255  : 			k++;

	mov	eax, DWORD PTR _k$[ebp]
	add	eax, 1
	mov	DWORD PTR _k$[ebp], eax

; 256  : 
; 257  : 			pNormals[i] =   ((pVertexData[pIndexArray[k-3]].pos - pVertexData[pIndexArray[k-4]].pos) ^ 
; 258  : 						     (pVertexData[pIndexArray[k-2]].pos - pVertexData[pIndexArray[k-4]].pos)).Normalize();

	lea	eax, DWORD PTR $T33941[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+116]
	mov	eax, DWORD PTR _k$[ebp]
	movzx	ecx, WORD PTR [edx+eax*2-8]
	shl	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+108]
	push	ecx
	lea	eax, DWORD PTR $T33939[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+116]
	mov	eax, DWORD PTR _k$[ebp]
	movzx	ecx, WORD PTR [edx+eax*2-4]
	shl	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+108]
	call	??GVector@@QAE?AV0@AAV0@@Z		; Vector::operator-
	push	eax
	lea	eax, DWORD PTR $T33940[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+116]
	mov	eax, DWORD PTR _k$[ebp]
	movzx	ecx, WORD PTR [edx+eax*2-8]
	shl	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+108]
	push	ecx
	lea	eax, DWORD PTR $T33938[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+116]
	mov	eax, DWORD PTR _k$[ebp]
	movzx	ecx, WORD PTR [edx+eax*2-6]
	shl	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+108]
	call	??GVector@@QAE?AV0@AAV0@@Z		; Vector::operator-
	mov	ecx, eax
	call	??TVector@@QAE?AV0@AAV0@@Z		; Vector::operator^
	mov	ecx, eax
	call	?Normalize@Vector@@QAE?AV1@XZ		; Vector::Normalize
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx+120]
	add	edx, ecx
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], eax

; 259  : 			//i++;
; 260  : 			
; 261  : 			pNormals[i+1] =  ((pVertexData[pIndexArray[k-2]].pos - pVertexData[pIndexArray[k-1]].pos) ^ 
; 262  : 						     (pVertexData[pIndexArray[k-3]].pos - pVertexData[pIndexArray[k-1]].pos)).Normalize();

	lea	eax, DWORD PTR $T33945[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+116]
	mov	eax, DWORD PTR _k$[ebp]
	movzx	ecx, WORD PTR [edx+eax*2-2]
	shl	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+108]
	push	ecx
	lea	eax, DWORD PTR $T33943[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+116]
	mov	eax, DWORD PTR _k$[ebp]
	movzx	ecx, WORD PTR [edx+eax*2-6]
	shl	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+108]
	call	??GVector@@QAE?AV0@AAV0@@Z		; Vector::operator-
	push	eax
	lea	eax, DWORD PTR $T33944[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+116]
	mov	eax, DWORD PTR _k$[ebp]
	movzx	ecx, WORD PTR [edx+eax*2-2]
	shl	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+108]
	push	ecx
	lea	eax, DWORD PTR $T33942[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+116]
	mov	eax, DWORD PTR _k$[ebp]
	movzx	ecx, WORD PTR [edx+eax*2-4]
	shl	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+108]
	call	??GVector@@QAE?AV0@AAV0@@Z		; Vector::operator-
	mov	ecx, eax
	call	??TVector@@QAE?AV0@AAV0@@Z		; Vector::operator^
	mov	ecx, eax
	call	?Normalize@Vector@@QAE?AV1@XZ		; Vector::Normalize
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	imul	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx+120]
	add	edx, ecx
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], eax

; 263  : 			//i++;
; 264  : 			i += 2;

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 2
	mov	DWORD PTR _i$[ebp], eax

; 265  : 		}

	jmp	$LN2@BuildTerra
$LN1@BuildTerra:

; 266  : 	}

	jmp	$LN5@BuildTerra
$LN4@BuildTerra:

; 267  : 
; 268  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 688				; 000002b0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?BuildTerrain@Terrain@@AAEXXZ$0:
	mov	eax, DWORD PTR $T33929[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?BuildTerrain@Terrain@@AAEXXZ$1:
	mov	eax, DWORD PTR $T33935[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?BuildTerrain@Terrain@@AAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-692]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?BuildTerrain@Terrain@@AAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?BuildTerrain@Terrain@@AAEXXZ ENDP			; Terrain::BuildTerrain
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\user\desktop\computergraphicsproject\viewer\image.h
;	COMDAT ?GetData@Image@@QAEPAXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetData@Image@@QAEPAXXZ PROC				; Image::GetData, COMDAT
; _this$ = ecx

; 49   :   void*   GetData()   {return m_pData;}   // Get a pointer to the pixel data.

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+24]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetData@Image@@QAEPAXXZ ENDP				; Image::GetData
_TEXT	ENDS
EXTRN	??1PerlinNoise@@QAE@XZ:PROC			; PerlinNoise::~PerlinNoise
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GPerlinNoise@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_GPerlinNoise@@QAEPAXI@Z PROC				; PerlinNoise::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1PerlinNoise@@QAE@XZ			; PerlinNoise::~PerlinNoise
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GPerlinNoise@@QAEPAXI@Z ENDP				; PerlinNoise::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?SetWaterHeight@Terrain@@QAEXM@Z		; Terrain::SetWaterHeight
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\user\desktop\computergraphicsproject\viewer\terrain.cpp
;	COMDAT ?SetWaterHeight@Terrain@@QAEXM@Z
_TEXT	SEGMENT
tv320 = -308						; size = 4
tv310 = -308						; size = 4
tv300 = -308						; size = 4
tv290 = -308						; size = 4
tv356 = -304						; size = 4
tv347 = -304						; size = 4
tv338 = -304						; size = 4
tv329 = -304						; size = 4
tv319 = -304						; size = 4
tv309 = -304						; size = 4
tv299 = -304						; size = 4
tv289 = -304						; size = 4
tv355 = -300						; size = 4
tv346 = -300						; size = 4
tv337 = -300						; size = 4
tv328 = -300						; size = 4
tv318 = -300						; size = 4
tv308 = -300						; size = 4
tv298 = -300						; size = 4
tv288 = -300						; size = 4
$T33966 = -292						; size = 12
$T33967 = -272						; size = 12
_rad$ = -60						; size = 4
_radius$ = -48						; size = 12
_center$ = -28						; size = 12
_this$ = -8						; size = 4
_NewHeight$ = 8						; size = 4
?SetWaterHeight@Terrain@@QAEXM@Z PROC			; Terrain::SetWaterHeight, COMDAT
; _this$ = ecx

; 271  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 308				; 00000134H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-308]
	mov	ecx, 77					; 0000004dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 272  : 	this->waterHeight = NewHeight;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _NewHeight$[ebp]
	fstp	DWORD PTR [eax+16]

; 273  : 
; 274  : 	Vector	center, radius;

	lea	ecx, DWORD PTR _center$[ebp]
	call	??0Vector@@QAE@XZ			; Vector::Vector
	lea	ecx, DWORD PTR _radius$[ebp]
	call	??0Vector@@QAE@XZ			; Vector::Vector

; 275  : 	const float rad = dimen.x*12;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+68]
	fmul	QWORD PTR __real@4028000000000000
	fstp	DWORD PTR _rad$[ebp]

; 276  : 
; 277  : 	center = origin + (dimen * 0.5f);

	push	ecx
	fld	DWORD PTR __real@3f000000
	fstp	DWORD PTR [esp]
	lea	eax, DWORD PTR $T33966[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 68					; 00000044H
	call	??DVector@@QAE?AV0@M@Z			; Vector::operator*
	push	eax
	lea	ecx, DWORD PTR $T33967[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	call	??HVector@@QAE?AV0@AAV0@@Z		; Vector::operator+
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR _center$[ebp], edx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _center$[ebp+4], ecx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR _center$[ebp+8], edx

; 278  : 	center.y = origin.y+dimen.y*this->waterHeight;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+72]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx+16]
	mov	edx, DWORD PTR _this$[ebp]
	fadd	DWORD PTR [edx+60]
	fstp	DWORD PTR _center$[ebp+4]

; 279  : 	radius.Set(rad, rad, rad);

	push	ecx
	fld	DWORD PTR _rad$[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _rad$[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _rad$[ebp]
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR _radius$[ebp]
	call	?Set@Vector@@QAEXMMM@Z			; Vector::Set

; 280  : 
; 281  : 	skyBoxVerts[0].Set(center.x-radius.x, center.y+radius.y, center.z+radius.z);

	fld	DWORD PTR _center$[ebp+8]
	fadd	DWORD PTR _radius$[ebp+8]
	fstp	DWORD PTR tv288[ebp]
	fld	DWORD PTR tv288[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	fld	DWORD PTR _center$[ebp+4]
	fadd	DWORD PTR _radius$[ebp+4]
	fstp	DWORD PTR tv289[ebp]
	fld	DWORD PTR tv289[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	fld	DWORD PTR _center$[ebp]
	fsub	DWORD PTR _radius$[ebp]
	fstp	DWORD PTR tv290[ebp]
	fld	DWORD PTR tv290[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 124				; 0000007cH
	call	?Set@Vector@@QAEXMMM@Z			; Vector::Set

; 282  : 	skyBoxVerts[1].Set(center.x+radius.x, center.y+radius.y, center.z+radius.z);

	fld	DWORD PTR _center$[ebp+8]
	fadd	DWORD PTR _radius$[ebp+8]
	fstp	DWORD PTR tv298[ebp]
	fld	DWORD PTR tv298[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	fld	DWORD PTR _center$[ebp+4]
	fadd	DWORD PTR _radius$[ebp+4]
	fstp	DWORD PTR tv299[ebp]
	fld	DWORD PTR tv299[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	fld	DWORD PTR _center$[ebp]
	fadd	DWORD PTR _radius$[ebp]
	fstp	DWORD PTR tv300[ebp]
	fld	DWORD PTR tv300[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 136				; 00000088H
	call	?Set@Vector@@QAEXMMM@Z			; Vector::Set

; 283  : 	skyBoxVerts[2].Set(center.x+radius.x, center.y+radius.y, center.z-radius.z);

	fld	DWORD PTR _center$[ebp+8]
	fsub	DWORD PTR _radius$[ebp+8]
	fstp	DWORD PTR tv308[ebp]
	fld	DWORD PTR tv308[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	fld	DWORD PTR _center$[ebp+4]
	fadd	DWORD PTR _radius$[ebp+4]
	fstp	DWORD PTR tv309[ebp]
	fld	DWORD PTR tv309[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	fld	DWORD PTR _center$[ebp]
	fadd	DWORD PTR _radius$[ebp]
	fstp	DWORD PTR tv310[ebp]
	fld	DWORD PTR tv310[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 148				; 00000094H
	call	?Set@Vector@@QAEXMMM@Z			; Vector::Set

; 284  : 	skyBoxVerts[3].Set(center.x-radius.x, center.y+radius.y, center.z-radius.z);

	fld	DWORD PTR _center$[ebp+8]
	fsub	DWORD PTR _radius$[ebp+8]
	fstp	DWORD PTR tv318[ebp]
	fld	DWORD PTR tv318[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	fld	DWORD PTR _center$[ebp+4]
	fadd	DWORD PTR _radius$[ebp+4]
	fstp	DWORD PTR tv319[ebp]
	fld	DWORD PTR tv319[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	fld	DWORD PTR _center$[ebp]
	fsub	DWORD PTR _radius$[ebp]
	fstp	DWORD PTR tv320[ebp]
	fld	DWORD PTR tv320[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 160				; 000000a0H
	call	?Set@Vector@@QAEXMMM@Z			; Vector::Set

; 285  : 
; 286  : 	skyBoxVerts[4].Set(center.x-radius.x, center.y, center.z+radius.z);

	fld	DWORD PTR _center$[ebp+8]
	fadd	DWORD PTR _radius$[ebp+8]
	fstp	DWORD PTR tv328[ebp]
	fld	DWORD PTR tv328[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _center$[ebp+4]
	fstp	DWORD PTR [esp]
	fld	DWORD PTR _center$[ebp]
	fsub	DWORD PTR _radius$[ebp]
	fstp	DWORD PTR tv329[ebp]
	fld	DWORD PTR tv329[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 172				; 000000acH
	call	?Set@Vector@@QAEXMMM@Z			; Vector::Set

; 287  : 	skyBoxVerts[5].Set(center.x+radius.x, center.y, center.z+radius.z);

	fld	DWORD PTR _center$[ebp+8]
	fadd	DWORD PTR _radius$[ebp+8]
	fstp	DWORD PTR tv337[ebp]
	fld	DWORD PTR tv337[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _center$[ebp+4]
	fstp	DWORD PTR [esp]
	fld	DWORD PTR _center$[ebp]
	fadd	DWORD PTR _radius$[ebp]
	fstp	DWORD PTR tv338[ebp]
	fld	DWORD PTR tv338[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 184				; 000000b8H
	call	?Set@Vector@@QAEXMMM@Z			; Vector::Set

; 288  : 	skyBoxVerts[6].Set(center.x+radius.x, center.y, center.z-radius.z);

	fld	DWORD PTR _center$[ebp+8]
	fsub	DWORD PTR _radius$[ebp+8]
	fstp	DWORD PTR tv346[ebp]
	fld	DWORD PTR tv346[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _center$[ebp+4]
	fstp	DWORD PTR [esp]
	fld	DWORD PTR _center$[ebp]
	fadd	DWORD PTR _radius$[ebp]
	fstp	DWORD PTR tv347[ebp]
	fld	DWORD PTR tv347[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 196				; 000000c4H
	call	?Set@Vector@@QAEXMMM@Z			; Vector::Set

; 289  : 	skyBoxVerts[7].Set(center.x-radius.x, center.y, center.z-radius.z);

	fld	DWORD PTR _center$[ebp+8]
	fsub	DWORD PTR _radius$[ebp+8]
	fstp	DWORD PTR tv355[ebp]
	fld	DWORD PTR tv355[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _center$[ebp+4]
	fstp	DWORD PTR [esp]
	fld	DWORD PTR _center$[ebp]
	fsub	DWORD PTR _radius$[ebp]
	fstp	DWORD PTR tv356[ebp]
	fld	DWORD PTR tv356[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 208				; 000000d0H
	call	?Set@Vector@@QAEXMMM@Z			; Vector::Set

; 290  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@SetWaterHe
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 308				; 00000134H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	3
$LN6@SetWaterHe:
	DD	2
	DD	$LN5@SetWaterHe
$LN5@SetWaterHe:
	DD	-28					; ffffffe4H
	DD	12					; 0000000cH
	DD	$LN3@SetWaterHe
	DD	-48					; ffffffd0H
	DD	12					; 0000000cH
	DD	$LN4@SetWaterHe
$LN4@SetWaterHe:
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	105					; 00000069H
	DB	117					; 00000075H
	DB	115					; 00000073H
	DB	0
$LN3@SetWaterHe:
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
?SetWaterHeight@Terrain@@QAEXM@Z ENDP			; Terrain::SetWaterHeight
_TEXT	ENDS
PUBLIC	?GetWaterHeight@Terrain@@QAEMXZ			; Terrain::GetWaterHeight
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?GetWaterHeight@Terrain@@QAEMXZ
_TEXT	SEGMENT
tv78 = -208						; size = 4
_this$ = -8						; size = 4
?GetWaterHeight@Terrain@@QAEMXZ PROC			; Terrain::GetWaterHeight, COMDAT
; _this$ = ecx

; 293  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 294  : 	return origin.y + dimen.y*waterHeight;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+72]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx+16]
	mov	edx, DWORD PTR _this$[ebp]
	fadd	DWORD PTR [edx+60]
	fstp	DWORD PTR tv78[ebp]
	fld	DWORD PTR tv78[ebp]

; 295  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetWaterHeight@Terrain@@QAEMXZ ENDP			; Terrain::GetWaterHeight
_TEXT	ENDS
PUBLIC	?SetRandGenerate@Terrain@@QAEX_N@Z		; Terrain::SetRandGenerate
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?SetRandGenerate@Terrain@@QAEX_N@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_RandGen$ = 8						; size = 1
?SetRandGenerate@Terrain@@QAEX_N@Z PROC			; Terrain::SetRandGenerate, COMDAT
; _this$ = ecx

; 298  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 299  : 	this->RandGen = RandGen;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _RandGen$[ebp]
	mov	BYTE PTR [eax+104], cl

; 300  : 	BuildTerrain();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?BuildTerrain@Terrain@@AAEXXZ		; Terrain::BuildTerrain

; 301  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetRandGenerate@Terrain@@QAEX_N@Z ENDP			; Terrain::SetRandGenerate
_TEXT	ENDS
PUBLIC	?SetTextures@Terrain@@QAEXPAVTexture@@000@Z	; Terrain::SetTextures
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?SetTextures@Terrain@@QAEXPAVTexture@@000@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_pTexTerrain$ = 8					; size = 4
_pTexDetail$ = 12					; size = 4
_pTexLightmap$ = 16					; size = 4
_pTexSkyBox$ = 20					; size = 4
?SetTextures@Terrain@@QAEXPAVTexture@@000@Z PROC	; Terrain::SetTextures, COMDAT
; _this$ = ecx

; 304  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 305  : 	this->pTexTerrain = pTexTerrain;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pTexTerrain$[ebp]
	mov	DWORD PTR [eax+280], ecx

; 306  : 	this->pTexDetail = pTexDetail;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pTexDetail$[ebp]
	mov	DWORD PTR [eax+284], ecx

; 307  : 	this->pTexSkyBox = pTexSkyBox;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pTexSkyBox$[ebp]
	mov	DWORD PTR [eax+288], ecx

; 308  : 	this->pTexLightmap = pTexLightmap;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pTexLightmap$[ebp]
	mov	DWORD PTR [eax+292], ecx

; 309  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?SetTextures@Terrain@@QAEXPAVTexture@@000@Z ENDP	; Terrain::SetTextures
_TEXT	ENDS
PUBLIC	?floor@@YAMM@Z					; floor
PUBLIC	?GetHeight@Terrain@@QAEMMM@Z			; Terrain::GetHeight
EXTRN	?Dot@Vector@@QAEMAAV1@@Z:PROC			; Vector::Dot
EXTRN	__ftol2_sse:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?GetHeight@Terrain@@QAEMMM@Z
_TEXT	SEGMENT
tv408 = -424						; size = 4
tv378 = -424						; size = 4
tv320 = -424						; size = 4
tv308 = -424						; size = 4
$T33980 = -416						; size = 12
$T33981 = -396						; size = 12
$T33982 = -376						; size = 12
$T33983 = -356						; size = 12
_d$33580 = -144						; size = 4
_n$33574 = -132						; size = 12
_z2$33573 = -112					; size = 4
_x2$33572 = -100					; size = 4
_d$33570 = -88						; size = 4
_n$33564 = -76						; size = 12
_zt$33562 = -56						; size = 4
_xt$33561 = -44						; size = 4
_z1$ = -32						; size = 4
_x1$ = -20						; size = 4
_this$ = -8						; size = 4
_x$ = 8							; size = 4
_z$ = 12						; size = 4
?GetHeight@Terrain@@QAEMMM@Z PROC			; Terrain::GetHeight, COMDAT
; _this$ = ecx

; 313  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 424				; 000001a8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-424]
	mov	ecx, 106				; 0000006aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 314  : 	int x1 = (int)floor((x - origin.x) / TileX);

	fld	DWORD PTR _x$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fsub	DWORD PTR [eax+56]
	mov	ecx, DWORD PTR _this$[ebp]
	fdiv	DWORD PTR [ecx+92]
	fstp	DWORD PTR tv308[ebp]
	fld	DWORD PTR tv308[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	call	?floor@@YAMM@Z				; floor
	add	esp, 4
	call	__ftol2_sse
	mov	DWORD PTR _x1$[ebp], eax

; 315  : 	int z1 = floor((z - origin.z) / TileY);

	fld	DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fsub	DWORD PTR [eax+64]
	mov	ecx, DWORD PTR _this$[ebp]
	fdiv	DWORD PTR [ecx+96]
	fstp	DWORD PTR tv320[ebp]
	fld	DWORD PTR tv320[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	call	?floor@@YAMM@Z				; floor
	add	esp, 4
	call	__ftol2_sse
	mov	DWORD PTR _z1$[ebp], eax

; 316  : 	if ((x1 < 0) || (x1 >= vertXRes) || (z1 < 0) || (z1 >= vertYRes))

	cmp	DWORD PTR _x1$[ebp], 0
	jl	SHORT $LN4@GetHeight
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _x1$[ebp]
	cmp	ecx, DWORD PTR [eax+80]
	jae	SHORT $LN4@GetHeight
	cmp	DWORD PTR _z1$[ebp], 0
	jl	SHORT $LN4@GetHeight
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _z1$[ebp]
	cmp	ecx, DWORD PTR [eax+84]
	jb	SHORT $LN5@GetHeight
$LN4@GetHeight:

; 317  : 		return origin.y;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+60]
	jmp	$LN1@GetHeight

; 318  : 	else

	jmp	$LN1@GetHeight
$LN5@GetHeight:

; 319  : 	{
; 320  : 		float xt = x1*TileX + origin.x;

	fild	DWORD PTR _x1$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+92]
	mov	ecx, DWORD PTR _this$[ebp]
	fadd	DWORD PTR [ecx+56]
	fstp	DWORD PTR _xt$33561[ebp]

; 321  : 		float zt = z1*TileY + origin.z;

	fild	DWORD PTR _z1$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+96]
	mov	ecx, DWORD PTR _this$[ebp]
	fadd	DWORD PTR [ecx+64]
	fstp	DWORD PTR _zt$33562[ebp]

; 322  : 		if ((x - xt)*TileY + (z - zt)*TileX <= TileX*TileY)

	fld	DWORD PTR _x$[ebp]
	fsub	DWORD PTR _xt$33561[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+96]
	fld	DWORD PTR _z$[ebp]
	fsub	DWORD PTR _zt$33562[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx+92]
	faddp	ST(1), ST(0)
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+92]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+96]
	fcompp
	fnstsw	ax
	test	ah, 1
	jne	$LN2@GetHeight

; 323  : 		{
; 324  : 			Vector n = Vector(pVertexData[z1*vertXRes + x1 + 1].pos -  pVertexData[z1*vertXRes + x1].pos) ^ 
; 325  : 					   Vector(pVertexData[(z1+1)*vertXRes + x1].pos -  pVertexData[z1*vertXRes + x1].pos);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _z1$[ebp]
	imul	ecx, DWORD PTR [eax+80]
	add	ecx, DWORD PTR _x1$[ebp]
	shl	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+108]
	push	ecx
	lea	eax, DWORD PTR $T33981[ebp]
	push	eax
	mov	ecx, DWORD PTR _z1$[ebp]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	imul	ecx, DWORD PTR [edx+80]
	add	ecx, DWORD PTR _x1$[ebp]
	shl	ecx, 5
	mov	eax, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [eax+108]
	call	??GVector@@QAE?AV0@AAV0@@Z		; Vector::operator-
	push	eax
	lea	ecx, DWORD PTR _n$33564[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _z1$[ebp]
	imul	eax, DWORD PTR [edx+80]
	add	eax, DWORD PTR _x1$[ebp]
	shl	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+108]
	push	eax
	lea	edx, DWORD PTR $T33980[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _z1$[ebp]
	imul	ecx, DWORD PTR [eax+80]
	mov	edx, DWORD PTR _x1$[ebp]
	lea	ecx, DWORD PTR [ecx+edx+1]
	shl	ecx, 5
	mov	eax, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [eax+108]
	call	??GVector@@QAE?AV0@AAV0@@Z		; Vector::operator-
	mov	ecx, eax
	call	??TVector@@QAE?AV0@AAV0@@Z		; Vector::operator^

; 326  : 			float d = -n.Dot(pVertexData[z1*vertXRes + x1].pos);   

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _z1$[ebp]
	imul	ecx, DWORD PTR [eax+80]
	add	ecx, DWORD PTR _x1$[ebp]
	shl	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+108]
	push	ecx
	lea	ecx, DWORD PTR _n$33564[ebp]
	call	?Dot@Vector@@QAEMAAV1@@Z		; Vector::Dot
	fchs
	fstp	DWORD PTR _d$33570[ebp]

; 327  : 			return (-n.x * x - n.z * z - d) / n.y;

	fld	DWORD PTR _n$33564[ebp]
	fchs
	fmul	DWORD PTR _x$[ebp]
	fld	DWORD PTR _n$33564[ebp+8]
	fmul	DWORD PTR _z$[ebp]
	fsubp	ST(1), ST(0)
	fsub	DWORD PTR _d$33570[ebp]
	fdiv	DWORD PTR _n$33564[ebp+4]
	fstp	DWORD PTR tv378[ebp]
	fld	DWORD PTR tv378[ebp]
	jmp	$LN1@GetHeight

; 328  : 		}
; 329  : 		else

	jmp	$LN1@GetHeight
$LN2@GetHeight:

; 330  : 		{
; 331  : 			int x2 = x1 + 1;

	mov	eax, DWORD PTR _x1$[ebp]
	add	eax, 1
	mov	DWORD PTR _x2$33572[ebp], eax

; 332  : 			int z2 = z1 + 1;

	mov	eax, DWORD PTR _z1$[ebp]
	add	eax, 1
	mov	DWORD PTR _z2$33573[ebp], eax

; 333  : 			Vector n = Vector(pVertexData[z1*vertXRes + x1 + 1].pos -  pVertexData[z2*vertXRes + x2].pos) ^ 
; 334  : 					   Vector(pVertexData[(z1+1)*vertXRes + x1].pos -  pVertexData[z2*vertXRes + x2].pos);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _z2$33573[ebp]
	imul	ecx, DWORD PTR [eax+80]
	add	ecx, DWORD PTR _x2$33572[ebp]
	shl	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+108]
	push	ecx
	lea	eax, DWORD PTR $T33983[ebp]
	push	eax
	mov	ecx, DWORD PTR _z1$[ebp]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	imul	ecx, DWORD PTR [edx+80]
	add	ecx, DWORD PTR _x1$[ebp]
	shl	ecx, 5
	mov	eax, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [eax+108]
	call	??GVector@@QAE?AV0@AAV0@@Z		; Vector::operator-
	push	eax
	lea	ecx, DWORD PTR _n$33574[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _z2$33573[ebp]
	imul	eax, DWORD PTR [edx+80]
	add	eax, DWORD PTR _x2$33572[ebp]
	shl	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+108]
	push	eax
	lea	edx, DWORD PTR $T33982[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _z1$[ebp]
	imul	ecx, DWORD PTR [eax+80]
	mov	edx, DWORD PTR _x1$[ebp]
	lea	ecx, DWORD PTR [ecx+edx+1]
	shl	ecx, 5
	mov	eax, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [eax+108]
	call	??GVector@@QAE?AV0@AAV0@@Z		; Vector::operator-
	mov	ecx, eax
	call	??TVector@@QAE?AV0@AAV0@@Z		; Vector::operator^

; 335  : 			float d = -n.Dot(pVertexData[z2*vertXRes + x2].pos);   

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _z2$33573[ebp]
	imul	ecx, DWORD PTR [eax+80]
	add	ecx, DWORD PTR _x2$33572[ebp]
	shl	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+108]
	push	ecx
	lea	ecx, DWORD PTR _n$33574[ebp]
	call	?Dot@Vector@@QAEMAAV1@@Z		; Vector::Dot
	fchs
	fstp	DWORD PTR _d$33580[ebp]

; 336  : 			return (-n.x * x - n.z * z - d) / n.y;

	fld	DWORD PTR _n$33574[ebp]
	fchs
	fmul	DWORD PTR _x$[ebp]
	fld	DWORD PTR _n$33574[ebp+8]
	fmul	DWORD PTR _z$[ebp]
	fsubp	ST(1), ST(0)
	fsub	DWORD PTR _d$33580[ebp]
	fdiv	DWORD PTR _n$33574[ebp+4]
	fstp	DWORD PTR tv408[ebp]
	fld	DWORD PTR tv408[ebp]
$LN1@GetHeight:

; 337  : 		}
; 338  : 	}
; 339  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@GetHeight
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 424				; 000001a8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	2
$LN11@GetHeight:
	DD	2
	DD	$LN10@GetHeight
$LN10@GetHeight:
	DD	-76					; ffffffb4H
	DD	12					; 0000000cH
	DD	$LN8@GetHeight
	DD	-132					; ffffff7cH
	DD	12					; 0000000cH
	DD	$LN9@GetHeight
$LN9@GetHeight:
	DB	110					; 0000006eH
	DB	0
$LN8@GetHeight:
	DB	110					; 0000006eH
	DB	0
?GetHeight@Terrain@@QAEMMM@Z ENDP			; Terrain::GetHeight
_TEXT	ENDS
PUBLIC	_floorf
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\math.h
;	COMDAT ?floor@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?floor@@YAMM@Z PROC					; floor, COMDAT

; 512  :         {return (floorf(_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	push	ecx
	fld	DWORD PTR __X$[ebp]
	fstp	DWORD PTR [esp]
	call	_floorf
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?floor@@YAMM@Z ENDP					; floor
_TEXT	ENDS
EXTRN	_floor:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _floorf
_TEXT	SEGMENT
tv73 = -196						; size = 4
__X$ = 8						; size = 4
_floorf	PROC						; COMDAT

; 405  :         {return ((float)floor((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	fld	DWORD PTR __X$[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	_floor
	add	esp, 8
	fstp	DWORD PTR tv73[ebp]
	fld	DWORD PTR tv73[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_floorf	ENDP
_TEXT	ENDS
PUBLIC	?GetHeightAndDir@Terrain@@QAEMMMAAVVector@@00@Z	; Terrain::GetHeightAndDir
EXTRN	??DMatrix@@QAE?AVVector@@AAV1@@Z:PROC		; Matrix::operator*
EXTRN	??0Matrix@@QAE@MAAVVector@@@Z:PROC		; Matrix::Matrix
EXTRN	?Angle@Vector@@QAEMAAV1@@Z:PROC			; Vector::Angle
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\user\desktop\computergraphicsproject\viewer\terrain.cpp
;	COMDAT ?GetHeightAndDir@Terrain@@QAEMMMAAVVector@@00@Z
_TEXT	SEGMENT
tv512 = -568						; size = 4
tv482 = -568						; size = 4
tv378 = -568						; size = 4
tv366 = -568						; size = 4
$T33995 = -560						; size = 12
$T33996 = -540						; size = 12
$T33997 = -520						; size = 12
$T33998 = -500						; size = 12
$T33999 = -480						; size = 12
$T34000 = -460						; size = 12
$T34001 = -440						; size = 12
$T34002 = -420						; size = 12
_d$33620 = -208						; size = 4
_n$33614 = -196						; size = 12
_z2$33613 = -176					; size = 4
_x2$33612 = -164					; size = 4
_d$33610 = -152						; size = 4
_Rot$33607 = -140					; size = 36
_n1$33604 = -96						; size = 12
_n$33597 = -76						; size = 12
_zt$33595 = -56						; size = 4
_xt$33594 = -44						; size = 4
_z1$ = -32						; size = 4
_x1$ = -20						; size = 4
_this$ = -8						; size = 4
_x$ = 8							; size = 4
_z$ = 12						; size = 4
_Dir$ = 16						; size = 4
_Side$ = 20						; size = 4
_Up$ = 24						; size = 4
?GetHeightAndDir@Terrain@@QAEMMMAAVVector@@00@Z PROC	; Terrain::GetHeightAndDir, COMDAT
; _this$ = ecx

; 342  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 568				; 00000238H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-568]
	mov	ecx, 142				; 0000008eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 343  : 	int x1 = floor((x - origin.x) / TileX);

	fld	DWORD PTR _x$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fsub	DWORD PTR [eax+56]
	mov	ecx, DWORD PTR _this$[ebp]
	fdiv	DWORD PTR [ecx+92]
	fstp	DWORD PTR tv366[ebp]
	fld	DWORD PTR tv366[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	call	?floor@@YAMM@Z				; floor
	add	esp, 4
	call	__ftol2_sse
	mov	DWORD PTR _x1$[ebp], eax

; 344  : 	int z1 = floor((z - origin.z) / TileY);

	fld	DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fsub	DWORD PTR [eax+64]
	mov	ecx, DWORD PTR _this$[ebp]
	fdiv	DWORD PTR [ecx+96]
	fstp	DWORD PTR tv378[ebp]
	fld	DWORD PTR tv378[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	call	?floor@@YAMM@Z				; floor
	add	esp, 4
	call	__ftol2_sse
	mov	DWORD PTR _z1$[ebp], eax

; 345  : 	if ((x1 < 0) || (x1 >= vertXRes) || (z1 < 0) || (z1 >= vertYRes))

	cmp	DWORD PTR _x1$[ebp], 0
	jl	SHORT $LN4@GetHeightA
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _x1$[ebp]
	cmp	ecx, DWORD PTR [eax+80]
	jae	SHORT $LN4@GetHeightA
	cmp	DWORD PTR _z1$[ebp], 0
	jl	SHORT $LN4@GetHeightA
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _z1$[ebp]
	cmp	ecx, DWORD PTR [eax+84]
	jb	SHORT $LN5@GetHeightA
$LN4@GetHeightA:

; 346  : 		return origin.y;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+60]
	jmp	$LN1@GetHeightA

; 347  : 	else

	jmp	$LN1@GetHeightA
$LN5@GetHeightA:

; 348  : 	{
; 349  : 		float xt = x1*TileX + origin.x;

	fild	DWORD PTR _x1$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+92]
	mov	ecx, DWORD PTR _this$[ebp]
	fadd	DWORD PTR [ecx+56]
	fstp	DWORD PTR _xt$33594[ebp]

; 350  : 		float zt = z1*TileY + origin.z;

	fild	DWORD PTR _z1$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+96]
	mov	ecx, DWORD PTR _this$[ebp]
	fadd	DWORD PTR [ecx+64]
	fstp	DWORD PTR _zt$33595[ebp]

; 351  : 		if ((x - xt)*TileY + (z - zt)*TileX <= TileX*TileY)

	fld	DWORD PTR _x$[ebp]
	fsub	DWORD PTR _xt$33594[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+96]
	fld	DWORD PTR _z$[ebp]
	fsub	DWORD PTR _zt$33595[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx+92]
	faddp	ST(1), ST(0)
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+92]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+96]
	fcompp
	fnstsw	ax
	test	ah, 1
	jne	$LN2@GetHeightA

; 352  : 		{
; 353  : 			Vector n = (Vector(pVertexData[z1*vertXRes + x1 + 1].pos -  pVertexData[z1*vertXRes + x1].pos) ^ 

	lea	eax, DWORD PTR _n$33597[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _z1$[ebp]
	imul	edx, DWORD PTR [ecx+80]
	add	edx, DWORD PTR _x1$[ebp]
	shl	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+108]
	push	edx
	lea	ecx, DWORD PTR $T33996[ebp]
	push	ecx
	mov	ecx, DWORD PTR _z1$[ebp]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	imul	ecx, DWORD PTR [edx+80]
	add	ecx, DWORD PTR _x1$[ebp]
	shl	ecx, 5
	mov	eax, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [eax+108]
	call	??GVector@@QAE?AV0@AAV0@@Z		; Vector::operator-
	push	eax
	lea	ecx, DWORD PTR $T33997[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _z1$[ebp]
	imul	eax, DWORD PTR [edx+80]
	add	eax, DWORD PTR _x1$[ebp]
	shl	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+108]
	push	eax
	lea	edx, DWORD PTR $T33995[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _z1$[ebp]
	imul	ecx, DWORD PTR [eax+80]
	mov	edx, DWORD PTR _x1$[ebp]
	lea	ecx, DWORD PTR [ecx+edx+1]
	shl	ecx, 5
	mov	eax, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [eax+108]
	call	??GVector@@QAE?AV0@AAV0@@Z		; Vector::operator-
	mov	ecx, eax
	call	??TVector@@QAE?AV0@AAV0@@Z		; Vector::operator^
	mov	ecx, eax
	call	?Normalize@Vector@@QAE?AV1@XZ		; Vector::Normalize

; 354  : 						Vector(pVertexData[(z1+1)*vertXRes + x1].pos -  pVertexData[z1*vertXRes + x1].pos)).Normalize();
; 355  : 			Vector n1 = (n ^ Up).Normalize();

	lea	eax, DWORD PTR _n1$33604[ebp]
	push	eax
	mov	ecx, DWORD PTR _Up$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T33998[ebp]
	push	edx
	lea	ecx, DWORD PTR _n$33597[ebp]
	call	??TVector@@QAE?AV0@AAV0@@Z		; Vector::operator^
	mov	ecx, eax
	call	?Normalize@Vector@@QAE?AV1@XZ		; Vector::Normalize

; 356  : 			Matrix Rot(-n.Angle(Up), n1);

	lea	eax, DWORD PTR _n1$33604[ebp]
	push	eax
	mov	ecx, DWORD PTR _Up$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _n$33597[ebp]
	call	?Angle@Vector@@QAEMAAV1@@Z		; Vector::Angle
	fchs
	push	ecx
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR _Rot$33607[ebp]
	call	??0Matrix@@QAE@MAAVVector@@@Z		; Matrix::Matrix

; 357  : 			Up = n;

	mov	eax, DWORD PTR _Up$[ebp]
	mov	ecx, DWORD PTR _n$33597[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _n$33597[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _n$33597[ebp+8]
	mov	DWORD PTR [eax+8], ecx

; 358  : 			Dir = Rot * Dir;

	mov	eax, DWORD PTR _Dir$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T33999[ebp]
	push	ecx
	lea	ecx, DWORD PTR _Rot$33607[ebp]
	call	??DMatrix@@QAE?AVVector@@AAV1@@Z	; Matrix::operator*
	mov	edx, DWORD PTR _Dir$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], eax

; 359  : 			Side = Rot * Side;

	mov	eax, DWORD PTR _Side$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T34000[ebp]
	push	ecx
	lea	ecx, DWORD PTR _Rot$33607[ebp]
	call	??DMatrix@@QAE?AVVector@@AAV1@@Z	; Matrix::operator*
	mov	edx, DWORD PTR _Side$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], eax

; 360  : 			float d = -n.Dot(pVertexData[z1*vertXRes + x1].pos);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _z1$[ebp]
	imul	ecx, DWORD PTR [eax+80]
	add	ecx, DWORD PTR _x1$[ebp]
	shl	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+108]
	push	ecx
	lea	ecx, DWORD PTR _n$33597[ebp]
	call	?Dot@Vector@@QAEMAAV1@@Z		; Vector::Dot
	fchs
	fstp	DWORD PTR _d$33610[ebp]

; 361  : 			return (-n.x * x - n.z * z - d) / n.y;

	fld	DWORD PTR _n$33597[ebp]
	fchs
	fmul	DWORD PTR _x$[ebp]
	fld	DWORD PTR _n$33597[ebp+8]
	fmul	DWORD PTR _z$[ebp]
	fsubp	ST(1), ST(0)
	fsub	DWORD PTR _d$33610[ebp]
	fdiv	DWORD PTR _n$33597[ebp+4]
	fstp	DWORD PTR tv482[ebp]
	fld	DWORD PTR tv482[ebp]
	jmp	$LN1@GetHeightA

; 362  : 		}
; 363  : 		else

	jmp	$LN1@GetHeightA
$LN2@GetHeightA:

; 364  : 		{
; 365  : 			int x2 = x1 + 1;

	mov	eax, DWORD PTR _x1$[ebp]
	add	eax, 1
	mov	DWORD PTR _x2$33612[ebp], eax

; 366  : 			int z2 = z1 + 1;

	mov	eax, DWORD PTR _z1$[ebp]
	add	eax, 1
	mov	DWORD PTR _z2$33613[ebp], eax

; 367  : 			Vector n = Vector(pVertexData[z1*vertXRes + x1 + 1].pos -  pVertexData[z2*vertXRes + x2].pos) ^ 
; 368  : 					   Vector(pVertexData[(z1+1)*vertXRes + x1].pos -  pVertexData[z2*vertXRes + x2].pos);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _z2$33613[ebp]
	imul	ecx, DWORD PTR [eax+80]
	add	ecx, DWORD PTR _x2$33612[ebp]
	shl	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+108]
	push	ecx
	lea	eax, DWORD PTR $T34002[ebp]
	push	eax
	mov	ecx, DWORD PTR _z1$[ebp]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	imul	ecx, DWORD PTR [edx+80]
	add	ecx, DWORD PTR _x1$[ebp]
	shl	ecx, 5
	mov	eax, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [eax+108]
	call	??GVector@@QAE?AV0@AAV0@@Z		; Vector::operator-
	push	eax
	lea	ecx, DWORD PTR _n$33614[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _z2$33613[ebp]
	imul	eax, DWORD PTR [edx+80]
	add	eax, DWORD PTR _x2$33612[ebp]
	shl	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+108]
	push	eax
	lea	edx, DWORD PTR $T34001[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _z1$[ebp]
	imul	ecx, DWORD PTR [eax+80]
	mov	edx, DWORD PTR _x1$[ebp]
	lea	ecx, DWORD PTR [ecx+edx+1]
	shl	ecx, 5
	mov	eax, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [eax+108]
	call	??GVector@@QAE?AV0@AAV0@@Z		; Vector::operator-
	mov	ecx, eax
	call	??TVector@@QAE?AV0@AAV0@@Z		; Vector::operator^

; 369  : 			float d = -n.Dot(pVertexData[z2*vertXRes + x2].pos);   

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _z2$33613[ebp]
	imul	ecx, DWORD PTR [eax+80]
	add	ecx, DWORD PTR _x2$33612[ebp]
	shl	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+108]
	push	ecx
	lea	ecx, DWORD PTR _n$33614[ebp]
	call	?Dot@Vector@@QAEMAAV1@@Z		; Vector::Dot
	fchs
	fstp	DWORD PTR _d$33620[ebp]

; 370  : 			return (-n.x * x - n.z * z - d) / n.y;

	fld	DWORD PTR _n$33614[ebp]
	fchs
	fmul	DWORD PTR _x$[ebp]
	fld	DWORD PTR _n$33614[ebp+8]
	fmul	DWORD PTR _z$[ebp]
	fsubp	ST(1), ST(0)
	fsub	DWORD PTR _d$33620[ebp]
	fdiv	DWORD PTR _n$33614[ebp+4]
	fstp	DWORD PTR tv512[ebp]
	fld	DWORD PTR tv512[ebp]
$LN1@GetHeightA:

; 371  : 		}
; 372  : 	}
; 373  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@GetHeightA
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 568				; 00000238H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
	npad	3
$LN13@GetHeightA:
	DD	4
	DD	$LN12@GetHeightA
$LN12@GetHeightA:
	DD	-76					; ffffffb4H
	DD	12					; 0000000cH
	DD	$LN8@GetHeightA
	DD	-96					; ffffffa0H
	DD	12					; 0000000cH
	DD	$LN9@GetHeightA
	DD	-140					; ffffff74H
	DD	36					; 00000024H
	DD	$LN10@GetHeightA
	DD	-196					; ffffff3cH
	DD	12					; 0000000cH
	DD	$LN11@GetHeightA
$LN11@GetHeightA:
	DB	110					; 0000006eH
	DB	0
$LN10@GetHeightA:
	DB	82					; 00000052H
	DB	111					; 0000006fH
	DB	116					; 00000074H
	DB	0
$LN9@GetHeightA:
	DB	110					; 0000006eH
	DB	49					; 00000031H
	DB	0
$LN8@GetHeightA:
	DB	110					; 0000006eH
	DB	0
?GetHeightAndDir@Terrain@@QAEMMMAAVVector@@00@Z ENDP	; Terrain::GetHeightAndDir
_TEXT	ENDS
PUBLIC	?RenderWater@Terrain@@AAEXXZ			; Terrain::RenderWater
PUBLIC	__real@c000000000000000
PUBLIC	?RenderSkyBox@Terrain@@AAEXXZ			; Terrain::RenderSkyBox
PUBLIC	?RenderTerrain@Terrain@@AAEXXZ			; Terrain::RenderTerrain
PUBLIC	__real@bf800000
PUBLIC	__real@3f800000
PUBLIC	__real@4000000000000000
PUBLIC	__real@bff0000000000000
PUBLIC	__real@0000000000000000
PUBLIC	?Render@Terrain@@QAEXXZ				; Terrain::Render
EXTRN	__imp__glDisable@4:PROC
EXTRN	__imp__glBlendFunc@8:PROC
EXTRN	__imp__glCullFace@4:PROC
EXTRN	__imp__glScalef@12:PROC
EXTRN	__imp__glTranslatef@12:PROC
EXTRN	__imp__glEnable@4:PROC
EXTRN	__imp__glClipPlane@8:PROC
;	COMDAT __real@c000000000000000
CONST	SEGMENT
__real@c000000000000000 DQ 0c000000000000000r	; -2
CONST	ENDS
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@4000000000000000
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
CONST	ENDS
;	COMDAT __real@bff0000000000000
CONST	SEGMENT
__real@bff0000000000000 DQ 0bff0000000000000r	; -1
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?Render@Terrain@@QAEXXZ
_TEXT	SEGMENT
tv196 = -248						; size = 4
tv164 = -248						; size = 4
_plane_eqn$ = -48					; size = 32
_this$ = -8						; size = 4
?Render@Terrain@@QAEXXZ PROC				; Terrain::Render, COMDAT
; _this$ = ecx

; 376  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 248				; 000000f8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-248]
	mov	ecx, 62					; 0000003eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 377  : 	double plane_eqn[4] = { 0, -1, 0, origin.y + dimen.y*waterHeight}; 

	fldz
	fstp	QWORD PTR _plane_eqn$[ebp]
	fld	QWORD PTR __real@bff0000000000000
	fstp	QWORD PTR _plane_eqn$[ebp+8]
	fldz
	fstp	QWORD PTR _plane_eqn$[ebp+16]
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+72]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx+16]
	mov	edx, DWORD PTR _this$[ebp]
	fadd	DWORD PTR [edx+60]
	fstp	QWORD PTR _plane_eqn$[ebp+24]

; 378  : 	glClipPlane( GL_CLIP_PLANE0, plane_eqn ); 

	mov	esi, esp
	lea	eax, DWORD PTR _plane_eqn$[ebp]
	push	eax
	push	12288					; 00003000H
	call	DWORD PTR __imp__glClipPlane@8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 379  : 	glEnable( GL_CLIP_PLANE0 ); 

	mov	esi, esp
	push	12288					; 00003000H
	call	DWORD PTR __imp__glEnable@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 380  : 
; 381  : 
; 382  : 
; 383  : 	glTranslatef(0, 2*waterHeight*dimen.y, 0);

	mov	esi, esp
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+16]
	fmul	QWORD PTR __real@4000000000000000
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx+72]
	fstp	DWORD PTR tv164[ebp]
	fld	DWORD PTR tv164[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	call	DWORD PTR __imp__glTranslatef@12
	cmp	esi, esp
	call	__RTC_CheckEsp

; 384  : 	glScalef(1, -1, 1);

	mov	esi, esp
	push	ecx
	fld1
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR __real@bf800000
	fstp	DWORD PTR [esp]
	push	ecx
	fld1
	fstp	DWORD PTR [esp]
	call	DWORD PTR __imp__glScalef@12
	cmp	esi, esp
	call	__RTC_CheckEsp

; 385  : 
; 386  : 		glCullFace(GL_BACK);

	mov	esi, esp
	push	1029					; 00000405H
	call	DWORD PTR __imp__glCullFace@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 387  : 		
; 388  : 		RenderTerrain();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?RenderTerrain@Terrain@@AAEXXZ		; Terrain::RenderTerrain

; 389  : 		RenderSkyBox();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?RenderSkyBox@Terrain@@AAEXXZ		; Terrain::RenderSkyBox

; 390  : 
; 391  : 		glCullFace(GL_FRONT);

	mov	esi, esp
	push	1028					; 00000404H
	call	DWORD PTR __imp__glCullFace@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 392  : 
; 393  : 	glScalef(1, -1, 1);

	mov	esi, esp
	push	ecx
	fld1
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR __real@bf800000
	fstp	DWORD PTR [esp]
	push	ecx
	fld1
	fstp	DWORD PTR [esp]
	call	DWORD PTR __imp__glScalef@12
	cmp	esi, esp
	call	__RTC_CheckEsp

; 394  : 	glTranslatef(0, -2*waterHeight*dimen.y, 0);

	mov	esi, esp
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+16]
	fmul	QWORD PTR __real@c000000000000000
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx+72]
	fstp	DWORD PTR tv196[ebp]
	fld	DWORD PTR tv196[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	call	DWORD PTR __imp__glTranslatef@12
	cmp	esi, esp
	call	__RTC_CheckEsp

; 395  : 
; 396  : 	glEnable(GL_BLEND);

	mov	esi, esp
	push	3042					; 00000be2H
	call	DWORD PTR __imp__glEnable@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 397  : 	glBlendFunc(GL_SRC_COLOR, GL_DST_COLOR);

	mov	esi, esp
	push	774					; 00000306H
	push	768					; 00000300H
	call	DWORD PTR __imp__glBlendFunc@8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 398  : 	RenderTerrain();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?RenderTerrain@Terrain@@AAEXXZ		; Terrain::RenderTerrain

; 399  : 	glDisable(GL_BLEND);

	mov	esi, esp
	push	3042					; 00000be2H
	call	DWORD PTR __imp__glDisable@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 400  : 
; 401  : 
; 402  : 	glDisable( GL_CLIP_PLANE0 ); 

	mov	esi, esp
	push	12288					; 00003000H
	call	DWORD PTR __imp__glDisable@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 403  : 
; 404  : 	RenderWater();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?RenderWater@Terrain@@AAEXXZ		; Terrain::RenderWater

; 405  : 	RenderTerrain();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?RenderTerrain@Terrain@@AAEXXZ		; Terrain::RenderTerrain

; 406  : 
; 407  : 	
; 408  : 	/*glBegin(GL_LINES);
; 409  : 	glColor3f(1.0f, 1.0f, 1.0f);
; 410  : 	int i = 0, j = 0;
; 411  : 	float s = 10;
; 412  : 	for (dword y = 0; y < vertYRes-1; y++) 
; 413  : 	{
; 414  : 		for (dword x = 0; x < vertXRes*2 - 2; x++)
; 415  : 		{
; 416  : 			glVertex3f(pVertexData[pIndexArray[i]].pos.x, pVertexData[pIndexArray[i]].pos.y, pVertexData[pIndexArray[i]].pos.z);
; 417  : 			glVertex3f(
; 418  : 				pVertexData[pIndexArray[i]].pos.x + pNormals[j].x*s, 
; 419  : 				pVertexData[pIndexArray[i]].pos.y + pNormals[j].y*s, 
; 420  : 				pVertexData[pIndexArray[i]].pos.z + pNormals[j].z*s);
; 421  : 			i++;
; 422  : 			j++;
; 423  : 		}
; 424  : 		i += 2;
; 425  : 	}	
; 426  : 	glEnd();*/
; 427  : 
; 428  : 	/*glBegin(GL_LINES);
; 429  : 	dword i;
; 430  : 	float s = 10.f;
; 431  : 	glColor3f(1.0f, 1.0f, 1.0f);
; 432  : 	for (i = 0; i < vertXRes*vertYRes; i++)
; 433  : 	{
; 434  : 		glVertex3f(pVertexData[i].pos.x, pVertexData[i].pos.y, pVertexData[i].pos.z);
; 435  : 		glVertex3f(
; 436  : 			pVertexData[i].pos.x + VertexNormal[i].x*s, 
; 437  : 			pVertexData[i].pos.y + VertexNormal[i].y*s, 
; 438  : 			pVertexData[i].pos.z + VertexNormal[i].z*s);
; 439  : 	}
; 440  : 	glEnd();*/
; 441  : 
; 442  : 	RenderSkyBox();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?RenderSkyBox@Terrain@@AAEXXZ		; Terrain::RenderSkyBox

; 443  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@Render
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 248				; 000000f8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN5@Render:
	DD	1
	DD	$LN4@Render
$LN4@Render:
	DD	-48					; ffffffd0H
	DD	32					; 00000020H
	DD	$LN3@Render
$LN3@Render:
	DB	112					; 00000070H
	DB	108					; 0000006cH
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	101					; 00000065H
	DB	95					; 0000005fH
	DB	101					; 00000065H
	DB	113					; 00000071H
	DB	110					; 0000006eH
	DB	0
?Render@Terrain@@QAEXXZ ENDP				; Terrain::Render
_TEXT	ENDS
EXTRN	__imp__glDrawElements@16:PROC
EXTRN	__imp__glTexEnvi@12:PROC
EXTRN	?Use@Texture@@QAEXXZ:PROC			; Texture::Use
EXTRN	?glActiveTextureARB@@3P6GXI@ZA:DWORD		; glActiveTextureARB
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?RenderTerrain@Terrain@@AAEXXZ
_TEXT	SEGMENT
_y$ = -20						; size = 4
_this$ = -8						; size = 4
?RenderTerrain@Terrain@@AAEXXZ PROC			; Terrain::RenderTerrain, COMDAT
; _this$ = ecx

; 447  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 448  : 	dword	y;
; 449  : 
; 450  : 	if (drawTexture)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN9@RenderTerr

; 451  : 	{
; 452  : 		glActiveTextureARB(GL_TEXTURE0_ARB); 

	mov	esi, esp
	push	33984					; 000084c0H
	call	DWORD PTR ?glActiveTextureARB@@3P6GXI@ZA ; glActiveTextureARB
	cmp	esi, esp
	call	__RTC_CheckEsp

; 453  : 		pTexTerrain->Use();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+280]
	call	?Use@Texture@@QAEXXZ			; Texture::Use

; 454  : 		glEnable(GL_TEXTURE_2D);

	mov	esi, esp
	push	3553					; 00000de1H
	call	DWORD PTR __imp__glEnable@4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN9@RenderTerr:

; 455  : 		//glTexEnvi(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_DECAL);
; 456  : 		//glTexEnvi(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_COMBINE_EXT); 
; 457  : 	}
; 458  : 
; 459  : 	if (drawDetail) 

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN8@RenderTerr

; 460  : 	{
; 461  : 		glActiveTextureARB(GL_TEXTURE1_ARB); 

	mov	esi, esp
	push	33985					; 000084c1H
	call	DWORD PTR ?glActiveTextureARB@@3P6GXI@ZA ; glActiveTextureARB
	cmp	esi, esp
	call	__RTC_CheckEsp

; 462  : 		pTexDetail->Use();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+284]
	call	?Use@Texture@@QAEXXZ			; Texture::Use

; 463  : 		glEnable(GL_TEXTURE_2D);

	mov	esi, esp
	push	3553					; 00000de1H
	call	DWORD PTR __imp__glEnable@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 464  : 		//glTexEnvi( GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_MODULATE);
; 465  : 		//glTexEnvi(GL_TEXTURE_ENV, GL_COMBINE_RGB_EXT, GL_ADD_SIGNED_EXT); 
; 466  : 		glTexEnvi(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_COMBINE_EXT); 

	mov	esi, esp
	push	34160					; 00008570H
	push	8704					; 00002200H
	push	8960					; 00002300H
	call	DWORD PTR __imp__glTexEnvi@12
	cmp	esi, esp
	call	__RTC_CheckEsp

; 467  : 		glTexEnvi(GL_TEXTURE_ENV, GL_COMBINE_RGB_EXT, GL_ADD_SIGNED_EXT); 

	mov	esi, esp
	push	34164					; 00008574H
	push	34161					; 00008571H
	push	8960					; 00002300H
	call	DWORD PTR __imp__glTexEnvi@12
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN8@RenderTerr:

; 468  : 	}
; 469  : 
; 470  : 	if (drawLightmap)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN7@RenderTerr

; 471  : 	{
; 472  : 		glActiveTextureARB(GL_TEXTURE2_ARB); 

	mov	esi, esp
	push	33986					; 000084c2H
	call	DWORD PTR ?glActiveTextureARB@@3P6GXI@ZA ; glActiveTextureARB
	cmp	esi, esp
	call	__RTC_CheckEsp

; 473  : 		pTexLightmap->Use();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+292]
	call	?Use@Texture@@QAEXXZ			; Texture::Use

; 474  : 		glEnable(GL_TEXTURE_2D);

	mov	esi, esp
	push	3553					; 00000de1H
	call	DWORD PTR __imp__glEnable@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 475  : 		glTexEnvi(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_MODULATE);

	mov	esi, esp
	push	8448					; 00002100H
	push	8704					; 00002200H
	push	8960					; 00002300H
	call	DWORD PTR __imp__glTexEnvi@12
	cmp	esi, esp
	call	__RTC_CheckEsp

; 476  : 		glTexEnvi(GL_TEXTURE_ENV, GL_COMBINE_RGB_EXT, GL_ADD_SIGNED_EXT); 

	mov	esi, esp
	push	34164					; 00008574H
	push	34161					; 00008571H
	push	8960					; 00002300H
	call	DWORD PTR __imp__glTexEnvi@12
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN7@RenderTerr:

; 477  : 	}
; 478  : 
; 479  : 	
; 480  : 	for (y = 0; y < vertYRes-1; y++) 

	mov	DWORD PTR _y$[ebp], 0
	jmp	SHORT $LN6@RenderTerr
$LN5@RenderTerr:
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 1
	mov	DWORD PTR _y$[ebp], eax
$LN6@RenderTerr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	sub	ecx, 1
	cmp	DWORD PTR _y$[ebp], ecx
	jae	SHORT $LN4@RenderTerr

; 481  : 		glDrawElements(wireFrame ? GL_LINE_STRIP : GL_TRIANGLE_STRIP, vertXRes*2, GL_UNSIGNED_SHORT, pIndexArray + y*vertXRes*2);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _y$[ebp]
	imul	ecx, DWORD PTR [eax+80]
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+116]
	lea	ecx, DWORD PTR [eax+ecx*2]
	mov	esi, esp
	push	ecx
	push	5123					; 00001403H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+80]
	shl	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	xor	edx, edx
	cmp	DWORD PTR [ecx+12], 0
	sete	dl
	lea	edx, DWORD PTR [edx+edx+3]
	push	edx
	call	DWORD PTR __imp__glDrawElements@16
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	SHORT $LN5@RenderTerr
$LN4@RenderTerr:

; 482  : 
; 483  : 	if (drawLightmap)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN3@RenderTerr

; 484  : 	{
; 485  : 		glDisable(GL_TEXTURE_2D);

	mov	esi, esp
	push	3553					; 00000de1H
	call	DWORD PTR __imp__glDisable@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 486  : 		glActiveTextureARB(GL_TEXTURE0_ARB); 

	mov	esi, esp
	push	33984					; 000084c0H
	call	DWORD PTR ?glActiveTextureARB@@3P6GXI@ZA ; glActiveTextureARB
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@RenderTerr:

; 487  : 	}
; 488  : 
; 489  : 	if (drawDetail)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN10@RenderTerr

; 490  : 	{
; 491  : 		if (!drawLightmap) 

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN10@RenderTerr

; 492  : 		{
; 493  : 			glDisable(GL_TEXTURE_2D);

	mov	esi, esp
	push	3553					; 00000de1H
	call	DWORD PTR __imp__glDisable@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 494  : 			glActiveTextureARB(GL_TEXTURE0_ARB); 

	mov	esi, esp
	push	33984					; 000084c0H
	call	DWORD PTR ?glActiveTextureARB@@3P6GXI@ZA ; glActiveTextureARB
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN10@RenderTerr:

; 495  : 		}
; 496  : 	}
; 497  : 
; 498  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?RenderTerrain@Terrain@@AAEXXZ ENDP			; Terrain::RenderTerrain
_TEXT	ENDS
PUBLIC	?GetPtr@Vector@@QAEPAMXZ			; Vector::GetPtr
PUBLIC	__real@3f7f8000
PUBLIC	__real@3b000000
EXTRN	__imp__glEnd@0:PROC
EXTRN	__imp__glVertex3fv@4:PROC
EXTRN	__imp__glTexCoord2d@16:PROC
EXTRN	__imp__glBegin@4:PROC
;	COMDAT __real@3f7f8000
CONST	SEGMENT
__real@3f7f8000 DD 03f7f8000r			; 0.998047
CONST	ENDS
;	COMDAT __real@3b000000
CONST	SEGMENT
__real@3b000000 DD 03b000000r			; 0.00195313
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?RenderSkyBox@Terrain@@AAEXXZ
_TEXT	SEGMENT
_j$33651 = -208						; size = 4
_i$ = -196						; size = 4
_mapping$ = -184					; size = 32
_dataOfs$ = -144					; size = 80
_v1$ = -56						; size = 4
_v0$ = -44						; size = 4
_u1$ = -32						; size = 4
_u0$ = -20						; size = 4
_this$ = -8						; size = 4
?RenderSkyBox@Terrain@@AAEXXZ PROC			; Terrain::RenderSkyBox, COMDAT
; _this$ = ecx

; 502  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 404				; 00000194H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-404]
	mov	ecx, 101				; 00000065H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 503  : 	glEnable(GL_TEXTURE_2D);

	mov	esi, esp
	push	3553					; 00000de1H
	call	DWORD PTR __imp__glEnable@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 504  : 	// skybox
; 505  : 
; 506  : 	const float u0 = 0.5f / 256.f,

	fld	DWORD PTR __real@3b000000
	fstp	DWORD PTR _u0$[ebp]

; 507  : 				u1 = (256.f-0.5f) / 256.f,

	fld	DWORD PTR __real@3f7f8000
	fstp	DWORD PTR _u1$[ebp]

; 508  : 				v0 = 0.5f / 256.f,

	fld	DWORD PTR __real@3b000000
	fstp	DWORD PTR _v0$[ebp]

; 509  : 				v1 = (256.f-0.5f) / 256.f;

	fld	DWORD PTR __real@3f7f8000
	fstp	DWORD PTR _v1$[ebp]

; 510  : 
; 511  : 	const dword dataOfs[5][4] = {
; 512  : 		{7,6,2,3},

	mov	DWORD PTR _dataOfs$[ebp], 7
	mov	DWORD PTR _dataOfs$[ebp+4], 6
	mov	DWORD PTR _dataOfs$[ebp+8], 2
	mov	DWORD PTR _dataOfs$[ebp+12], 3

; 513  : 		{1,2,6,5},

	mov	DWORD PTR _dataOfs$[ebp+16], 1
	mov	DWORD PTR _dataOfs$[ebp+20], 2
	mov	DWORD PTR _dataOfs$[ebp+24], 6
	mov	DWORD PTR _dataOfs$[ebp+28], 5

; 514  : 		{0,1,5,4},

	mov	DWORD PTR _dataOfs$[ebp+32], 0
	mov	DWORD PTR _dataOfs$[ebp+36], 1
	mov	DWORD PTR _dataOfs$[ebp+40], 5
	mov	DWORD PTR _dataOfs$[ebp+44], 4

; 515  : 		{4,7,3,0},

	mov	DWORD PTR _dataOfs$[ebp+48], 4
	mov	DWORD PTR _dataOfs$[ebp+52], 7
	mov	DWORD PTR _dataOfs$[ebp+56], 3
	mov	DWORD PTR _dataOfs$[ebp+60], 0

; 516  : 		{3,2,1,0}

	mov	DWORD PTR _dataOfs$[ebp+64], 3
	mov	DWORD PTR _dataOfs$[ebp+68], 2
	mov	DWORD PTR _dataOfs$[ebp+72], 1
	mov	DWORD PTR _dataOfs$[ebp+76], 0

; 517  : 	};
; 518  : 
; 519  : 	const float mapping[4][2] = { {u0, v1}, {u1,v1}, {u1,v0}, {u0, v0} };

	fld	DWORD PTR _u0$[ebp]
	fstp	DWORD PTR _mapping$[ebp]
	fld	DWORD PTR _v1$[ebp]
	fstp	DWORD PTR _mapping$[ebp+4]
	fld	DWORD PTR _u1$[ebp]
	fstp	DWORD PTR _mapping$[ebp+8]
	fld	DWORD PTR _v1$[ebp]
	fstp	DWORD PTR _mapping$[ebp+12]
	fld	DWORD PTR _u1$[ebp]
	fstp	DWORD PTR _mapping$[ebp+16]
	fld	DWORD PTR _v0$[ebp]
	fstp	DWORD PTR _mapping$[ebp+20]
	fld	DWORD PTR _u0$[ebp]
	fstp	DWORD PTR _mapping$[ebp+24]
	fld	DWORD PTR _v0$[ebp]
	fstp	DWORD PTR _mapping$[ebp+28]

; 520  : 
; 521  : 	dword i;
; 522  : 
; 523  : 
; 524  : 	for (i=0; i<5; i++) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN6@RenderSkyB
$LN5@RenderSkyB:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN6@RenderSkyB:
	cmp	DWORD PTR _i$[ebp], 5
	jae	$LN4@RenderSkyB

; 525  : 		pTexSkyBox[i].Use();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+288]
	mov	edx, DWORD PTR _i$[ebp]
	lea	ecx, DWORD PTR [ecx+edx*4]
	call	?Use@Texture@@QAEXXZ			; Texture::Use

; 526  : 		glBegin( GL_QUADS );

	mov	esi, esp
	push	7
	call	DWORD PTR __imp__glBegin@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 527  : 
; 528  : 		sdword j;
; 529  : 
; 530  : 		for (j=0; j<4; j++) {

	mov	DWORD PTR _j$33651[ebp], 0
	jmp	SHORT $LN3@RenderSkyB
$LN2@RenderSkyB:
	mov	eax, DWORD PTR _j$33651[ebp]
	add	eax, 1
	mov	DWORD PTR _j$33651[ebp], eax
$LN3@RenderSkyB:
	cmp	DWORD PTR _j$33651[ebp], 4
	jge	SHORT $LN1@RenderSkyB

; 531  : 			glTexCoord2d(mapping[j][0], mapping[j][1]);

	mov	eax, DWORD PTR _j$33651[ebp]
	fld	DWORD PTR _mapping$[ebp+eax*8+4]
	mov	esi, esp
	sub	esp, 8
	fstp	QWORD PTR [esp]
	mov	ecx, DWORD PTR _j$33651[ebp]
	fld	DWORD PTR _mapping$[ebp+ecx*8]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	DWORD PTR __imp__glTexCoord2d@16
	cmp	esi, esp
	call	__RTC_CheckEsp

; 532  : 			glVertex3fv(skyBoxVerts[dataOfs[i][j]].GetPtr());

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	lea	ecx, DWORD PTR _dataOfs$[ebp+eax]
	mov	edx, DWORD PTR _j$33651[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	lea	ecx, DWORD PTR [ecx+eax+124]
	call	?GetPtr@Vector@@QAEPAMXZ		; Vector::GetPtr
	mov	esi, esp
	push	eax
	call	DWORD PTR __imp__glVertex3fv@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 533  : 		}

	jmp	$LN2@RenderSkyB
$LN1@RenderSkyB:

; 534  : 
; 535  : 		glEnd();

	mov	esi, esp
	call	DWORD PTR __imp__glEnd@0
	cmp	esi, esp
	call	__RTC_CheckEsp

; 536  : 	}

	jmp	$LN5@RenderSkyB
$LN4@RenderSkyB:

; 537  : 
; 538  : 	glDisable(GL_TEXTURE_2D);

	mov	esi, esp
	push	3553					; 00000de1H
	call	DWORD PTR __imp__glDisable@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 539  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@RenderSkyB
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 404				; 00000194H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN12@RenderSkyB:
	DD	2
	DD	$LN11@RenderSkyB
$LN11@RenderSkyB:
	DD	-144					; ffffff70H
	DD	80					; 00000050H
	DD	$LN9@RenderSkyB
	DD	-184					; ffffff48H
	DD	32					; 00000020H
	DD	$LN10@RenderSkyB
$LN10@RenderSkyB:
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	112					; 00000070H
	DB	112					; 00000070H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	0
$LN9@RenderSkyB:
	DB	100					; 00000064H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	79					; 0000004fH
	DB	102					; 00000066H
	DB	115					; 00000073H
	DB	0
?RenderSkyBox@Terrain@@AAEXXZ ENDP			; Terrain::RenderSkyBox
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\user\desktop\computergraphicsproject\viewer\vector.h
_TEXT	ENDS
;	COMDAT ?GetPtr@Vector@@QAEPAMXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetPtr@Vector@@QAEPAMXZ PROC				; Vector::GetPtr, COMDAT
; _this$ = ecx

; 55   : 	float	*GetPtr() { return (float*)this; };

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetPtr@Vector@@QAEPAMXZ ENDP				; Vector::GetPtr
_TEXT	ENDS
PUBLIC	__real@3eff751040000000
PUBLIC	__real@403e000000000000
PUBLIC	__real@3ee66666
PUBLIC	__real@42f00000
EXTRN	?sys_Time@@3KA:DWORD				; sys_Time
EXTRN	??YVector@@QAEXAAV0@@Z:PROC			; Vector::operator+=
EXTRN	__imp__glColor4f@16:PROC
;	COMDAT __real@3eff751040000000
; File c:\users\user\desktop\computergraphicsproject\viewer\terrain.cpp
CONST	SEGMENT
__real@3eff751040000000 DQ 03eff751040000000r	; 3e-005
CONST	ENDS
;	COMDAT __real@403e000000000000
CONST	SEGMENT
__real@403e000000000000 DQ 0403e000000000000r	; 30
CONST	ENDS
;	COMDAT __real@3ee66666
CONST	SEGMENT
__real@3ee66666 DD 03ee66666r			; 0.45
CONST	ENDS
;	COMDAT __real@42f00000
CONST	SEGMENT
__real@42f00000 DD 042f00000r			; 120
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?RenderWater@Terrain@@AAEXXZ
_TEXT	SEGMENT
tv327 = -496						; size = 8
tv393 = -492						; size = 4
tv372 = -492						; size = 4
tv316 = -492						; size = 4
tv305 = -492						; size = 4
tv387 = -488						; size = 8
tv381 = -488						; size = 4
tv367 = -488						; size = 8
tv347 = -488						; size = 8
tv322 = -488						; size = 8
tv311 = -488						; size = 8
tv300 = -488						; size = 8
tv378 = -484						; size = 4
$T34042 = -476						; size = 12
$T34043 = -456						; size = 12
$T34044 = -436						; size = 12
$T34045 = -416						; size = 12
$T34046 = -396						; size = 12
$T34047 = -376						; size = 12
_dy$33689 = -164					; size = 4
_i$33685 = -152						; size = 4
_j$33681 = -140						; size = 4
_anim$ = -128						; size = 4
_dy$33672 = -116					; size = 4
_i$33668 = -104						; size = 4
_j$33664 = -92						; size = 4
_dV$ = -80						; size = 12
_dU$ = -60						; size = 12
_temp$ = -40						; size = 12
_waterTile$ = -20					; size = 4
_this$ = -8						; size = 4
?RenderWater@Terrain@@AAEXXZ PROC			; Terrain::RenderWater, COMDAT
; _this$ = ecx

; 543  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 496				; 000001f0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-496]
	mov	ecx, 124				; 0000007cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 544  : 	glEnable(GL_TEXTURE_2D);

	mov	esi, esp
	push	3553					; 00000de1H
	call	DWORD PTR __imp__glEnable@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 545  : 
; 546  : 	float waterTile = 2*60.f;

	fld	DWORD PTR __real@42f00000
	fstp	DWORD PTR _waterTile$[ebp]

; 547  : 
; 548  : #define	WATER_STRIP_LEN	30
; 549  : #define WATER_STRIP_LEN_1	(WATER_STRIP_LEN-1)
; 550  : 
; 551  : 	Vector	temp;

	lea	ecx, DWORD PTR _temp$[ebp]
	call	??0Vector@@QAE@XZ			; Vector::Vector

; 552  : 	Vector	dU, dV;

	lea	ecx, DWORD PTR _dU$[ebp]
	call	??0Vector@@QAE@XZ			; Vector::Vector
	lea	ecx, DWORD PTR _dV$[ebp]
	call	??0Vector@@QAE@XZ			; Vector::Vector

; 553  : 
; 554  : 	dU = skyBoxVerts[5] - skyBoxVerts[4];

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 172				; 000000acH
	push	eax
	lea	ecx, DWORD PTR $T34042[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 184				; 000000b8H
	call	??GVector@@QAE?AV0@AAV0@@Z		; Vector::operator-
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR _dU$[ebp], edx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _dU$[ebp+4], ecx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR _dU$[ebp+8], edx

; 555  : 	dV = skyBoxVerts[7] - skyBoxVerts[4];

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 172				; 000000acH
	push	eax
	lea	ecx, DWORD PTR $T34043[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 208				; 000000d0H
	call	??GVector@@QAE?AV0@AAV0@@Z		; Vector::operator-
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR _dV$[ebp], edx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _dV$[ebp+4], ecx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR _dV$[ebp+8], edx

; 556  : 
; 557  : 
; 558  : 	glEnable(GL_BLEND);

	mov	esi, esp
	push	3042					; 00000be2H
	call	DWORD PTR __imp__glEnable@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 559  : 	glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);

	mov	esi, esp
	push	771					; 00000303H
	push	770					; 00000302H
	call	DWORD PTR __imp__glBlendFunc@8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 560  : 	glColor4f(1,1,1,0.45f);

	mov	esi, esp
	push	ecx
	fld	DWORD PTR __real@3ee66666
	fstp	DWORD PTR [esp]
	push	ecx
	fld1
	fstp	DWORD PTR [esp]
	push	ecx
	fld1
	fstp	DWORD PTR [esp]
	push	ecx
	fld1
	fstp	DWORD PTR [esp]
	call	DWORD PTR __imp__glColor4f@16
	cmp	esi, esp
	call	__RTC_CheckEsp

; 561  : 
; 562  : 	pTexSkyBox[5].Use();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+288]
	add	ecx, 20					; 00000014H
	call	?Use@Texture@@QAEXXZ			; Texture::Use

; 563  : 
; 564  : 
; 565  : 	for (dword j=0; j<WATER_STRIP_LEN; j++) {

	mov	DWORD PTR _j$33664[ebp], 0
	jmp	SHORT $LN18@RenderWate
$LN17@RenderWate:
	mov	eax, DWORD PTR _j$33664[ebp]
	add	eax, 1
	mov	DWORD PTR _j$33664[ebp], eax
$LN18@RenderWate:
	cmp	DWORD PTR _j$33664[ebp], 30		; 0000001eH
	jae	$LN16@RenderWate

; 566  : 		glBegin( GL_QUAD_STRIP );

	mov	esi, esp
	push	8
	call	DWORD PTR __imp__glBegin@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 567  : 		for (dword i=0; i<WATER_STRIP_LEN+1; i++) {

	mov	DWORD PTR _i$33668[ebp], 0
	jmp	SHORT $LN15@RenderWate
$LN14@RenderWate:
	mov	eax, DWORD PTR _i$33668[ebp]
	add	eax, 1
	mov	DWORD PTR _i$33668[ebp], eax
$LN15@RenderWate:
	cmp	DWORD PTR _i$33668[ebp], 31		; 0000001fH
	jae	$LN13@RenderWate

; 568  : 			for (sdword dy=1; dy>=0; dy--) {

	mov	DWORD PTR _dy$33672[ebp], 1
	jmp	SHORT $LN12@RenderWate
$LN11@RenderWate:
	mov	eax, DWORD PTR _dy$33672[ebp]
	sub	eax, 1
	mov	DWORD PTR _dy$33672[ebp], eax
$LN12@RenderWate:
	cmp	DWORD PTR _dy$33672[ebp], 0
	jl	$LN10@RenderWate

; 569  : 				temp = skyBoxVerts[4];

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 172				; 000000acH
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _temp$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _temp$[ebp+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR _temp$[ebp+8], eax

; 570  : 				temp += dU * ((float)i / WATER_STRIP_LEN);

	mov	eax, DWORD PTR _i$33668[ebp]
	mov	DWORD PTR tv300[ebp], eax
	mov	DWORD PTR tv300[ebp+4], 0
	fild	QWORD PTR tv300[ebp]
	fdiv	QWORD PTR __real@403e000000000000
	fstp	DWORD PTR tv305[ebp]
	fld	DWORD PTR tv305[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR $T34044[ebp]
	push	ecx
	lea	ecx, DWORD PTR _dU$[ebp]
	call	??DVector@@QAE?AV0@M@Z			; Vector::operator*
	push	eax
	lea	ecx, DWORD PTR _temp$[ebp]
	call	??YVector@@QAEXAAV0@@Z			; Vector::operator+=

; 571  : 				temp += dV * ((float)(j+dy) / WATER_STRIP_LEN);

	mov	eax, DWORD PTR _j$33664[ebp]
	add	eax, DWORD PTR _dy$33672[ebp]
	mov	DWORD PTR tv311[ebp], eax
	mov	DWORD PTR tv311[ebp+4], 0
	fild	QWORD PTR tv311[ebp]
	fdiv	QWORD PTR __real@403e000000000000
	fstp	DWORD PTR tv316[ebp]
	fld	DWORD PTR tv316[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR $T34045[ebp]
	push	ecx
	lea	ecx, DWORD PTR _dV$[ebp]
	call	??DVector@@QAE?AV0@M@Z			; Vector::operator*
	push	eax
	lea	ecx, DWORD PTR _temp$[ebp]
	call	??YVector@@QAEXAAV0@@Z			; Vector::operator+=

; 572  : 				glTexCoord2d((j+dy)*waterTile/WATER_STRIP_LEN, i*waterTile/WATER_STRIP_LEN);

	mov	eax, DWORD PTR _i$33668[ebp]
	mov	DWORD PTR tv322[ebp], eax
	mov	DWORD PTR tv322[ebp+4], 0
	fild	QWORD PTR tv322[ebp]
	fmul	DWORD PTR _waterTile$[ebp]
	fdiv	QWORD PTR __real@403e000000000000
	mov	esi, esp
	sub	esp, 8
	fstp	QWORD PTR [esp]
	mov	ecx, DWORD PTR _j$33664[ebp]
	add	ecx, DWORD PTR _dy$33672[ebp]
	mov	DWORD PTR tv327[ebp], ecx
	mov	DWORD PTR tv327[ebp+4], 0
	fild	QWORD PTR tv327[ebp]
	fmul	DWORD PTR _waterTile$[ebp]
	fdiv	QWORD PTR __real@403e000000000000
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	DWORD PTR __imp__glTexCoord2d@16
	cmp	esi, esp
	call	__RTC_CheckEsp

; 573  : 				glVertex3fv(temp.GetPtr());

	lea	ecx, DWORD PTR _temp$[ebp]
	call	?GetPtr@Vector@@QAEPAMXZ		; Vector::GetPtr
	mov	esi, esp
	push	eax
	call	DWORD PTR __imp__glVertex3fv@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 574  : 				//glVertex3f(temp.x, temp.y - (rand() % 2 - 1), temp.z); 
; 575  : 			}

	jmp	$LN11@RenderWate
$LN10@RenderWate:

; 576  : 		}

	jmp	$LN14@RenderWate
$LN13@RenderWate:

; 577  : 		glEnd();

	mov	esi, esp
	call	DWORD PTR __imp__glEnd@0
	cmp	esi, esp
	call	__RTC_CheckEsp

; 578  : 	}

	jmp	$LN17@RenderWate
$LN16@RenderWate:

; 579  : 
; 580  : 	glBlendFunc(GL_SRC_COLOR, GL_DST_COLOR);

	mov	esi, esp
	push	774					; 00000306H
	push	768					; 00000300H
	call	DWORD PTR __imp__glBlendFunc@8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 581  : 	glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);

	mov	esi, esp
	push	771					; 00000303H
	push	770					; 00000302H
	call	DWORD PTR __imp__glBlendFunc@8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 582  : 
; 583  : 	float anim = sys_Time*0.00003f;

	mov	eax, DWORD PTR ?sys_Time@@3KA		; sys_Time
	mov	DWORD PTR tv347[ebp], eax
	mov	DWORD PTR tv347[ebp+4], 0
	fild	QWORD PTR tv347[ebp]
	fmul	QWORD PTR __real@3eff751040000000
	fstp	DWORD PTR _anim$[ebp]

; 584  : 
; 585  : 	for (int j=0; j<WATER_STRIP_LEN; j++) {

	mov	DWORD PTR _j$33681[ebp], 0
	jmp	SHORT $LN9@RenderWate
$LN8@RenderWate:
	mov	eax, DWORD PTR _j$33681[ebp]
	add	eax, 1
	mov	DWORD PTR _j$33681[ebp], eax
$LN9@RenderWate:
	cmp	DWORD PTR _j$33681[ebp], 30		; 0000001eH
	jge	$LN7@RenderWate

; 586  : 		glBegin( GL_QUAD_STRIP );

	mov	esi, esp
	push	8
	call	DWORD PTR __imp__glBegin@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 587  : 		for (dword i=0; i<WATER_STRIP_LEN+1; i++) {

	mov	DWORD PTR _i$33685[ebp], 0
	jmp	SHORT $LN6@RenderWate
$LN5@RenderWate:
	mov	eax, DWORD PTR _i$33685[ebp]
	add	eax, 1
	mov	DWORD PTR _i$33685[ebp], eax
$LN6@RenderWate:
	cmp	DWORD PTR _i$33685[ebp], 31		; 0000001fH
	jae	$LN4@RenderWate

; 588  : 			for (sdword dy=1; dy>=0; dy--) {

	mov	DWORD PTR _dy$33689[ebp], 1
	jmp	SHORT $LN3@RenderWate
$LN2@RenderWate:
	mov	eax, DWORD PTR _dy$33689[ebp]
	sub	eax, 1
	mov	DWORD PTR _dy$33689[ebp], eax
$LN3@RenderWate:
	cmp	DWORD PTR _dy$33689[ebp], 0
	jl	$LN1@RenderWate

; 589  : 				temp = skyBoxVerts[4];

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 172				; 000000acH
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _temp$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _temp$[ebp+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR _temp$[ebp+8], eax

; 590  : 				temp += dU * ((float)i / WATER_STRIP_LEN);

	mov	eax, DWORD PTR _i$33685[ebp]
	mov	DWORD PTR tv367[ebp], eax
	mov	DWORD PTR tv367[ebp+4], 0
	fild	QWORD PTR tv367[ebp]
	fdiv	QWORD PTR __real@403e000000000000
	fstp	DWORD PTR tv372[ebp]
	fld	DWORD PTR tv372[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR $T34046[ebp]
	push	ecx
	lea	ecx, DWORD PTR _dU$[ebp]
	call	??DVector@@QAE?AV0@M@Z			; Vector::operator*
	push	eax
	lea	ecx, DWORD PTR _temp$[ebp]
	call	??YVector@@QAEXAAV0@@Z			; Vector::operator+=

; 591  : 				temp += dV * ((float)(j+dy) / WATER_STRIP_LEN);

	mov	eax, DWORD PTR _j$33681[ebp]
	add	eax, DWORD PTR _dy$33689[ebp]
	mov	DWORD PTR tv378[ebp], eax
	fild	DWORD PTR tv378[ebp]
	fdiv	QWORD PTR __real@403e000000000000
	fstp	DWORD PTR tv381[ebp]
	fld	DWORD PTR tv381[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR $T34047[ebp]
	push	ecx
	lea	ecx, DWORD PTR _dV$[ebp]
	call	??DVector@@QAE?AV0@M@Z			; Vector::operator*
	push	eax
	lea	ecx, DWORD PTR _temp$[ebp]
	call	??YVector@@QAEXAAV0@@Z			; Vector::operator+=

; 592  : 				glTexCoord2d(anim+((j+dy)*waterTile/WATER_STRIP_LEN), anim+(i*waterTile/WATER_STRIP_LEN));

	mov	eax, DWORD PTR _i$33685[ebp]
	mov	DWORD PTR tv387[ebp], eax
	mov	DWORD PTR tv387[ebp+4], 0
	fild	QWORD PTR tv387[ebp]
	fmul	DWORD PTR _waterTile$[ebp]
	fdiv	QWORD PTR __real@403e000000000000
	fadd	DWORD PTR _anim$[ebp]
	mov	esi, esp
	sub	esp, 8
	fstp	QWORD PTR [esp]
	mov	ecx, DWORD PTR _j$33681[ebp]
	add	ecx, DWORD PTR _dy$33689[ebp]
	mov	DWORD PTR tv393[ebp], ecx
	fild	DWORD PTR tv393[ebp]
	fmul	DWORD PTR _waterTile$[ebp]
	fdiv	QWORD PTR __real@403e000000000000
	fadd	DWORD PTR _anim$[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	DWORD PTR __imp__glTexCoord2d@16
	cmp	esi, esp
	call	__RTC_CheckEsp

; 593  : 				glVertex3fv(temp.GetPtr());

	lea	ecx, DWORD PTR _temp$[ebp]
	call	?GetPtr@Vector@@QAEPAMXZ		; Vector::GetPtr
	mov	esi, esp
	push	eax
	call	DWORD PTR __imp__glVertex3fv@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 594  : 				//glVertex3f(temp.x, temp.y - (rand() % 2 - 1), temp.z); 
; 595  : 			}

	jmp	$LN2@RenderWate
$LN1@RenderWate:

; 596  : 		}

	jmp	$LN5@RenderWate
$LN4@RenderWate:

; 597  : 		glEnd();

	mov	esi, esp
	call	DWORD PTR __imp__glEnd@0
	cmp	esi, esp
	call	__RTC_CheckEsp

; 598  : 	}

	jmp	$LN8@RenderWate
$LN7@RenderWate:

; 599  : 
; 600  : 	glDisable(GL_BLEND);

	mov	esi, esp
	push	3042					; 00000be2H
	call	DWORD PTR __imp__glDisable@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 601  : 
; 602  : 	glDisable(GL_TEXTURE_2D);

	mov	esi, esp
	push	3553					; 00000de1H
	call	DWORD PTR __imp__glDisable@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 603  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN25@RenderWate
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 496				; 000001f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN25@RenderWate:
	DD	3
	DD	$LN24@RenderWate
$LN24@RenderWate:
	DD	-40					; ffffffd8H
	DD	12					; 0000000cH
	DD	$LN21@RenderWate
	DD	-60					; ffffffc4H
	DD	12					; 0000000cH
	DD	$LN22@RenderWate
	DD	-80					; ffffffb0H
	DD	12					; 0000000cH
	DD	$LN23@RenderWate
$LN23@RenderWate:
	DB	100					; 00000064H
	DB	86					; 00000056H
	DB	0
$LN22@RenderWate:
	DB	100					; 00000064H
	DB	85					; 00000055H
	DB	0
$LN21@RenderWate:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
?RenderWater@Terrain@@AAEXXZ ENDP			; Terrain::RenderWater
_TEXT	ENDS
END
