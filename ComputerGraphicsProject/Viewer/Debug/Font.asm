; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	c:\Users\User\Desktop\ComputerGraphicsProject\Viewer\Font.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	?buf@@3PADA					; buf
PUBLIC	?Base@@3IA					; Base
_BSS	SEGMENT
?buf@@3PADA DB	0100H DUP (?)				; buf
?Base@@3IA DD	01H DUP (?)				; Base
_BSS	ENDS
PUBLIC	??_C@_0P@PPJHFMDD@Lucida?5Console?$AA@		; `string'
PUBLIC	?BuildFont@@YAXXZ				; BuildFont
EXTRN	__imp__DeleteObject@4:PROC
EXTRN	__imp__wglUseFontBitmapsA@16:PROC
EXTRN	__imp__SelectObject@8:PROC
EXTRN	?hDC@@3PAUHDC__@@A:DWORD			; hDC
EXTRN	__imp__CreateFontA@56:PROC
EXTRN	__imp__glGenLists@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT ??_C@_0P@PPJHFMDD@Lucida?5Console?$AA@
; File c:\users\user\desktop\computergraphicsproject\viewer\font.cpp
CONST	SEGMENT
??_C@_0P@PPJHFMDD@Lucida?5Console?$AA@ DB 'Lucida Console', 00H ; `string'
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT ?BuildFont@@YAXXZ
_TEXT	SEGMENT
_oldfont$ = -20						; size = 4
_font$ = -8						; size = 4
?BuildFont@@YAXXZ PROC					; BuildFont, COMDAT

; 9    : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 10   : 	HFONT	font;										// Windows Font ID
; 11   : 	HFONT	oldfont;									// Used For Good House Keeping
; 12   : 
; 13   : 	Base = glGenLists(96);								// Storage For 96 Characters

	mov	esi, esp
	push	96					; 00000060H
	call	DWORD PTR __imp__glGenLists@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ?Base@@3IA, eax		; Base

; 14   : 
; 15   : 	font = CreateFont(	-16,							// Height Of Font
; 16   : 						0,								// Width Of Font
; 17   : 						0,								// Angle Of Escapement
; 18   : 						0,								// Orientation Angle
; 19   : 						FW_DONTCARE,						// Font Weight
; 20   : 						FALSE,							// Italic
; 21   : 						FALSE,							// Underline
; 22   : 						FALSE,							// Strikeout
; 23   : 						ANSI_CHARSET,					// Character Set Identifier
; 24   : 						OUT_TT_PRECIS,					// Output Precision
; 25   : 						CLIP_DEFAULT_PRECIS,			// Clipping Precision
; 26   : 						ANTIALIASED_QUALITY,			// Output Quality
; 27   : 						FF_DONTCARE|DEFAULT_PITCH,		// Family And Pitch
; 28   : 						"Lucida Console");					// Font Name

	mov	esi, esp
	push	OFFSET ??_C@_0P@PPJHFMDD@Lucida?5Console?$AA@
	push	0
	push	4
	push	0
	push	4
	push	0
	push	0
	push	0
	push	0
	push	0
	push	0
	push	0
	push	0
	push	-16					; fffffff0H
	call	DWORD PTR __imp__CreateFontA@56
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _font$[ebp], eax

; 29   : 
; 30   : 	oldfont = (HFONT)SelectObject(hDC, font);           // Selects The Font We Want

	mov	esi, esp
	mov	eax, DWORD PTR _font$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?hDC@@3PAUHDC__@@A	; hDC
	push	ecx
	call	DWORD PTR __imp__SelectObject@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _oldfont$[ebp], eax

; 31   : 	wglUseFontBitmaps(hDC, 32, 96, Base);				// Builds 96 Characters Starting At Character 32

	mov	esi, esp
	mov	eax, DWORD PTR ?Base@@3IA		; Base
	push	eax
	push	96					; 00000060H
	push	32					; 00000020H
	mov	ecx, DWORD PTR ?hDC@@3PAUHDC__@@A	; hDC
	push	ecx
	call	DWORD PTR __imp__wglUseFontBitmapsA@16
	cmp	esi, esp
	call	__RTC_CheckEsp

; 32   : 	SelectObject(hDC, oldfont);							// Selects The Font We Want

	mov	esi, esp
	mov	eax, DWORD PTR _oldfont$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?hDC@@3PAUHDC__@@A	; hDC
	push	ecx
	call	DWORD PTR __imp__SelectObject@8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 33   : 	DeleteObject(font);									// Delete The Font

	mov	esi, esp
	mov	eax, DWORD PTR _font$[ebp]
	push	eax
	call	DWORD PTR __imp__DeleteObject@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 34   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?BuildFont@@YAXXZ ENDP					; BuildFont
_TEXT	ENDS
PUBLIC	?KillFont@@YAXXZ				; KillFont
EXTRN	__imp__glDeleteLists@8:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?KillFont@@YAXXZ
_TEXT	SEGMENT
?KillFont@@YAXXZ PROC					; KillFont, COMDAT

; 37   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 38   : 	glDeleteLists(Base, 96);							// Delete All 96 Characters

	mov	esi, esp
	push	96					; 00000060H
	mov	eax, DWORD PTR ?Base@@3IA		; Base
	push	eax
	call	DWORD PTR __imp__glDeleteLists@8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 39   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?KillFont@@YAXXZ ENDP					; KillFont
_TEXT	ENDS
PUBLIC	__real@3f800000
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	?Print2D@@YAXMMIPBDZZ				; Print2D
EXTRN	__imp__glPopMatrix@0:PROC
EXTRN	__imp__glCallLists@12:PROC
EXTRN	_strlen:PROC
EXTRN	__imp__glListBase@4:PROC
EXTRN	__imp__glRasterPos2f@8:PROC
EXTRN	__imp__glColor3f@12:PROC
EXTRN	__imp__glLoadIdentity@0:PROC
EXTRN	__imp__glPushMatrix@0:PROC
EXTRN	_vsprintf:PROC
EXTRN	__fltused:DWORD
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?Print2D@@YAXMMIPBDZZ
_TEXT	SEGMENT
_va$ = -8						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_rgba$ = 16						; size = 4
_Text$ = 20						; size = 4
?Print2D@@YAXMMIPBDZZ PROC				; Print2D, COMDAT

; 43   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 44   : 	va_list		va;									
; 45   : 	if (Text=="")									

	cmp	DWORD PTR _Text$[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
	jne	SHORT $LN1@Print2D

; 46   : 		return;										

	jmp	$LN2@Print2D
$LN1@Print2D:

; 47   : 
; 48   : 	va_start(va, Text);

	lea	eax, DWORD PTR _Text$[ebp+4]
	mov	DWORD PTR _va$[ebp], eax

; 49   : 	vsprintf(buf, Text, va);

	mov	eax, DWORD PTR _va$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Text$[ebp]
	push	ecx
	push	OFFSET ?buf@@3PADA			; buf
	call	_vsprintf
	add	esp, 12					; 0000000cH

; 50   : 	va_end(va);

	mov	DWORD PTR _va$[ebp], 0

; 51   : 	
; 52   : 	glPushMatrix();

	mov	esi, esp
	call	DWORD PTR __imp__glPushMatrix@0
	cmp	esi, esp
	call	__RTC_CheckEsp

; 53   : 	glLoadIdentity();

	mov	esi, esp
	call	DWORD PTR __imp__glLoadIdentity@0
	cmp	esi, esp
	call	__RTC_CheckEsp

; 54   : 	//glColor4ubv((unsigned char*) &rgba);
; 55   : 	glColor3f(1, 1, 1);

	mov	esi, esp
	push	ecx
	fld1
	fstp	DWORD PTR [esp]
	push	ecx
	fld1
	fstp	DWORD PTR [esp]
	push	ecx
	fld1
	fstp	DWORD PTR [esp]
	call	DWORD PTR __imp__glColor3f@12
	cmp	esi, esp
	call	__RTC_CheckEsp

; 56   : 	glRasterPos2f(x, y);

	mov	esi, esp
	push	ecx
	fld	DWORD PTR _y$[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _x$[ebp]
	fstp	DWORD PTR [esp]
	call	DWORD PTR __imp__glRasterPos2f@8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 57   : 	glListBase(Base-32);

	mov	eax, DWORD PTR ?Base@@3IA		; Base
	sub	eax, 32					; 00000020H
	mov	esi, esp
	push	eax
	call	DWORD PTR __imp__glListBase@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 58   : 	glCallLists((GLsizei)strlen(buf), GL_UNSIGNED_BYTE, buf);

	mov	esi, esp
	push	OFFSET ?buf@@3PADA			; buf
	push	5121					; 00001401H
	push	OFFSET ?buf@@3PADA			; buf
	call	_strlen
	add	esp, 4
	push	eax
	call	DWORD PTR __imp__glCallLists@12
	cmp	esi, esp
	call	__RTC_CheckEsp

; 59   : 	glPopMatrix();

	mov	esi, esp
	call	DWORD PTR __imp__glPopMatrix@0
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@Print2D:

; 60   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Print2D@@YAXMMIPBDZZ ENDP				; Print2D
_TEXT	ENDS
END
