; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	c:\Users\User\Desktop\ComputerGraphicsProject\Viewer\matrix.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	__real@00000000
PUBLIC	__real@3f800000
PUBLIC	?MakeIdentity@Matrix@@QAEXXZ			; Matrix::MakeIdentity
EXTRN	__fltused:DWORD
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT __real@00000000
; File c:\users\user\desktop\computergraphicsproject\viewer\matrix.cpp
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT ?MakeIdentity@Matrix@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?MakeIdentity@Matrix@@QAEXXZ PROC			; Matrix::MakeIdentity, COMDAT
; _this$ = ecx

; 4    : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 5    : 	p[0] = 1;

	mov	eax, DWORD PTR _this$[ebp]
	fld1
	fstp	DWORD PTR [eax]

; 6    : 	p[1] = 0;

	mov	eax, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [eax+4]

; 7    : 	p[2] = 0;

	mov	eax, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [eax+8]

; 8    : 	p[3] = 0;

	mov	eax, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [eax+12]

; 9    : 	p[4] = 1;

	mov	eax, DWORD PTR _this$[ebp]
	fld1
	fstp	DWORD PTR [eax+16]

; 10   : 	p[5] = 0;

	mov	eax, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [eax+20]

; 11   : 	p[6] = 0;

	mov	eax, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [eax+24]

; 12   : 	p[7] = 0;

	mov	eax, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [eax+28]

; 13   : 	p[8] = 1;

	mov	eax, DWORD PTR _this$[ebp]
	fld1
	fstp	DWORD PTR [eax+32]

; 14   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?MakeIdentity@Matrix@@QAEXXZ ENDP			; Matrix::MakeIdentity
_TEXT	ENDS
PUBLIC	??0Matrix@@QAE@M@Z				; Matrix::Matrix
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0Matrix@@QAE@M@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_a$ = 8							; size = 4
??0Matrix@@QAE@M@Z PROC					; Matrix::Matrix, COMDAT
; _this$ = ecx

; 17   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 18   : 	p[0] = a;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _a$[ebp]
	fstp	DWORD PTR [eax]

; 19   : 	p[1] = 0;

	mov	eax, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [eax+4]

; 20   : 	p[2] = 0;

	mov	eax, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [eax+8]

; 21   : 	p[3] = 0;

	mov	eax, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [eax+12]

; 22   : 	p[4] = a;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _a$[ebp]
	fstp	DWORD PTR [eax+16]

; 23   : 	p[5] = 0;

	mov	eax, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [eax+20]

; 24   : 	p[6] = 0;

	mov	eax, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [eax+24]

; 25   : 	p[7] = 0;

	mov	eax, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [eax+28]

; 26   : 	p[8] = a;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _a$[ebp]
	fstp	DWORD PTR [eax+32]

; 27   : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0Matrix@@QAE@M@Z ENDP					; Matrix::Matrix
_TEXT	ENDS
PUBLIC	??0Matrix@@QAE@AAV0@@Z				; Matrix::Matrix
PUBLIC	??0Matrix@@QAE@XZ				; Matrix::Matrix
PUBLIC	??DMatrix@@QAE?AV0@AAV0@@Z			; Matrix::operator*
EXTRN	__RTC_CheckEsp:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??DMatrix@@QAE?AV0@AAV0@@Z
_TEXT	SEGMENT
_temp$ = -52						; size = 36
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
_m$ = 12						; size = 4
??DMatrix@@QAE?AV0@AAV0@@Z PROC				; Matrix::operator*, COMDAT
; _this$ = ecx

; 30   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 248				; 000000f8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-248]
	mov	ecx, 62					; 0000003eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 31   : 	Matrix temp;

	lea	ecx, DWORD PTR _temp$[ebp]
	call	??0Matrix@@QAE@XZ			; Matrix::Matrix

; 32   : 
; 33   : 	temp.p[_XX] = p[_XX]*m.p[_XX]+p[_XY]*m.p[_YX]+p[_XZ]*m.p[_ZX];

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _m$[ebp]
	fmul	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _m$[ebp]
	fmul	DWORD PTR [eax+12]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _m$[ebp]
	fmul	DWORD PTR [edx+24]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR _temp$[ebp]

; 34   : 	temp.p[_YX] = p[_YX]*m.p[_XX]+p[_YY]*m.p[_YX]+p[_YZ]*m.p[_ZX];

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+12]
	mov	ecx, DWORD PTR _m$[ebp]
	fmul	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+16]
	mov	eax, DWORD PTR _m$[ebp]
	fmul	DWORD PTR [eax+12]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+20]
	mov	edx, DWORD PTR _m$[ebp]
	fmul	DWORD PTR [edx+24]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR _temp$[ebp+12]

; 35   : 	temp.p[_ZX] = p[_ZX]*m.p[_XX]+p[_ZY]*m.p[_YX]+p[_ZZ]*m.p[_ZX];

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+24]
	mov	ecx, DWORD PTR _m$[ebp]
	fmul	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+28]
	mov	eax, DWORD PTR _m$[ebp]
	fmul	DWORD PTR [eax+12]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+32]
	mov	edx, DWORD PTR _m$[ebp]
	fmul	DWORD PTR [edx+24]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR _temp$[ebp+24]

; 36   : 
; 37   : 	temp.p[_XY] = p[_XX]*m.p[_XY]+p[_XY]*m.p[_YY]+p[_XZ]*m.p[_ZY];

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _m$[ebp]
	fmul	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _m$[ebp]
	fmul	DWORD PTR [eax+16]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _m$[ebp]
	fmul	DWORD PTR [edx+28]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR _temp$[ebp+4]

; 38   : 	temp.p[_YY] = p[_YX]*m.p[_XY]+p[_YY]*m.p[_YY]+p[_YZ]*m.p[_ZY];

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+12]
	mov	ecx, DWORD PTR _m$[ebp]
	fmul	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+16]
	mov	eax, DWORD PTR _m$[ebp]
	fmul	DWORD PTR [eax+16]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+20]
	mov	edx, DWORD PTR _m$[ebp]
	fmul	DWORD PTR [edx+28]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR _temp$[ebp+16]

; 39   : 	temp.p[_ZY] = p[_ZX]*m.p[_XY]+p[_ZY]*m.p[_YY]+p[_ZZ]*m.p[_ZY];

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+24]
	mov	ecx, DWORD PTR _m$[ebp]
	fmul	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+28]
	mov	eax, DWORD PTR _m$[ebp]
	fmul	DWORD PTR [eax+16]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+32]
	mov	edx, DWORD PTR _m$[ebp]
	fmul	DWORD PTR [edx+28]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR _temp$[ebp+28]

; 40   : 
; 41   : 	temp.p[_XZ] = p[_XX]*m.p[_XZ]+p[_XY]*m.p[_YZ]+p[_XZ]*m.p[_ZZ];

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _m$[ebp]
	fmul	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _m$[ebp]
	fmul	DWORD PTR [eax+20]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _m$[ebp]
	fmul	DWORD PTR [edx+32]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR _temp$[ebp+8]

; 42   : 	temp.p[_YZ] = p[_YX]*m.p[_XZ]+p[_YY]*m.p[_YZ]+p[_YZ]*m.p[_ZZ];

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+12]
	mov	ecx, DWORD PTR _m$[ebp]
	fmul	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+16]
	mov	eax, DWORD PTR _m$[ebp]
	fmul	DWORD PTR [eax+20]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+20]
	mov	edx, DWORD PTR _m$[ebp]
	fmul	DWORD PTR [edx+32]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR _temp$[ebp+20]

; 43   : 	temp.p[_ZZ] = p[_ZX]*m.p[_XZ]+p[_ZY]*m.p[_YZ]+p[_ZZ]*m.p[_ZZ];

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+24]
	mov	ecx, DWORD PTR _m$[ebp]
	fmul	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+28]
	mov	eax, DWORD PTR _m$[ebp]
	fmul	DWORD PTR [eax+20]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+32]
	mov	edx, DWORD PTR _m$[ebp]
	fmul	DWORD PTR [edx+32]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR _temp$[ebp+32]

; 44   : 
; 45   : 	return temp;

	lea	eax, DWORD PTR _temp$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Matrix@@QAE@AAV0@@Z			; Matrix::Matrix
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 46   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@operator
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 248				; 000000f8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	2
$LN5@operator:
	DD	1
	DD	$LN4@operator
$LN4@operator:
	DD	-52					; ffffffccH
	DD	36					; 00000024H
	DD	$LN3@operator
$LN3@operator:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
??DMatrix@@QAE?AV0@AAV0@@Z ENDP				; Matrix::operator*
_TEXT	ENDS
EXTRN	_memset:PROC
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\user\desktop\computergraphicsproject\viewer\matrix.h
;	COMDAT ??0Matrix@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0Matrix@@QAE@XZ PROC					; Matrix::Matrix, COMDAT
; _this$ = ecx

; 23   : 	Matrix()								{ memset(p,0,sizeof(float)*9); }					

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	36					; 00000024H
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0Matrix@@QAE@XZ ENDP					; Matrix::Matrix
_TEXT	ENDS
EXTRN	_memcpy:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0Matrix@@QAE@AAV0@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_m$ = 8							; size = 4
??0Matrix@@QAE@AAV0@@Z PROC				; Matrix::Matrix, COMDAT
; _this$ = ecx

; 28   : 	Matrix(Matrix &m)						{ memcpy(p, m.p, sizeof(float)*9); }	

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	36					; 00000024H
	mov	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0Matrix@@QAE@AAV0@@Z ENDP				; Matrix::Matrix
_TEXT	ENDS
PUBLIC	??0Vector@@QAE@AAV0@@Z				; Vector::Vector
PUBLIC	??0Vector@@QAE@XZ				; Vector::Vector
PUBLIC	??DMatrix@@QAE?AVVector@@AAV1@@Z		; Matrix::operator*
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\user\desktop\computergraphicsproject\viewer\matrix.cpp
;	COMDAT ??DMatrix@@QAE?AVVector@@AAV1@@Z
_TEXT	SEGMENT
_temp$ = -28						; size = 12
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
_v$ = 12						; size = 4
??DMatrix@@QAE?AVVector@@AAV1@@Z PROC			; Matrix::operator*, COMDAT
; _this$ = ecx

; 49   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 224				; 000000e0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-224]
	mov	ecx, 56					; 00000038H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 50   : 	Vector	temp;

	lea	ecx, DWORD PTR _temp$[ebp]
	call	??0Vector@@QAE@XZ			; Vector::Vector

; 51   : 
; 52   : 	temp.x = p[_XX] * v.x + p[_XY] * v.y + p[_XZ] * v.z;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _v$[ebp]
	fmul	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _v$[ebp]
	fmul	DWORD PTR [eax+4]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _v$[ebp]
	fmul	DWORD PTR [edx+8]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR _temp$[ebp]

; 53   : 	temp.y = p[_YX] * v.x + p[_YY] * v.y + p[_YZ] * v.z;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+12]
	mov	ecx, DWORD PTR _v$[ebp]
	fmul	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+16]
	mov	eax, DWORD PTR _v$[ebp]
	fmul	DWORD PTR [eax+4]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+20]
	mov	edx, DWORD PTR _v$[ebp]
	fmul	DWORD PTR [edx+8]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR _temp$[ebp+4]

; 54   : 	temp.z = p[_ZX] * v.x + p[_ZY] * v.y + p[_ZZ] * v.z;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+24]
	mov	ecx, DWORD PTR _v$[ebp]
	fmul	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+28]
	mov	eax, DWORD PTR _v$[ebp]
	fmul	DWORD PTR [eax+4]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+32]
	mov	edx, DWORD PTR _v$[ebp]
	fmul	DWORD PTR [edx+8]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR _temp$[ebp+8]

; 55   : 
; 56   : 	return temp;

	lea	eax, DWORD PTR _temp$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector@@QAE@AAV0@@Z			; Vector::Vector
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 57   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@operator@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 224				; 000000e0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	2
$LN5@operator@2:
	DD	1
	DD	$LN4@operator@2
$LN4@operator@2:
	DD	-28					; ffffffe4H
	DD	12					; 0000000cH
	DD	$LN3@operator@2
$LN3@operator@2:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
??DMatrix@@QAE?AVVector@@AAV1@@Z ENDP			; Matrix::operator*
_TEXT	ENDS
EXTRN	?Set@Vector@@QAEXMMM@Z:PROC			; Vector::Set
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\user\desktop\computergraphicsproject\viewer\vector.h
;	COMDAT ??0Vector@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0Vector@@QAE@XZ PROC					; Vector::Vector, COMDAT
; _this$ = ecx

; 20   : 	Vector()								{ Set(0, 0, 0); }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector@@QAEXMMM@Z			; Vector::Set
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0Vector@@QAE@XZ ENDP					; Vector::Vector
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??0Vector@@QAE@AAV0@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_v$ = 8							; size = 4
??0Vector@@QAE@AAV0@@Z PROC				; Vector::Vector, COMDAT
; _this$ = ecx

; 22   : 	Vector(Vector &v)						{ Set(v.x, v.y, v.z); }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _v$[ebp]
	push	ecx
	fld	DWORD PTR [eax+8]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	fld	DWORD PTR [ecx+4]
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _v$[ebp]
	push	ecx
	fld	DWORD PTR [edx]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector@@QAEXMMM@Z			; Vector::Set
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0Vector@@QAE@AAV0@@Z ENDP				; Vector::Vector
_TEXT	ENDS
PUBLIC	??DMatrix@@QAE?AV0@M@Z				; Matrix::operator*
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\user\desktop\computergraphicsproject\viewer\matrix.cpp
;	COMDAT ??DMatrix@@QAE?AV0@M@Z
_TEXT	SEGMENT
_i$32919 = -64						; size = 4
_temp$ = -52						; size = 36
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
_f$ = 12						; size = 4
??DMatrix@@QAE?AV0@M@Z PROC				; Matrix::operator*, COMDAT
; _this$ = ecx

; 60   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 260				; 00000104H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-260]
	mov	ecx, 65					; 00000041H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 61   : 	Matrix temp;

	lea	ecx, DWORD PTR _temp$[ebp]
	call	??0Matrix@@QAE@XZ			; Matrix::Matrix

; 62   : 
; 63   : 	for (int i=0; i<9; i++)

	mov	DWORD PTR _i$32919[ebp], 0
	jmp	SHORT $LN3@operator@3
$LN2@operator@3:
	mov	eax, DWORD PTR _i$32919[ebp]
	add	eax, 1
	mov	DWORD PTR _i$32919[ebp], eax
$LN3@operator@3:
	cmp	DWORD PTR _i$32919[ebp], 9
	jge	SHORT $LN1@operator@3

; 64   : 		temp.p[i] = p[i] * f;

	mov	eax, DWORD PTR _i$32919[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+eax*4]
	fmul	DWORD PTR _f$[ebp]
	mov	edx, DWORD PTR _i$32919[ebp]
	fstp	DWORD PTR _temp$[ebp+edx*4]
	jmp	SHORT $LN2@operator@3
$LN1@operator@3:

; 65   : 
; 66   : 	return temp;

	lea	eax, DWORD PTR _temp$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Matrix@@QAE@AAV0@@Z			; Matrix::Matrix
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 67   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@operator@3
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 260				; 00000104H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	2
$LN8@operator@3:
	DD	1
	DD	$LN7@operator@3
$LN7@operator@3:
	DD	-52					; ffffffccH
	DD	36					; 00000024H
	DD	$LN6@operator@3
$LN6@operator@3:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
??DMatrix@@QAE?AV0@M@Z ENDP				; Matrix::operator*
_TEXT	ENDS
PUBLIC	??XMatrix@@QAEXAAV0@@Z				; Matrix::operator*=
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??XMatrix@@QAEXAAV0@@Z
_TEXT	SEGMENT
$T33186 = -244						; size = 36
_this$ = -8						; size = 4
_m$ = 8							; size = 4
??XMatrix@@QAEXAAV0@@Z PROC				; Matrix::operator*=, COMDAT
; _this$ = ecx

; 71   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 248				; 000000f8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-248]
	mov	ecx, 62					; 0000003eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 72   : 	*this = *this * m;

	mov	eax, DWORD PTR _m$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T33186[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??DMatrix@@QAE?AV0@AAV0@@Z		; Matrix::operator*
	mov	ecx, 9
	mov	esi, eax
	mov	edi, DWORD PTR _this$[ebp]
	rep movsd

; 73   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 248				; 000000f8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??XMatrix@@QAEXAAV0@@Z ENDP				; Matrix::operator*=
_TEXT	ENDS
PUBLIC	??XMatrix@@QAEXM@Z				; Matrix::operator*=
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??XMatrix@@QAEXM@Z
_TEXT	SEGMENT
$T33189 = -244						; size = 36
_this$ = -8						; size = 4
_f$ = 8							; size = 4
??XMatrix@@QAEXM@Z PROC					; Matrix::operator*=, COMDAT
; _this$ = ecx

; 77   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 248				; 000000f8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-248]
	mov	ecx, 62					; 0000003eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 78   : 	*this = *this * f;

	push	ecx
	fld	DWORD PTR _f$[ebp]
	fstp	DWORD PTR [esp]
	lea	eax, DWORD PTR $T33189[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??DMatrix@@QAE?AV0@M@Z			; Matrix::operator*
	mov	ecx, 9
	mov	esi, eax
	mov	edi, DWORD PTR _this$[ebp]
	rep movsd

; 79   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 248				; 000000f8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??XMatrix@@QAEXM@Z ENDP					; Matrix::operator*=
_TEXT	ENDS
PUBLIC	?Det@Matrix@@QAEMXZ				; Matrix::Det
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?Det@Matrix@@QAEMXZ
_TEXT	SEGMENT
tv161 = -208						; size = 4
_this$ = -8						; size = 4
?Det@Matrix@@QAEMXZ PROC				; Matrix::Det, COMDAT
; _this$ = ecx

; 82   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 83   :   return    p[_XX] * (p[_YY] * p[_ZZ] - p[_YZ] * p[_ZY])
; 84   :           - p[_YX] * (p[_XY] * p[_ZZ] - p[_XZ] * p[_ZY])
; 85   :           + p[_ZX] * (p[_XY] * p[_YZ] - p[_XZ] * p[_YY]);

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+16]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx+32]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+20]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+28]
	fsubp	ST(1), ST(0)
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+32]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [edx+28]
	fsubp	ST(1), ST(0)
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+12]
	fsubp	ST(1), ST(0)
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [edx+20]
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx+16]
	fsubp	ST(1), ST(0)
	mov	edx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [edx+24]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR tv161[ebp]
	fld	DWORD PTR tv161[ebp]

; 86   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Det@Matrix@@QAEMXZ ENDP				; Matrix::Det
_TEXT	ENDS
PUBLIC	?cos@@YAMM@Z					; cos
PUBLIC	?sin@@YAMM@Z					; sin
PUBLIC	?AddRotationX@Matrix@@QAEXM@Z			; Matrix::AddRotationX
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?AddRotationX@Matrix@@QAEXM@Z
_TEXT	SEGMENT
_t$ = -44						; size = 4
_cosa$ = -32						; size = 4
_sina$ = -20						; size = 4
_this$ = -8						; size = 4
_angle$ = 8						; size = 4
?AddRotationX@Matrix@@QAEXM@Z PROC			; Matrix::AddRotationX, COMDAT
; _this$ = ecx

; 89   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 90   : 	float sina = sin(angle);

	push	ecx
	fld	DWORD PTR _angle$[ebp]
	fstp	DWORD PTR [esp]
	call	?sin@@YAMM@Z				; sin
	add	esp, 4
	fstp	DWORD PTR _sina$[ebp]

; 91   : 	float cosa = cos(angle);

	push	ecx
	fld	DWORD PTR _angle$[ebp]
	fstp	DWORD PTR [esp]
	call	?cos@@YAMM@Z				; cos
	add	esp, 4
	fstp	DWORD PTR _cosa$[ebp]

; 92   : 	float t;
; 93   : 
; 94   : 	t = p[3];

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+12]
	fstp	DWORD PTR _t$[ebp]

; 95   : 	p[3] = t*cosa - p[6]*sina;

	fld	DWORD PTR _t$[ebp]
	fmul	DWORD PTR _cosa$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+24]
	fmul	DWORD PTR _sina$[ebp]
	fsubp	ST(1), ST(0)
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+12]

; 96   : 	p[6] = p[6]*cosa + t*sina;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+24]
	fmul	DWORD PTR _cosa$[ebp]
	fld	DWORD PTR _t$[ebp]
	fmul	DWORD PTR _sina$[ebp]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+24]

; 97   : 	t = p[4];

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+16]
	fstp	DWORD PTR _t$[ebp]

; 98   : 	p[4] = t*cosa - p[7]*sina;

	fld	DWORD PTR _t$[ebp]
	fmul	DWORD PTR _cosa$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+28]
	fmul	DWORD PTR _sina$[ebp]
	fsubp	ST(1), ST(0)
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+16]

; 99   : 	p[7] = p[7]*cosa + t*sina;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+28]
	fmul	DWORD PTR _cosa$[ebp]
	fld	DWORD PTR _t$[ebp]
	fmul	DWORD PTR _sina$[ebp]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+28]

; 100  : 	t = p[5];

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+20]
	fstp	DWORD PTR _t$[ebp]

; 101  : 	p[5] = t*cosa - p[8]*sina;

	fld	DWORD PTR _t$[ebp]
	fmul	DWORD PTR _cosa$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+32]
	fmul	DWORD PTR _sina$[ebp]
	fsubp	ST(1), ST(0)
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+20]

; 102  : 	p[8] = p[8]*cosa + t*sina;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+32]
	fmul	DWORD PTR _cosa$[ebp]
	fld	DWORD PTR _t$[ebp]
	fmul	DWORD PTR _sina$[ebp]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+32]

; 103  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?AddRotationX@Matrix@@QAEXM@Z ENDP			; Matrix::AddRotationX
_TEXT	ENDS
PUBLIC	_cosf
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\math.h
;	COMDAT ?cos@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?cos@@YAMM@Z PROC					; cos, COMDAT

; 504  :         {return (cosf(_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	push	ecx
	fld	DWORD PTR __X$[ebp]
	fstp	DWORD PTR [esp]
	call	_cosf
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?cos@@YAMM@Z ENDP					; cos
_TEXT	ENDS
EXTRN	_cos:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _cosf
_TEXT	SEGMENT
tv73 = -196						; size = 4
__X$ = 8						; size = 4
_cosf	PROC						; COMDAT

; 399  :         {return ((float)cos((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	fld	DWORD PTR __X$[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	_cos
	add	esp, 8
	fstp	DWORD PTR tv73[ebp]
	fld	DWORD PTR tv73[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_cosf	ENDP
_TEXT	ENDS
PUBLIC	_sinf
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?sin@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?sin@@YAMM@Z PROC					; sin, COMDAT

; 530  :         {return (sinf(_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	push	ecx
	fld	DWORD PTR __X$[ebp]
	fstp	DWORD PTR [esp]
	call	_sinf
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?sin@@YAMM@Z ENDP					; sin
_TEXT	ENDS
EXTRN	_sin:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _sinf
_TEXT	SEGMENT
tv73 = -196						; size = 4
__X$ = 8						; size = 4
_sinf	PROC						; COMDAT

; 419  :         {return ((float)sin((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	fld	DWORD PTR __X$[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	_sin
	add	esp, 8
	fstp	DWORD PTR tv73[ebp]
	fld	DWORD PTR tv73[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_sinf	ENDP
_TEXT	ENDS
PUBLIC	?AddRotationY@Matrix@@QAEXM@Z			; Matrix::AddRotationY
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\user\desktop\computergraphicsproject\viewer\matrix.cpp
;	COMDAT ?AddRotationY@Matrix@@QAEXM@Z
_TEXT	SEGMENT
_t$ = -44						; size = 4
_cosa$ = -32						; size = 4
_sina$ = -20						; size = 4
_this$ = -8						; size = 4
_angle$ = 8						; size = 4
?AddRotationY@Matrix@@QAEXM@Z PROC			; Matrix::AddRotationY, COMDAT
; _this$ = ecx

; 106  : {	

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 107  : 	float sina = sin(angle);

	push	ecx
	fld	DWORD PTR _angle$[ebp]
	fstp	DWORD PTR [esp]
	call	?sin@@YAMM@Z				; sin
	add	esp, 4
	fstp	DWORD PTR _sina$[ebp]

; 108  : 	float cosa = cos(angle);

	push	ecx
	fld	DWORD PTR _angle$[ebp]
	fstp	DWORD PTR [esp]
	call	?cos@@YAMM@Z				; cos
	add	esp, 4
	fstp	DWORD PTR _cosa$[ebp]

; 109  : 	float t;
; 110  : 
; 111  : 	t = p[0];

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	fstp	DWORD PTR _t$[ebp]

; 112  : 	p[0] = t*cosa - p[6]*sina;

	fld	DWORD PTR _t$[ebp]
	fmul	DWORD PTR _cosa$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+24]
	fmul	DWORD PTR _sina$[ebp]
	fsubp	ST(1), ST(0)
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx]

; 113  : 	p[6] = p[6]*cosa + t*sina;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+24]
	fmul	DWORD PTR _cosa$[ebp]
	fld	DWORD PTR _t$[ebp]
	fmul	DWORD PTR _sina$[ebp]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+24]

; 114  : 	t = p[1];

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	fstp	DWORD PTR _t$[ebp]

; 115  : 	p[1] = t*cosa - p[7]*sina;

	fld	DWORD PTR _t$[ebp]
	fmul	DWORD PTR _cosa$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+28]
	fmul	DWORD PTR _sina$[ebp]
	fsubp	ST(1), ST(0)
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+4]

; 116  : 	p[7] = p[7]*cosa + t*sina;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+28]
	fmul	DWORD PTR _cosa$[ebp]
	fld	DWORD PTR _t$[ebp]
	fmul	DWORD PTR _sina$[ebp]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+28]

; 117  : 	t = p[2];

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	fstp	DWORD PTR _t$[ebp]

; 118  : 	p[2] = t*cosa - p[8]*sina;

	fld	DWORD PTR _t$[ebp]
	fmul	DWORD PTR _cosa$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+32]
	fmul	DWORD PTR _sina$[ebp]
	fsubp	ST(1), ST(0)
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+8]

; 119  : 	p[8] = p[8]*cosa + t*sina;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+32]
	fmul	DWORD PTR _cosa$[ebp]
	fld	DWORD PTR _t$[ebp]
	fmul	DWORD PTR _sina$[ebp]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+32]

; 120  : 
; 121  : 	/*float sina = sin(angle);
; 122  : 	float cosa = cos(angle);
; 123  : 	float t[3];
; 124  : 	t[0] = p[0]; t[1] = p[1]; t[2] = p[2];
; 125  : 
; 126  : 	p[0] =  cosa*t[0] + sina*p[6];
; 127  : 	p[1] =  cosa*t[1] + sina*p[7];	
; 128  : 	p[2] =  cosa*t[2] + sina*p[8];	
; 129  : 
; 130  : 	p[6] = -sina*t[0] + cosa*p[6];
; 131  : 	p[7] = -sina*t[1] + cosa*p[7];	
; 132  : 	p[8] = -sina*t[2] + cosa*p[8];	*/
; 133  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?AddRotationY@Matrix@@QAEXM@Z ENDP			; Matrix::AddRotationY
_TEXT	ENDS
PUBLIC	?AddRotationZ@Matrix@@QAEXM@Z			; Matrix::AddRotationZ
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?AddRotationZ@Matrix@@QAEXM@Z
_TEXT	SEGMENT
_t$ = -44						; size = 4
_cosa$ = -32						; size = 4
_sina$ = -20						; size = 4
_this$ = -8						; size = 4
_angle$ = 8						; size = 4
?AddRotationZ@Matrix@@QAEXM@Z PROC			; Matrix::AddRotationZ, COMDAT
; _this$ = ecx

; 136  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 137  : 	float sina = sin(angle);

	push	ecx
	fld	DWORD PTR _angle$[ebp]
	fstp	DWORD PTR [esp]
	call	?sin@@YAMM@Z				; sin
	add	esp, 4
	fstp	DWORD PTR _sina$[ebp]

; 138  : 	float cosa = cos(angle);

	push	ecx
	fld	DWORD PTR _angle$[ebp]
	fstp	DWORD PTR [esp]
	call	?cos@@YAMM@Z				; cos
	add	esp, 4
	fstp	DWORD PTR _cosa$[ebp]

; 139  : 	float t;
; 140  : 
; 141  : 	t = p[0];

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	fstp	DWORD PTR _t$[ebp]

; 142  : 	p[0] = t*cosa - p[3]*sina;

	fld	DWORD PTR _t$[ebp]
	fmul	DWORD PTR _cosa$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+12]
	fmul	DWORD PTR _sina$[ebp]
	fsubp	ST(1), ST(0)
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx]

; 143  : 	p[3] = p[3]*cosa + t*sina;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+12]
	fmul	DWORD PTR _cosa$[ebp]
	fld	DWORD PTR _t$[ebp]
	fmul	DWORD PTR _sina$[ebp]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+12]

; 144  : 	t = p[1];

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	fstp	DWORD PTR _t$[ebp]

; 145  : 	p[1] = t*cosa - p[4]*sina;

	fld	DWORD PTR _t$[ebp]
	fmul	DWORD PTR _cosa$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+16]
	fmul	DWORD PTR _sina$[ebp]
	fsubp	ST(1), ST(0)
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+4]

; 146  : 	p[4] = p[4]*cosa + t*sina;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+16]
	fmul	DWORD PTR _cosa$[ebp]
	fld	DWORD PTR _t$[ebp]
	fmul	DWORD PTR _sina$[ebp]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+16]

; 147  : 	t = p[2];

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	fstp	DWORD PTR _t$[ebp]

; 148  : 	p[2] = t*cosa - p[5]*sina;

	fld	DWORD PTR _t$[ebp]
	fmul	DWORD PTR _cosa$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+20]
	fmul	DWORD PTR _sina$[ebp]
	fsubp	ST(1), ST(0)
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+8]

; 149  : 	p[5] = p[5]*cosa + t*sina;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+20]
	fmul	DWORD PTR _cosa$[ebp]
	fld	DWORD PTR _t$[ebp]
	fmul	DWORD PTR _sina$[ebp]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+20]

; 150  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?AddRotationZ@Matrix@@QAEXM@Z ENDP			; Matrix::AddRotationZ
_TEXT	ENDS
PUBLIC	__real@3ff0000000000000
PUBLIC	??0Matrix@@QAE@MAAVVector@@@Z			; Matrix::Matrix
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ??0Matrix@@QAE@MAAVVector@@@Z
_TEXT	SEGMENT
_one_cosa$ = -44					; size = 4
_cosa$ = -32						; size = 4
_sina$ = -20						; size = 4
_this$ = -8						; size = 4
_angle$ = 8						; size = 4
_v$ = 12						; size = 4
??0Matrix@@QAE@MAAVVector@@@Z PROC			; Matrix::Matrix, COMDAT
; _this$ = ecx

; 153  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 154  : 	float sina = sin(angle);

	push	ecx
	fld	DWORD PTR _angle$[ebp]
	fstp	DWORD PTR [esp]
	call	?sin@@YAMM@Z				; sin
	add	esp, 4
	fstp	DWORD PTR _sina$[ebp]

; 155  : 	float cosa = cos(angle);

	push	ecx
	fld	DWORD PTR _angle$[ebp]
	fstp	DWORD PTR [esp]
	call	?cos@@YAMM@Z				; cos
	add	esp, 4
	fstp	DWORD PTR _cosa$[ebp]

; 156  : 	float one_cosa = 1 - cosa;

	fld	DWORD PTR _cosa$[ebp]
	fld1
	fsubrp	ST(1), ST(0)
	fstp	DWORD PTR _one_cosa$[ebp]

; 157  : 
; 158  : 	p[0] = cosa + one_cosa*v.x*v.x;

	fld	DWORD PTR _one_cosa$[ebp]
	mov	eax, DWORD PTR _v$[ebp]
	fmul	DWORD PTR [eax]
	mov	ecx, DWORD PTR _v$[ebp]
	fmul	DWORD PTR [ecx]
	fadd	DWORD PTR _cosa$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx]

; 159  : 	p[1] = one_cosa*v.x*v.y - sina*v.z;

	fld	DWORD PTR _one_cosa$[ebp]
	mov	eax, DWORD PTR _v$[ebp]
	fmul	DWORD PTR [eax]
	mov	ecx, DWORD PTR _v$[ebp]
	fmul	DWORD PTR [ecx+4]
	fld	DWORD PTR _sina$[ebp]
	mov	edx, DWORD PTR _v$[ebp]
	fmul	DWORD PTR [edx+8]
	fsubp	ST(1), ST(0)
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+4]

; 160  : 	p[2] = one_cosa*v.x*v.z + sina*v.y;

	fld	DWORD PTR _one_cosa$[ebp]
	mov	eax, DWORD PTR _v$[ebp]
	fmul	DWORD PTR [eax]
	mov	ecx, DWORD PTR _v$[ebp]
	fmul	DWORD PTR [ecx+8]
	fld	DWORD PTR _sina$[ebp]
	mov	edx, DWORD PTR _v$[ebp]
	fmul	DWORD PTR [edx+4]
	faddp	ST(1), ST(0)
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+8]

; 161  : 	p[3] = one_cosa*v.y*v.x + sina*v.z;

	fld	DWORD PTR _one_cosa$[ebp]
	mov	eax, DWORD PTR _v$[ebp]
	fmul	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _v$[ebp]
	fmul	DWORD PTR [ecx]
	fld	DWORD PTR _sina$[ebp]
	mov	edx, DWORD PTR _v$[ebp]
	fmul	DWORD PTR [edx+8]
	faddp	ST(1), ST(0)
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+12]

; 162  : 	p[4] = cosa + one_cosa*v.y*v.y;

	fld	DWORD PTR _one_cosa$[ebp]
	mov	eax, DWORD PTR _v$[ebp]
	fmul	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _v$[ebp]
	fmul	DWORD PTR [ecx+4]
	fadd	DWORD PTR _cosa$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+16]

; 163  : 	p[5] = one_cosa*v.y*v.z - sina*v.x;

	fld	DWORD PTR _one_cosa$[ebp]
	mov	eax, DWORD PTR _v$[ebp]
	fmul	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _v$[ebp]
	fmul	DWORD PTR [ecx+8]
	fld	DWORD PTR _sina$[ebp]
	mov	edx, DWORD PTR _v$[ebp]
	fmul	DWORD PTR [edx]
	fsubp	ST(1), ST(0)
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+20]

; 164  : 	p[6] = one_cosa*v.z*v.x - sina*v.y;

	fld	DWORD PTR _one_cosa$[ebp]
	mov	eax, DWORD PTR _v$[ebp]
	fmul	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _v$[ebp]
	fmul	DWORD PTR [ecx]
	fld	DWORD PTR _sina$[ebp]
	mov	edx, DWORD PTR _v$[ebp]
	fmul	DWORD PTR [edx+4]
	fsubp	ST(1), ST(0)
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+24]

; 165  : 	p[7] = one_cosa*v.z*v.y + sina*v.x;

	fld	DWORD PTR _one_cosa$[ebp]
	mov	eax, DWORD PTR _v$[ebp]
	fmul	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _v$[ebp]
	fmul	DWORD PTR [ecx+4]
	fld	DWORD PTR _sina$[ebp]
	mov	edx, DWORD PTR _v$[ebp]
	fmul	DWORD PTR [edx]
	faddp	ST(1), ST(0)
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+28]

; 166  : 	p[8] = cosa + one_cosa*v.z*v.z;

	fld	DWORD PTR _one_cosa$[ebp]
	mov	eax, DWORD PTR _v$[ebp]
	fmul	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _v$[ebp]
	fmul	DWORD PTR [ecx+8]
	fadd	DWORD PTR _cosa$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+32]

; 167  : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??0Matrix@@QAE@MAAVVector@@@Z ENDP			; Matrix::Matrix
_TEXT	ENDS
PUBLIC	??7Matrix@@QAE?AV0@XZ				; Matrix::operator!
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??7Matrix@@QAE?AV0@XZ
_TEXT	SEGMENT
_j$32974 = -76						; size = 4
_i$32970 = -64						; size = 4
_temp$ = -52						; size = 36
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
??7Matrix@@QAE?AV0@XZ PROC				; Matrix::operator!, COMDAT
; _this$ = ecx

; 170  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 272				; 00000110H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-272]
	mov	ecx, 68					; 00000044H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 171  : 	Matrix temp;

	lea	ecx, DWORD PTR _temp$[ebp]
	call	??0Matrix@@QAE@XZ			; Matrix::Matrix

; 172  : 
; 173  : 	for (int i=0; i<3; i++)

	mov	DWORD PTR _i$32970[ebp], 0
	jmp	SHORT $LN6@operator@4
$LN5@operator@4:
	mov	eax, DWORD PTR _i$32970[ebp]
	add	eax, 1
	mov	DWORD PTR _i$32970[ebp], eax
$LN6@operator@4:
	cmp	DWORD PTR _i$32970[ebp], 3
	jge	SHORT $LN4@operator@4

; 174  : 		for (int j=0; j<3; j++)

	mov	DWORD PTR _j$32974[ebp], 0
	jmp	SHORT $LN3@operator@4
$LN2@operator@4:
	mov	eax, DWORD PTR _j$32974[ebp]
	add	eax, 1
	mov	DWORD PTR _j$32974[ebp], eax
$LN3@operator@4:
	cmp	DWORD PTR _j$32974[ebp], 3
	jge	SHORT $LN1@operator@4

; 175  : 			temp.p[i+j*3] = p[j+i*3];

	mov	eax, DWORD PTR _i$32970[ebp]
	imul	eax, 3
	add	eax, DWORD PTR _j$32974[ebp]
	mov	ecx, DWORD PTR _j$32974[ebp]
	imul	ecx, 3
	add	ecx, DWORD PTR _i$32970[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+eax*4]
	fstp	DWORD PTR _temp$[ebp+ecx*4]
	jmp	SHORT $LN2@operator@4
$LN1@operator@4:
	jmp	SHORT $LN5@operator@4
$LN4@operator@4:

; 176  : 		
; 177  : 	return temp;

	lea	eax, DWORD PTR _temp$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Matrix@@QAE@AAV0@@Z			; Matrix::Matrix
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 178  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@operator@4
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 272				; 00000110H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	3
$LN11@operator@4:
	DD	1
	DD	$LN10@operator@4
$LN10@operator@4:
	DD	-52					; ffffffccH
	DD	36					; 00000024H
	DD	$LN9@operator@4
$LN9@operator@4:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
??7Matrix@@QAE?AV0@XZ ENDP				; Matrix::operator!
_TEXT	ENDS
PUBLIC	?Set@Matrix@@QAEXMMMMMMMMM@Z			; Matrix::Set
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?Set@Matrix@@QAEXMMMMMMMMM@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_xx$ = 8						; size = 4
_xy$ = 12						; size = 4
_xz$ = 16						; size = 4
_yx$ = 20						; size = 4
_yy$ = 24						; size = 4
_yz$ = 28						; size = 4
_zx$ = 32						; size = 4
_zy$ = 36						; size = 4
_zz$ = 40						; size = 4
?Set@Matrix@@QAEXMMMMMMMMM@Z PROC			; Matrix::Set, COMDAT
; _this$ = ecx

; 186  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 187  : 	p[_XX] = xx; p[_XY] = xy; p[_XZ] = xz;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _xx$[ebp]
	fstp	DWORD PTR [eax]
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _xy$[ebp]
	fstp	DWORD PTR [eax+4]
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _xz$[ebp]
	fstp	DWORD PTR [eax+8]

; 188  : 	p[_YX] = yx; p[_YY] = yy; p[_YZ] = yz;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _yx$[ebp]
	fstp	DWORD PTR [eax+12]
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _yy$[ebp]
	fstp	DWORD PTR [eax+16]
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _yz$[ebp]
	fstp	DWORD PTR [eax+20]

; 189  : 	p[_ZX] = zx; p[_ZY] = zy; p[_ZZ] = zz;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _zx$[ebp]
	fstp	DWORD PTR [eax+24]
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _zy$[ebp]
	fstp	DWORD PTR [eax+28]
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _zz$[ebp]
	fstp	DWORD PTR [eax+32]

; 190  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	36					; 00000024H
?Set@Matrix@@QAEXMMMMMMMMM@Z ENDP			; Matrix::Set
_TEXT	ENDS
PUBLIC	?SetAng@Matrix@@QAEXMMM@Z			; Matrix::SetAng
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?SetAng@Matrix@@QAEXMMM@Z
_TEXT	SEGMENT
_sxcz$ = -116						; size = 4
_cxz$ = -104						; size = 4
_syz$ = -92						; size = 4
_cosz$ = -80						; size = 4
_cosy$ = -68						; size = 4
_cosx$ = -56						; size = 4
_sinz$ = -44						; size = 4
_siny$ = -32						; size = 4
_sinx$ = -20						; size = 4
_this$ = -8						; size = 4
_ax$ = 8						; size = 4
_ay$ = 12						; size = 4
_az$ = 16						; size = 4
?SetAng@Matrix@@QAEXMMM@Z PROC				; Matrix::SetAng, COMDAT
; _this$ = ecx

; 193  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 312				; 00000138H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-312]
	mov	ecx, 78					; 0000004eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 194  : 	float sinx, siny, sinz, cosx, cosy, cosz, syz, cxz, sxcz;
; 195  : 
; 196  : 	sinx = sinf(ax); cosx = cosf(ax);

	push	ecx
	fld	DWORD PTR _ax$[ebp]
	fstp	DWORD PTR [esp]
	call	_sinf
	add	esp, 4
	fstp	DWORD PTR _sinx$[ebp]
	push	ecx
	fld	DWORD PTR _ax$[ebp]
	fstp	DWORD PTR [esp]
	call	_cosf
	add	esp, 4
	fstp	DWORD PTR _cosx$[ebp]

; 197  : 	siny = sinf(ay); cosy = cosf(ay);

	push	ecx
	fld	DWORD PTR _ay$[ebp]
	fstp	DWORD PTR [esp]
	call	_sinf
	add	esp, 4
	fstp	DWORD PTR _siny$[ebp]
	push	ecx
	fld	DWORD PTR _ay$[ebp]
	fstp	DWORD PTR [esp]
	call	_cosf
	add	esp, 4
	fstp	DWORD PTR _cosy$[ebp]

; 198  : 	sinz = sinf(az); cosz = cosf(az);

	push	ecx
	fld	DWORD PTR _az$[ebp]
	fstp	DWORD PTR [esp]
	call	_sinf
	add	esp, 4
	fstp	DWORD PTR _sinz$[ebp]
	push	ecx
	fld	DWORD PTR _az$[ebp]
	fstp	DWORD PTR [esp]
	call	_cosf
	add	esp, 4
	fstp	DWORD PTR _cosz$[ebp]

; 199  : 	
; 200  : 	syz = siny * sinz;

	fld	DWORD PTR _siny$[ebp]
	fmul	DWORD PTR _sinz$[ebp]
	fstp	DWORD PTR _syz$[ebp]

; 201  : 	cxz = cosx * cosz;

	fld	DWORD PTR _cosx$[ebp]
	fmul	DWORD PTR _cosz$[ebp]
	fstp	DWORD PTR _cxz$[ebp]

; 202  : 	sxcz = sinx * cosz;

	fld	DWORD PTR _sinx$[ebp]
	fmul	DWORD PTR _cosz$[ebp]
	fstp	DWORD PTR _sxcz$[ebp]

; 203  : 
; 204  : 	p[_XX] = sinx * syz + cxz;

	fld	DWORD PTR _sinx$[ebp]
	fmul	DWORD PTR _syz$[ebp]
	fadd	DWORD PTR _cxz$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax]

; 205  : 	p[_XY] = cosy * sinz;

	fld	DWORD PTR _cosy$[ebp]
	fmul	DWORD PTR _sinz$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+4]

; 206  : 	p[_XZ] = sxcz - cosx * syz;

	fld	DWORD PTR _cosx$[ebp]
	fmul	DWORD PTR _syz$[ebp]
	fsubr	DWORD PTR _sxcz$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+8]

; 207  : 	p[_YX] = sxcz * siny - cosx * sinz;

	fld	DWORD PTR _sxcz$[ebp]
	fmul	DWORD PTR _siny$[ebp]
	fld	DWORD PTR _cosx$[ebp]
	fmul	DWORD PTR _sinz$[ebp]
	fsubp	ST(1), ST(0)
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+12]

; 208  : 	p[_YY] = cosy * cosz;

	fld	DWORD PTR _cosy$[ebp]
	fmul	DWORD PTR _cosz$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+16]

; 209  : 	p[_YZ] = -cxz * siny - sinx * sinz;

	fld	DWORD PTR _cxz$[ebp]
	fchs
	fmul	DWORD PTR _siny$[ebp]
	fld	DWORD PTR _sinx$[ebp]
	fmul	DWORD PTR _sinz$[ebp]
	fsubp	ST(1), ST(0)
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+20]

; 210  : 	p[_ZX] = -sinx * cosy;

	fld	DWORD PTR _sinx$[ebp]
	fchs
	fmul	DWORD PTR _cosy$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+24]

; 211  : 	p[_ZY] = siny;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _siny$[ebp]
	fstp	DWORD PTR [eax+28]

; 212  : 	p[_ZZ] = cosx * cosy;

	fld	DWORD PTR _cosx$[ebp]
	fmul	DWORD PTR _cosy$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+32]

; 213  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 312				; 00000138H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?SetAng@Matrix@@QAEXMMM@Z ENDP				; Matrix::SetAng
_TEXT	ENDS
PUBLIC	?Identity@Matrix@@QAEXXZ			; Matrix::Identity
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?Identity@Matrix@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?Identity@Matrix@@QAEXXZ PROC				; Matrix::Identity, COMDAT
; _this$ = ecx

; 216  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 217  : 	p[_XX] = 1.f; p[_XY] = 0;   p[_XZ] = 0;

	mov	eax, DWORD PTR _this$[ebp]
	fld1
	fstp	DWORD PTR [eax]
	mov	eax, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [eax+4]
	mov	eax, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [eax+8]

; 218  : 	p[_YX] = 0;   p[_YY] = 1.f; p[_YZ] = 0;

	mov	eax, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [eax+12]
	mov	eax, DWORD PTR _this$[ebp]
	fld1
	fstp	DWORD PTR [eax+16]
	mov	eax, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [eax+20]

; 219  : 	p[_ZX] = 0;   p[_ZY] = 0;   p[_ZZ] = 1.f;

	mov	eax, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [eax+24]
	mov	eax, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [eax+28]
	mov	eax, DWORD PTR _this$[ebp]
	fld1
	fstp	DWORD PTR [eax+32]

; 220  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Identity@Matrix@@QAEXXZ ENDP				; Matrix::Identity
_TEXT	ENDS
PUBLIC	?Invert@Matrix@@QAEXXZ				; Matrix::Invert
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?Invert@Matrix@@QAEXXZ
_TEXT	SEGMENT
$T33223 = -364						; size = 36
_one_div_det$ = -128					; size = 4
_c3$ = -116						; size = 4
_c2$ = -104						; size = 4
_c1$ = -92						; size = 4
_b3$ = -80						; size = 4
_b2$ = -68						; size = 4
_b1$ = -56						; size = 4
_a3$ = -44						; size = 4
_a2$ = -32						; size = 4
_a1$ = -20						; size = 4
_this$ = -8						; size = 4
?Invert@Matrix@@QAEXXZ PROC				; Matrix::Invert, COMDAT
; _this$ = ecx

; 223  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 368				; 00000170H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-368]
	mov	ecx, 92					; 0000005cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 224  : 	float a1, a2, a3, b1, b2, b3, c1, c2, c3, one_div_det;
; 225  : 	one_div_det = 1/Det();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Det@Matrix@@QAEMXZ			; Matrix::Det
	fld1
	fdivrp	ST(1), ST(0)
	fstp	DWORD PTR _one_div_det$[ebp]

; 226  : 
; 227  : 	a1 = p[_XX]; a2 = p[_YX]; a3 = p[_ZX];

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	fstp	DWORD PTR _a1$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+12]
	fstp	DWORD PTR _a2$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+24]
	fstp	DWORD PTR _a3$[ebp]

; 228  : 	b1 = p[_XY]; b2 = p[_YY]; b3 = p[_ZY];

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	fstp	DWORD PTR _b1$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+16]
	fstp	DWORD PTR _b2$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+28]
	fstp	DWORD PTR _b3$[ebp]

; 229  : 	c1 = p[_XZ]; c2 = p[_YZ]; c3 = p[_ZZ];

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	fstp	DWORD PTR _c1$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+20]
	fstp	DWORD PTR _c2$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+32]
	fstp	DWORD PTR _c3$[ebp]

; 230  : 
; 231  : 	p[_XX] = (b2*c3-c2*b3);

	fld	DWORD PTR _b2$[ebp]
	fmul	DWORD PTR _c3$[ebp]
	fld	DWORD PTR _c2$[ebp]
	fmul	DWORD PTR _b3$[ebp]
	fsubp	ST(1), ST(0)
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax]

; 232  : 	p[_XY] = -(b1*c3-c1*b3);

	fld	DWORD PTR _b1$[ebp]
	fmul	DWORD PTR _c3$[ebp]
	fld	DWORD PTR _c1$[ebp]
	fmul	DWORD PTR _b3$[ebp]
	fsubp	ST(1), ST(0)
	fchs
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+4]

; 233  : 	p[_XZ] = (b1*c2-c1*b2);

	fld	DWORD PTR _b1$[ebp]
	fmul	DWORD PTR _c2$[ebp]
	fld	DWORD PTR _c1$[ebp]
	fmul	DWORD PTR _b2$[ebp]
	fsubp	ST(1), ST(0)
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+8]

; 234  : 
; 235  : 	p[_YX] = -(a2*c3-c2*a3);

	fld	DWORD PTR _a2$[ebp]
	fmul	DWORD PTR _c3$[ebp]
	fld	DWORD PTR _c2$[ebp]
	fmul	DWORD PTR _a3$[ebp]
	fsubp	ST(1), ST(0)
	fchs
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+12]

; 236  : 	p[_YY] = (a1*c3-c1*a3);

	fld	DWORD PTR _a1$[ebp]
	fmul	DWORD PTR _c3$[ebp]
	fld	DWORD PTR _c1$[ebp]
	fmul	DWORD PTR _a3$[ebp]
	fsubp	ST(1), ST(0)
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+16]

; 237  : 	p[_YZ] = -(a1*c2-c1*a2);

	fld	DWORD PTR _a1$[ebp]
	fmul	DWORD PTR _c2$[ebp]
	fld	DWORD PTR _c1$[ebp]
	fmul	DWORD PTR _a2$[ebp]
	fsubp	ST(1), ST(0)
	fchs
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+20]

; 238  : 
; 239  : 	p[_ZX] = (a2*b3-b2*a3);

	fld	DWORD PTR _a2$[ebp]
	fmul	DWORD PTR _b3$[ebp]
	fld	DWORD PTR _b2$[ebp]
	fmul	DWORD PTR _a3$[ebp]
	fsubp	ST(1), ST(0)
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+24]

; 240  : 	p[_ZY] = -(a1*b3-b1*a3);

	fld	DWORD PTR _a1$[ebp]
	fmul	DWORD PTR _b3$[ebp]
	fld	DWORD PTR _b1$[ebp]
	fmul	DWORD PTR _a3$[ebp]
	fsubp	ST(1), ST(0)
	fchs
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+28]

; 241  : 	p[_ZZ] = (a1*b2-b1*a2);

	fld	DWORD PTR _a1$[ebp]
	fmul	DWORD PTR _b2$[ebp]
	fld	DWORD PTR _b1$[ebp]
	fmul	DWORD PTR _a2$[ebp]
	fsubp	ST(1), ST(0)
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+32]

; 242  : 
; 243  : 	*this = *this * one_div_det;

	push	ecx
	fld	DWORD PTR _one_div_det$[ebp]
	fstp	DWORD PTR [esp]
	lea	eax, DWORD PTR $T33223[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??DMatrix@@QAE?AV0@M@Z			; Matrix::operator*
	mov	ecx, 9
	mov	esi, eax
	mov	edi, DWORD PTR _this$[ebp]
	rep movsd

; 244  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 368				; 00000170H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Invert@Matrix@@QAEXXZ ENDP				; Matrix::Invert
_TEXT	ENDS
END
