; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	c:\Users\User\Desktop\ComputerGraphicsProject\Viewer\Vector.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	?acos@@YAMM@Z					; acos
PUBLIC	?Angle@Vector@@QAEMAAV1@@Z			; Vector::Angle
EXTRN	__fltused:DWORD
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\users\user\desktop\computergraphicsproject\viewer\vector.cpp
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT ?Angle@Vector@@QAEMAAV1@@Z
_TEXT	SEGMENT
tv80 = -208						; size = 4
_this$ = -8						; size = 4
_v$ = 8							; size = 4
?Angle@Vector@@QAEMAAV1@@Z PROC				; Vector::Angle, COMDAT
; _this$ = ecx

; 5    : {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 6    : 	//return acos((x*v.x + y*v.y)/sqrt((x*x + y*y)*(v.x*v.x + v.y*v.y)));
; 7    : 	return acos(x*v.x + y*v.y);

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _v$[ebp]
	fmul	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _v$[ebp]
	fmul	DWORD PTR [eax+4]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR tv80[ebp]
	fld	DWORD PTR tv80[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	call	?acos@@YAMM@Z				; acos
	add	esp, 4

; 8    : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Angle@Vector@@QAEMAAV1@@Z ENDP				; Vector::Angle
_TEXT	ENDS
PUBLIC	_acosf
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\math.h
;	COMDAT ?acos@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?acos@@YAMM@Z PROC					; acos, COMDAT

; 494  :         {return (acosf(_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	push	ecx
	fld	DWORD PTR __X$[ebp]
	fstp	DWORD PTR [esp]
	call	_acosf
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?acos@@YAMM@Z ENDP					; acos
_TEXT	ENDS
EXTRN	_acos:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _acosf
_TEXT	SEGMENT
tv73 = -196						; size = 4
__X$ = 8						; size = 4
_acosf	PROC						; COMDAT

; 389  :         {return ((float)acos((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	fld	DWORD PTR __X$[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	_acos
	add	esp, 8
	fstp	DWORD PTR tv73[ebp]
	fld	DWORD PTR tv73[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_acosf	ENDP
_TEXT	ENDS
PUBLIC	??0Vector@@QAE@AAV0@@Z				; Vector::Vector
PUBLIC	??0Vector@@QAE@MMM@Z				; Vector::Vector
PUBLIC	??HVector@@QAE?AV0@AAV0@@Z			; Vector::operator+
EXTRN	@_RTC_CheckStackVars@8:PROC
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\user\desktop\computergraphicsproject\viewer\vector.cpp
;	COMDAT ??HVector@@QAE?AV0@AAV0@@Z
_TEXT	SEGMENT
tv94 = -236						; size = 4
tv91 = -232						; size = 4
tv88 = -228						; size = 4
_temp$ = -28						; size = 12
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
_v$ = 12						; size = 4
??HVector@@QAE?AV0@AAV0@@Z PROC				; Vector::operator+, COMDAT
; _this$ = ecx

; 11   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 236				; 000000ecH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-236]
	mov	ecx, 59					; 0000003bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 12   : 	Vector temp(x+v.x, y+v.y, z+v.z);

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _v$[ebp]
	fadd	DWORD PTR [ecx+8]
	fstp	DWORD PTR tv88[ebp]
	fld	DWORD PTR tv88[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _v$[ebp]
	fadd	DWORD PTR [eax+4]
	fstp	DWORD PTR tv91[ebp]
	fld	DWORD PTR tv91[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx]
	mov	edx, DWORD PTR _v$[ebp]
	fadd	DWORD PTR [edx]
	fstp	DWORD PTR tv94[ebp]
	fld	DWORD PTR tv94[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR _temp$[ebp]
	call	??0Vector@@QAE@MMM@Z			; Vector::Vector

; 13   : 	return temp;

	lea	eax, DWORD PTR _temp$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector@@QAE@AAV0@@Z			; Vector::Vector
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 14   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@operator
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 236				; 000000ecH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	1
$LN5@operator:
	DD	1
	DD	$LN4@operator
$LN4@operator:
	DD	-28					; ffffffe4H
	DD	12					; 0000000cH
	DD	$LN3@operator
$LN3@operator:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
??HVector@@QAE?AV0@AAV0@@Z ENDP				; Vector::operator+
_TEXT	ENDS
PUBLIC	?Set@Vector@@QAEXMMM@Z				; Vector::Set
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\user\desktop\computergraphicsproject\viewer\vector.h
;	COMDAT ??0Vector@@QAE@MMM@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__x$ = 8						; size = 4
__y$ = 12						; size = 4
__z$ = 16						; size = 4
??0Vector@@QAE@MMM@Z PROC				; Vector::Vector, COMDAT
; _this$ = ecx

; 21   : 	Vector(float _x, float _y, float _z)	{ Set(_x, _y, _z); }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	fld	DWORD PTR __z$[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR __y$[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR __x$[ebp]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector@@QAEXMMM@Z			; Vector::Set
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??0Vector@@QAE@MMM@Z ENDP				; Vector::Vector
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??0Vector@@QAE@AAV0@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_v$ = 8							; size = 4
??0Vector@@QAE@AAV0@@Z PROC				; Vector::Vector, COMDAT
; _this$ = ecx

; 22   : 	Vector(Vector &v)						{ Set(v.x, v.y, v.z); }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _v$[ebp]
	push	ecx
	fld	DWORD PTR [eax+8]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	fld	DWORD PTR [ecx+4]
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _v$[ebp]
	push	ecx
	fld	DWORD PTR [edx]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector@@QAEXMMM@Z			; Vector::Set
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0Vector@@QAE@AAV0@@Z ENDP				; Vector::Vector
_TEXT	ENDS
PUBLIC	??YVector@@QAEXAAV0@@Z				; Vector::operator+=
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\user\desktop\computergraphicsproject\viewer\vector.cpp
;	COMDAT ??YVector@@QAEXAAV0@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_v$ = 8							; size = 4
??YVector@@QAEXAAV0@@Z PROC				; Vector::operator+=, COMDAT
; _this$ = ecx

; 17   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 18   : 	x += v.x;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _v$[ebp]
	fadd	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx]

; 19   : 	y += v.y;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _v$[ebp]
	fadd	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+4]

; 20   : 	z += v.z;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _v$[ebp]
	fadd	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+8]

; 21   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??YVector@@QAEXAAV0@@Z ENDP				; Vector::operator+=
_TEXT	ENDS
PUBLIC	??GVector@@QAE?AV0@AAV0@@Z			; Vector::operator-
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??GVector@@QAE?AV0@AAV0@@Z
_TEXT	SEGMENT
tv94 = -236						; size = 4
tv91 = -232						; size = 4
tv88 = -228						; size = 4
_temp$ = -28						; size = 12
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
_v$ = 12						; size = 4
??GVector@@QAE?AV0@AAV0@@Z PROC				; Vector::operator-, COMDAT
; _this$ = ecx

; 24   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 236				; 000000ecH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-236]
	mov	ecx, 59					; 0000003bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 25   : 	Vector temp(x-v.x, y-v.y, z-v.z);

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _v$[ebp]
	fsub	DWORD PTR [ecx+8]
	fstp	DWORD PTR tv88[ebp]
	fld	DWORD PTR tv88[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _v$[ebp]
	fsub	DWORD PTR [eax+4]
	fstp	DWORD PTR tv91[ebp]
	fld	DWORD PTR tv91[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx]
	mov	edx, DWORD PTR _v$[ebp]
	fsub	DWORD PTR [edx]
	fstp	DWORD PTR tv94[ebp]
	fld	DWORD PTR tv94[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR _temp$[ebp]
	call	??0Vector@@QAE@MMM@Z			; Vector::Vector

; 26   : 	return temp;

	lea	eax, DWORD PTR _temp$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector@@QAE@AAV0@@Z			; Vector::Vector
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 27   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@operator@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 236				; 000000ecH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	1
$LN5@operator@2:
	DD	1
	DD	$LN4@operator@2
$LN4@operator@2:
	DD	-28					; ffffffe4H
	DD	12					; 0000000cH
	DD	$LN3@operator@2
$LN3@operator@2:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
??GVector@@QAE?AV0@AAV0@@Z ENDP				; Vector::operator-
_TEXT	ENDS
PUBLIC	??ZVector@@QAEXAAV0@@Z				; Vector::operator-=
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??ZVector@@QAEXAAV0@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_v$ = 8							; size = 4
??ZVector@@QAEXAAV0@@Z PROC				; Vector::operator-=, COMDAT
; _this$ = ecx

; 30   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 31   : 	x -= v.x;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _v$[ebp]
	fsub	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx]

; 32   : 	y -= v.y;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _v$[ebp]
	fsub	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+4]

; 33   : 	z -= v.z;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _v$[ebp]
	fsub	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+8]

; 34   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??ZVector@@QAEXAAV0@@Z ENDP				; Vector::operator-=
_TEXT	ENDS
PUBLIC	??DVector@@QAE?AV0@AAVMatrix@@@Z		; Vector::operator*
EXTRN	??DMatrix@@QAE?AVVector@@AAV1@@Z:PROC		; Matrix::operator*
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??DVector@@QAE?AV0@AAVMatrix@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
_m$ = 12						; size = 4
??DVector@@QAE?AV0@AAVMatrix@@@Z PROC			; Vector::operator*, COMDAT
; _this$ = ecx

; 37   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 38   : 	return (m * (*this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _m$[ebp]
	call	??DMatrix@@QAE?AVVector@@AAV1@@Z	; Matrix::operator*
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 39   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??DVector@@QAE?AV0@AAVMatrix@@@Z ENDP			; Vector::operator*
_TEXT	ENDS
PUBLIC	??DVector@@QAEMAAV0@@Z				; Vector::operator*
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??DVector@@QAEMAAV0@@Z
_TEXT	SEGMENT
tv88 = -208						; size = 4
_this$ = -8						; size = 4
_v$ = 8							; size = 4
??DVector@@QAEMAAV0@@Z PROC				; Vector::operator*, COMDAT
; _this$ = ecx

; 42   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 43   : 	return (x*v.x + y*v.y + z*v.z);

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _v$[ebp]
	fmul	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _v$[ebp]
	fmul	DWORD PTR [eax+4]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _v$[ebp]
	fmul	DWORD PTR [edx+8]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR tv88[ebp]
	fld	DWORD PTR tv88[ebp]

; 44   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??DVector@@QAEMAAV0@@Z ENDP				; Vector::operator*
_TEXT	ENDS
PUBLIC	??DVector@@QAE?AV0@M@Z				; Vector::operator*
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??DVector@@QAE?AV0@M@Z
_TEXT	SEGMENT
tv89 = -236						; size = 4
tv87 = -232						; size = 4
tv85 = -228						; size = 4
_temp$ = -28						; size = 12
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
_f$ = 12						; size = 4
??DVector@@QAE?AV0@M@Z PROC				; Vector::operator*, COMDAT
; _this$ = ecx

; 47   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 236				; 000000ecH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-236]
	mov	ecx, 59					; 0000003bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 48   : 	Vector temp(x*f, y*f, z*f);

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	fmul	DWORD PTR _f$[ebp]
	fstp	DWORD PTR tv85[ebp]
	fld	DWORD PTR tv85[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+4]
	fmul	DWORD PTR _f$[ebp]
	fstp	DWORD PTR tv87[ebp]
	fld	DWORD PTR tv87[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx]
	fmul	DWORD PTR _f$[ebp]
	fstp	DWORD PTR tv89[ebp]
	fld	DWORD PTR tv89[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR _temp$[ebp]
	call	??0Vector@@QAE@MMM@Z			; Vector::Vector

; 49   : 	return temp;

	lea	eax, DWORD PTR _temp$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector@@QAE@AAV0@@Z			; Vector::Vector
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 50   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@operator@3
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 236				; 000000ecH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	1
$LN5@operator@3:
	DD	1
	DD	$LN4@operator@3
$LN4@operator@3:
	DD	-28					; ffffffe4H
	DD	12					; 0000000cH
	DD	$LN3@operator@3
$LN3@operator@3:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
??DVector@@QAE?AV0@M@Z ENDP				; Vector::operator*
_TEXT	ENDS
PUBLIC	??XVector@@QAEXAAVMatrix@@@Z			; Vector::operator*=
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??XVector@@QAEXAAVMatrix@@@Z
_TEXT	SEGMENT
$T33293 = -220						; size = 12
_this$ = -8						; size = 4
_m$ = 8							; size = 4
??XVector@@QAEXAAVMatrix@@@Z PROC			; Vector::operator*=, COMDAT
; _this$ = ecx

; 53   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 224				; 000000e0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-224]
	mov	ecx, 56					; 00000038H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 54   : 	*this = *this * m;

	mov	eax, DWORD PTR _m$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T33293[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??DVector@@QAE?AV0@AAVMatrix@@@Z	; Vector::operator*
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], eax

; 55   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 224				; 000000e0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??XVector@@QAEXAAVMatrix@@@Z ENDP			; Vector::operator*=
_TEXT	ENDS
PUBLIC	??XVector@@QAEXAAV0@@Z				; Vector::operator*=
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??XVector@@QAEXAAV0@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_v$ = 8							; size = 4
??XVector@@QAEXAAV0@@Z PROC				; Vector::operator*=, COMDAT
; _this$ = ecx

; 58   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 59   : 	x *= v.x;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _v$[ebp]
	fmul	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx]

; 60   : 	y *= v.y;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _v$[ebp]
	fmul	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+4]

; 61   : 	z *= v.z;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _v$[ebp]
	fmul	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+8]

; 62   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??XVector@@QAEXAAV0@@Z ENDP				; Vector::operator*=
_TEXT	ENDS
PUBLIC	??XVector@@QAEXM@Z				; Vector::operator*=
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??XVector@@QAEXM@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_f$ = 8							; size = 4
??XVector@@QAEXM@Z PROC					; Vector::operator*=, COMDAT
; _this$ = ecx

; 65   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 66   : 	x *= f;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	fmul	DWORD PTR _f$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx]

; 67   : 	y *= f;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	fmul	DWORD PTR _f$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+4]

; 68   : 	z *= f;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	fmul	DWORD PTR _f$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+8]

; 69   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??XVector@@QAEXM@Z ENDP					; Vector::operator*=
_TEXT	ENDS
PUBLIC	??0Vector@@QAE@XZ				; Vector::Vector
PUBLIC	??TVector@@QAE?AV0@AAV0@@Z			; Vector::operator^
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??TVector@@QAE?AV0@AAV0@@Z
_TEXT	SEGMENT
_temp$ = -28						; size = 12
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
_v$ = 12						; size = 4
??TVector@@QAE?AV0@AAV0@@Z PROC				; Vector::operator^, COMDAT
; _this$ = ecx

; 72   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 224				; 000000e0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-224]
	mov	ecx, 56					; 00000038H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 73   : 	Vector temp;

	lea	ecx, DWORD PTR _temp$[ebp]
	call	??0Vector@@QAE@XZ			; Vector::Vector

; 74   : 
; 75   : 	temp.x = y*v.z - z*v.y;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _v$[ebp]
	fmul	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+8]
	mov	eax, DWORD PTR _v$[ebp]
	fmul	DWORD PTR [eax+4]
	fsubp	ST(1), ST(0)
	fstp	DWORD PTR _temp$[ebp]

; 76   : 	temp.y = z*v.x - x*v.z;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _v$[ebp]
	fmul	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx]
	mov	eax, DWORD PTR _v$[ebp]
	fmul	DWORD PTR [eax+8]
	fsubp	ST(1), ST(0)
	fstp	DWORD PTR _temp$[ebp+4]

; 77   : 	temp.z = x*v.y - y*v.x;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _v$[ebp]
	fmul	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _v$[ebp]
	fmul	DWORD PTR [eax]
	fsubp	ST(1), ST(0)
	fstp	DWORD PTR _temp$[ebp+8]

; 78   : 
; 79   : 	return temp;

	lea	eax, DWORD PTR _temp$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector@@QAE@AAV0@@Z			; Vector::Vector
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 80   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@operator@4
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 224				; 000000e0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
$LN5@operator@4:
	DD	1
	DD	$LN4@operator@4
$LN4@operator@4:
	DD	-28					; ffffffe4H
	DD	12					; 0000000cH
	DD	$LN3@operator@4
$LN3@operator@4:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
??TVector@@QAE?AV0@AAV0@@Z ENDP				; Vector::operator^
_TEXT	ENDS
PUBLIC	__real@00000000
;	COMDAT __real@00000000
; File c:\users\user\desktop\computergraphicsproject\viewer\vector.h
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ??0Vector@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0Vector@@QAE@XZ PROC					; Vector::Vector, COMDAT
; _this$ = ecx

; 20   : 	Vector()								{ Set(0, 0, 0); }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector@@QAEXMMM@Z			; Vector::Set
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0Vector@@QAE@XZ ENDP					; Vector::Vector
_TEXT	ENDS
PUBLIC	??_6Vector@@QAEXAAV0@@Z				; Vector::operator^=
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\user\desktop\computergraphicsproject\viewer\vector.cpp
;	COMDAT ??_6Vector@@QAEXAAV0@@Z
_TEXT	SEGMENT
tv146 = -216						; size = 4
tv141 = -212						; size = 4
tv136 = -208						; size = 4
_this$ = -8						; size = 4
_v$ = 8							; size = 4
??_6Vector@@QAEXAAV0@@Z PROC				; Vector::operator^=, COMDAT
; _this$ = ecx

; 83   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 84   : 	Set(y*v.z - z*v.y,
; 85   : 		z*v.x - x*v.z,
; 86   : 		x*v.y - y*v.x);

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _v$[ebp]
	fmul	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _v$[ebp]
	fmul	DWORD PTR [eax]
	fsubp	ST(1), ST(0)
	fstp	DWORD PTR tv136[ebp]
	fld	DWORD PTR tv136[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _v$[ebp]
	fmul	DWORD PTR [edx]
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _v$[ebp]
	fmul	DWORD PTR [ecx+8]
	fsubp	ST(1), ST(0)
	fstp	DWORD PTR tv141[ebp]
	fld	DWORD PTR tv141[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _v$[ebp]
	fmul	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _v$[ebp]
	fmul	DWORD PTR [edx+4]
	fsubp	ST(1), ST(0)
	fstp	DWORD PTR tv146[ebp]
	fld	DWORD PTR tv146[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector@@QAEXMMM@Z			; Vector::Set

; 87   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_6Vector@@QAEXAAV0@@Z ENDP				; Vector::operator^=
_TEXT	ENDS
PUBLIC	??7Vector@@QAE?AV0@XZ				; Vector::operator!
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??7Vector@@QAE?AV0@XZ
_TEXT	SEGMENT
_temp$ = -28						; size = 12
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
??7Vector@@QAE?AV0@XZ PROC				; Vector::operator!, COMDAT
; _this$ = ecx

; 90   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 224				; 000000e0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-224]
	mov	ecx, 56					; 00000038H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 91   : 	Vector temp(-x,-y,-z);

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	fchs
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+4]
	fchs
	push	ecx
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx]
	fchs
	push	ecx
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR _temp$[ebp]
	call	??0Vector@@QAE@MMM@Z			; Vector::Vector

; 92   : 	return temp;

	lea	eax, DWORD PTR _temp$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector@@QAE@AAV0@@Z			; Vector::Vector
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 93   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@operator@5
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 224				; 000000e0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
$LN5@operator@5:
	DD	1
	DD	$LN4@operator@5
$LN4@operator@5:
	DD	-28					; ffffffe4H
	DD	12					; 0000000cH
	DD	$LN3@operator@5
$LN3@operator@5:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
??7Vector@@QAE?AV0@XZ ENDP				; Vector::operator!
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?Set@Vector@@QAEXMMM@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__x$ = 8						; size = 4
__y$ = 12						; size = 4
__z$ = 16						; size = 4
?Set@Vector@@QAEXMMM@Z PROC				; Vector::Set, COMDAT
; _this$ = ecx

; 96   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 97   : 	x = _x;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR __x$[ebp]
	fstp	DWORD PTR [eax]

; 98   : 	y = _y;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR __y$[ebp]
	fstp	DWORD PTR [eax+4]

; 99   : 	z = _z;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR __z$[ebp]
	fstp	DWORD PTR [eax+8]

; 100  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Set@Vector@@QAEXMMM@Z ENDP				; Vector::Set
_TEXT	ENDS
PUBLIC	?Dot@Vector@@QAEMAAV1@@Z			; Vector::Dot
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?Dot@Vector@@QAEMAAV1@@Z
_TEXT	SEGMENT
tv86 = -208						; size = 4
_this$ = -8						; size = 4
_v$ = 8							; size = 4
?Dot@Vector@@QAEMAAV1@@Z PROC				; Vector::Dot, COMDAT
; _this$ = ecx

; 103  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 104  : 	return x*v.x + y*v.y + z*v.z;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _v$[ebp]
	fmul	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _v$[ebp]
	fmul	DWORD PTR [eax+4]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _v$[ebp]
	fmul	DWORD PTR [edx+8]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR tv86[ebp]
	fld	DWORD PTR tv86[ebp]

; 105  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Dot@Vector@@QAEMAAV1@@Z ENDP				; Vector::Dot
_TEXT	ENDS
PUBLIC	?SelfDot@Vector@@QAEMXZ				; Vector::SelfDot
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?SelfDot@Vector@@QAEMXZ
_TEXT	SEGMENT
tv86 = -208						; size = 4
_this$ = -8						; size = 4
?SelfDot@Vector@@QAEMXZ PROC				; Vector::SelfDot, COMDAT
; _this$ = ecx

; 108  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 109  : 	return x*x + y*y + z*z;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+4]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [edx+8]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR tv86[ebp]
	fld	DWORD PTR tv86[ebp]

; 110  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?SelfDot@Vector@@QAEMXZ ENDP				; Vector::SelfDot
_TEXT	ENDS
PUBLIC	__real@3ff0000000000000
PUBLIC	_sqrtf
PUBLIC	?Normalize@Vector@@QAE?AV1@XZ			; Vector::Normalize
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?Normalize@Vector@@QAE?AV1@XZ
_TEXT	SEGMENT
tv89 = -248						; size = 4
$T33322 = -240						; size = 12
_temp$ = -28						; size = 12
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
?Normalize@Vector@@QAE?AV1@XZ PROC			; Vector::Normalize, COMDAT
; _this$ = ecx

; 113  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 248				; 000000f8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-248]
	mov	ecx, 62					; 0000003eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 114  : 	Vector	temp;

	lea	ecx, DWORD PTR _temp$[ebp]
	call	??0Vector@@QAE@XZ			; Vector::Vector

; 115  : 
; 116  : 	temp = *this * (1.f / sqrtf(SelfDot()));

	mov	ecx, DWORD PTR _this$[ebp]
	call	?SelfDot@Vector@@QAEMXZ			; Vector::SelfDot
	push	ecx
	fstp	DWORD PTR [esp]
	call	_sqrtf
	add	esp, 4
	fld1
	fdivrp	ST(1), ST(0)
	fstp	DWORD PTR tv89[ebp]
	fld	DWORD PTR tv89[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	lea	eax, DWORD PTR $T33322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??DVector@@QAE?AV0@M@Z			; Vector::operator*
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _temp$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _temp$[ebp+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR _temp$[ebp+8], eax

; 117  : 
; 118  : 	return temp;

	lea	eax, DWORD PTR _temp$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector@@QAE@AAV0@@Z			; Vector::Vector
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 119  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@Normalize
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 248				; 000000f8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	3
$LN5@Normalize:
	DD	1
	DD	$LN4@Normalize
$LN4@Normalize:
	DD	-28					; ffffffe4H
	DD	12					; 0000000cH
	DD	$LN3@Normalize
$LN3@Normalize:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
?Normalize@Vector@@QAE?AV1@XZ ENDP			; Vector::Normalize
_TEXT	ENDS
EXTRN	_sqrt:PROC
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\math.h
;	COMDAT _sqrtf
_TEXT	SEGMENT
tv73 = -196						; size = 4
__X$ = 8						; size = 4
_sqrtf	PROC						; COMDAT

; 423  :         {return ((float)sqrt((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	fld	DWORD PTR __X$[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	_sqrt
	add	esp, 8
	fstp	DWORD PTR tv73[ebp]
	fld	DWORD PTR tv73[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_sqrtf	ENDP
_TEXT	ENDS
PUBLIC	?SelfNormalize@Vector@@QAEXXZ			; Vector::SelfNormalize
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\user\desktop\computergraphicsproject\viewer\vector.cpp
;	COMDAT ?SelfNormalize@Vector@@QAEXXZ
_TEXT	SEGMENT
tv81 = -208						; size = 4
_this$ = -8						; size = 4
?SelfNormalize@Vector@@QAEXXZ PROC			; Vector::SelfNormalize, COMDAT
; _this$ = ecx

; 123  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 124  : 	*this *= 1.f / sqrtf(SelfDot());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?SelfDot@Vector@@QAEMXZ			; Vector::SelfDot
	push	ecx
	fstp	DWORD PTR [esp]
	call	_sqrtf
	add	esp, 4
	fld1
	fdivrp	ST(1), ST(0)
	fstp	DWORD PTR tv81[ebp]
	fld	DWORD PTR tv81[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	??XVector@@QAEXM@Z			; Vector::operator*=

; 125  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?SelfNormalize@Vector@@QAEXXZ ENDP			; Vector::SelfNormalize
_TEXT	ENDS
PUBLIC	?Length@Vector@@QAEMXZ				; Vector::Length
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?Length@Vector@@QAEMXZ
_TEXT	SEGMENT
tv88 = -208						; size = 4
_this$ = -8						; size = 4
?Length@Vector@@QAEMXZ PROC				; Vector::Length, COMDAT
; _this$ = ecx

; 128  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 129  : 	return sqrtf(x*x + y*y + z*z);

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+4]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [edx+8]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR tv88[ebp]
	fld	DWORD PTR tv88[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	call	_sqrtf
	add	esp, 4

; 130  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Length@Vector@@QAEMXZ ENDP				; Vector::Length
_TEXT	ENDS
PUBLIC	?Distance@Vector@@QAEMAAV1@@Z			; Vector::Distance
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?Distance@Vector@@QAEMAAV1@@Z
_TEXT	SEGMENT
$T33336 = -220						; size = 12
_this$ = -8						; size = 4
_v$ = 8							; size = 4
?Distance@Vector@@QAEMAAV1@@Z PROC			; Vector::Distance, COMDAT
; _this$ = ecx

; 133  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 224				; 000000e0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-224]
	mov	ecx, 56					; 00000038H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 134  : 	return (*this - v).Length();

	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T33336[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??GVector@@QAE?AV0@AAV0@@Z		; Vector::operator-
	mov	ecx, eax
	call	?Length@Vector@@QAEMXZ			; Vector::Length

; 135  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 224				; 000000e0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Distance@Vector@@QAEMAAV1@@Z ENDP			; Vector::Distance
_TEXT	ENDS
PUBLIC	?Lerp@Vector@@QAE?AV1@AAV1@M@Z			; Vector::Lerp
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?Lerp@Vector@@QAE?AV1@AAV1@M@Z
_TEXT	SEGMENT
tv86 = -288						; size = 4
$T33339 = -280						; size = 12
$T33340 = -260						; size = 12
$T33341 = -240						; size = 12
_temp$ = -28						; size = 12
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
_v$ = 12						; size = 4
_f$ = 16						; size = 4
?Lerp@Vector@@QAE?AV1@AAV1@M@Z PROC			; Vector::Lerp, COMDAT
; _this$ = ecx

; 138  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 288				; 00000120H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-288]
	mov	ecx, 72					; 00000048H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 139  : 	Vector temp;

	lea	ecx, DWORD PTR _temp$[ebp]
	call	??0Vector@@QAE@XZ			; Vector::Vector

; 140  : 
; 141  : 	temp = (*this * f) + (v * (1.f-f));

	fld	DWORD PTR _f$[ebp]
	fld1
	fsubrp	ST(1), ST(0)
	fstp	DWORD PTR tv86[ebp]
	fld	DWORD PTR tv86[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	lea	eax, DWORD PTR $T33340[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	call	??DVector@@QAE?AV0@M@Z			; Vector::operator*
	push	eax
	lea	ecx, DWORD PTR $T33341[ebp]
	push	ecx
	push	ecx
	fld	DWORD PTR _f$[ebp]
	fstp	DWORD PTR [esp]
	lea	edx, DWORD PTR $T33339[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??DVector@@QAE?AV0@M@Z			; Vector::operator*
	mov	ecx, eax
	call	??HVector@@QAE?AV0@AAV0@@Z		; Vector::operator+
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _temp$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _temp$[ebp+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR _temp$[ebp+8], eax

; 142  : 
; 143  : 	return temp;

	lea	eax, DWORD PTR _temp$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector@@QAE@AAV0@@Z			; Vector::Vector
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 144  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@Lerp
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 288				; 00000120H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	3
$LN5@Lerp:
	DD	1
	DD	$LN4@Lerp
$LN4@Lerp:
	DD	-28					; ffffffe4H
	DD	12					; 0000000cH
	DD	$LN3@Lerp
$LN3@Lerp:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
?Lerp@Vector@@QAE?AV1@AAV1@M@Z ENDP			; Vector::Lerp
_TEXT	ENDS
PUBLIC	?SelfLerp@Vector@@QAEXAAV1@M@Z			; Vector::SelfLerp
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?SelfLerp@Vector@@QAEXAAV1@M@Z
_TEXT	SEGMENT
tv83 = -268						; size = 4
$T33347 = -260						; size = 12
$T33348 = -240						; size = 12
$T33349 = -220						; size = 12
_this$ = -8						; size = 4
_v$ = 8							; size = 4
_f$ = 12						; size = 4
?SelfLerp@Vector@@QAEXAAV1@M@Z PROC			; Vector::SelfLerp, COMDAT
; _this$ = ecx

; 147  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 268				; 0000010cH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-268]
	mov	ecx, 67					; 00000043H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 148  : 	*this = (*this * f) + (v * (1.f-f));

	fld	DWORD PTR _f$[ebp]
	fld1
	fsubrp	ST(1), ST(0)
	fstp	DWORD PTR tv83[ebp]
	fld	DWORD PTR tv83[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	lea	eax, DWORD PTR $T33348[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	call	??DVector@@QAE?AV0@M@Z			; Vector::operator*
	push	eax
	lea	ecx, DWORD PTR $T33349[ebp]
	push	ecx
	push	ecx
	fld	DWORD PTR _f$[ebp]
	fstp	DWORD PTR [esp]
	lea	edx, DWORD PTR $T33347[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??DVector@@QAE?AV0@M@Z			; Vector::operator*
	mov	ecx, eax
	call	??HVector@@QAE?AV0@AAV0@@Z		; Vector::operator+
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax

; 149  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 268				; 0000010cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?SelfLerp@Vector@@QAEXAAV1@M@Z ENDP			; Vector::SelfLerp
_TEXT	ENDS
PUBLIC	?vmake@@YAXPAVVector@@MMM@Z			; vmake
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?vmake@@YAXPAVVector@@MMM@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_z$ = 20						; size = 4
?vmake@@YAXPAVVector@@MMM@Z PROC			; vmake, COMDAT

; 152  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 153  : 	a->x = x;

	mov	eax, DWORD PTR _a$[ebp]
	fld	DWORD PTR _x$[ebp]
	fstp	DWORD PTR [eax]

; 154  : 	a->y = y;

	mov	eax, DWORD PTR _a$[ebp]
	fld	DWORD PTR _y$[ebp]
	fstp	DWORD PTR [eax+4]

; 155  : 	a->z = z;

	mov	eax, DWORD PTR _a$[ebp]
	fld	DWORD PTR _z$[ebp]
	fstp	DWORD PTR [eax+8]

; 156  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?vmake@@YAXPAVVector@@MMM@Z ENDP			; vmake
_TEXT	ENDS
PUBLIC	?vadd@@YAXPAVVector@@00@Z			; vadd
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?vadd@@YAXPAVVector@@00@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
?vadd@@YAXPAVVector@@00@Z PROC				; vadd, COMDAT

; 159  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 160  : 	c->x = a->x+b->x;

	mov	eax, DWORD PTR _a$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _b$[ebp]
	fadd	DWORD PTR [ecx]
	mov	edx, DWORD PTR _c$[ebp]
	fstp	DWORD PTR [edx]

; 161  : 	c->y = a->y+b->y;

	mov	eax, DWORD PTR _a$[ebp]
	fld	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _b$[ebp]
	fadd	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _c$[ebp]
	fstp	DWORD PTR [edx+4]

; 162  : 	c->z = a->z+b->z;

	mov	eax, DWORD PTR _a$[ebp]
	fld	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _b$[ebp]
	fadd	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _c$[ebp]
	fstp	DWORD PTR [edx+8]

; 163  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?vadd@@YAXPAVVector@@00@Z ENDP				; vadd
_TEXT	ENDS
PUBLIC	?vselfadd@@YAXPAVVector@@0@Z			; vselfadd
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?vselfadd@@YAXPAVVector@@0@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
?vselfadd@@YAXPAVVector@@0@Z PROC			; vselfadd, COMDAT

; 166  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 167  : 	a->x += b->x;

	mov	eax, DWORD PTR _a$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _b$[ebp]
	fadd	DWORD PTR [ecx]
	mov	edx, DWORD PTR _a$[ebp]
	fstp	DWORD PTR [edx]

; 168  : 	a->y += b->y;

	mov	eax, DWORD PTR _a$[ebp]
	fld	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _b$[ebp]
	fadd	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _a$[ebp]
	fstp	DWORD PTR [edx+4]

; 169  : 	a->z += b->z;

	mov	eax, DWORD PTR _a$[ebp]
	fld	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _b$[ebp]
	fadd	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _a$[ebp]
	fstp	DWORD PTR [edx+8]

; 170  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?vselfadd@@YAXPAVVector@@0@Z ENDP			; vselfadd
_TEXT	ENDS
PUBLIC	?vsub@@YAXPAVVector@@00@Z			; vsub
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?vsub@@YAXPAVVector@@00@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
?vsub@@YAXPAVVector@@00@Z PROC				; vsub, COMDAT

; 173  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 174  : 	c->x = a->x-b->x;

	mov	eax, DWORD PTR _a$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _b$[ebp]
	fsub	DWORD PTR [ecx]
	mov	edx, DWORD PTR _c$[ebp]
	fstp	DWORD PTR [edx]

; 175  : 	c->y = a->y-b->y;

	mov	eax, DWORD PTR _a$[ebp]
	fld	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _b$[ebp]
	fsub	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _c$[ebp]
	fstp	DWORD PTR [edx+4]

; 176  : 	c->z = a->z-b->z;

	mov	eax, DWORD PTR _a$[ebp]
	fld	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _b$[ebp]
	fsub	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _c$[ebp]
	fstp	DWORD PTR [edx+8]

; 177  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?vsub@@YAXPAVVector@@00@Z ENDP				; vsub
_TEXT	ENDS
PUBLIC	?vselfsub@@YAXPAVVector@@0@Z			; vselfsub
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?vselfsub@@YAXPAVVector@@0@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
?vselfsub@@YAXPAVVector@@0@Z PROC			; vselfsub, COMDAT

; 180  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 181  : 	a->x -= b->x;

	mov	eax, DWORD PTR _a$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _b$[ebp]
	fsub	DWORD PTR [ecx]
	mov	edx, DWORD PTR _a$[ebp]
	fstp	DWORD PTR [edx]

; 182  : 	a->y -= b->y;

	mov	eax, DWORD PTR _a$[ebp]
	fld	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _b$[ebp]
	fsub	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _a$[ebp]
	fstp	DWORD PTR [edx+4]

; 183  : 	a->z -= b->z;

	mov	eax, DWORD PTR _a$[ebp]
	fld	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _b$[ebp]
	fsub	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _a$[ebp]
	fstp	DWORD PTR [edx+8]

; 184  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?vselfsub@@YAXPAVVector@@0@Z ENDP			; vselfsub
_TEXT	ENDS
PUBLIC	?vmul@@YAXPAVVector@@00@Z			; vmul
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?vmul@@YAXPAVVector@@00@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
?vmul@@YAXPAVVector@@00@Z PROC				; vmul, COMDAT

; 187  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 188  : 	c->x = a->x*b->x;

	mov	eax, DWORD PTR _a$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _b$[ebp]
	fmul	DWORD PTR [ecx]
	mov	edx, DWORD PTR _c$[ebp]
	fstp	DWORD PTR [edx]

; 189  : 	c->y = a->y*b->y;

	mov	eax, DWORD PTR _a$[ebp]
	fld	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _b$[ebp]
	fmul	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _c$[ebp]
	fstp	DWORD PTR [edx+4]

; 190  : 	c->z = a->z*b->z;

	mov	eax, DWORD PTR _a$[ebp]
	fld	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _b$[ebp]
	fmul	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _c$[ebp]
	fstp	DWORD PTR [edx+8]

; 191  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?vmul@@YAXPAVVector@@00@Z ENDP				; vmul
_TEXT	ENDS
PUBLIC	?vselfmul@@YAXPAVVector@@0@Z			; vselfmul
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?vselfmul@@YAXPAVVector@@0@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
?vselfmul@@YAXPAVVector@@0@Z PROC			; vselfmul, COMDAT

; 194  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 195  : 	a->x *= b->x;

	mov	eax, DWORD PTR _a$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _b$[ebp]
	fmul	DWORD PTR [ecx]
	mov	edx, DWORD PTR _a$[ebp]
	fstp	DWORD PTR [edx]

; 196  : 	a->y *= b->y;

	mov	eax, DWORD PTR _a$[ebp]
	fld	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _b$[ebp]
	fmul	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _a$[ebp]
	fstp	DWORD PTR [edx+4]

; 197  : 	a->z *= b->z;

	mov	eax, DWORD PTR _a$[ebp]
	fld	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _b$[ebp]
	fmul	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _a$[ebp]
	fstp	DWORD PTR [edx+8]

; 198  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?vselfmul@@YAXPAVVector@@0@Z ENDP			; vselfmul
_TEXT	ENDS
PUBLIC	?vscale@@YAXPAVVector@@M0@Z			; vscale
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?vscale@@YAXPAVVector@@M0@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_d$ = 12						; size = 4
_c$ = 16						; size = 4
?vscale@@YAXPAVVector@@M0@Z PROC			; vscale, COMDAT

; 201  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 202  : 	c->x = a->x * d;

	mov	eax, DWORD PTR _a$[ebp]
	fld	DWORD PTR [eax]
	fmul	DWORD PTR _d$[ebp]
	mov	ecx, DWORD PTR _c$[ebp]
	fstp	DWORD PTR [ecx]

; 203  : 	c->y = a->y * d;

	mov	eax, DWORD PTR _a$[ebp]
	fld	DWORD PTR [eax+4]
	fmul	DWORD PTR _d$[ebp]
	mov	ecx, DWORD PTR _c$[ebp]
	fstp	DWORD PTR [ecx+4]

; 204  : 	c->z = a->z * d;

	mov	eax, DWORD PTR _a$[ebp]
	fld	DWORD PTR [eax+8]
	fmul	DWORD PTR _d$[ebp]
	mov	ecx, DWORD PTR _c$[ebp]
	fstp	DWORD PTR [ecx+8]

; 205  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?vscale@@YAXPAVVector@@M0@Z ENDP			; vscale
_TEXT	ENDS
PUBLIC	?vselfscale@@YAXPAVVector@@M@Z			; vselfscale
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?vselfscale@@YAXPAVVector@@M@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_d$ = 12						; size = 4
?vselfscale@@YAXPAVVector@@M@Z PROC			; vselfscale, COMDAT

; 208  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 209  : 	a->x *= d;

	mov	eax, DWORD PTR _a$[ebp]
	fld	DWORD PTR [eax]
	fmul	DWORD PTR _d$[ebp]
	mov	ecx, DWORD PTR _a$[ebp]
	fstp	DWORD PTR [ecx]

; 210  : 	a->y *= d;

	mov	eax, DWORD PTR _a$[ebp]
	fld	DWORD PTR [eax+4]
	fmul	DWORD PTR _d$[ebp]
	mov	ecx, DWORD PTR _a$[ebp]
	fstp	DWORD PTR [ecx+4]

; 211  : 	a->z *= d;

	mov	eax, DWORD PTR _a$[ebp]
	fld	DWORD PTR [eax+8]
	fmul	DWORD PTR _d$[ebp]
	mov	ecx, DWORD PTR _a$[ebp]
	fstp	DWORD PTR [ecx+8]

; 212  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?vselfscale@@YAXPAVVector@@M@Z ENDP			; vselfscale
_TEXT	ENDS
PUBLIC	?vneg@@YAXPAVVector@@0@Z			; vneg
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?vneg@@YAXPAVVector@@0@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_c$ = 12						; size = 4
?vneg@@YAXPAVVector@@0@Z PROC				; vneg, COMDAT

; 215  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 216  : 	c->x = -a->x;

	mov	eax, DWORD PTR _a$[ebp]
	fld	DWORD PTR [eax]
	fchs
	mov	ecx, DWORD PTR _c$[ebp]
	fstp	DWORD PTR [ecx]

; 217  : 	c->y = -a->y;

	mov	eax, DWORD PTR _a$[ebp]
	fld	DWORD PTR [eax+4]
	fchs
	mov	ecx, DWORD PTR _c$[ebp]
	fstp	DWORD PTR [ecx+4]

; 218  : 	c->z = -a->z;

	mov	eax, DWORD PTR _a$[ebp]
	fld	DWORD PTR [eax+8]
	fchs
	mov	ecx, DWORD PTR _c$[ebp]
	fstp	DWORD PTR [ecx+8]

; 219  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?vneg@@YAXPAVVector@@0@Z ENDP				; vneg
_TEXT	ENDS
PUBLIC	__real@bff0000000000000
PUBLIC	?vselfneg@@YAXPAVVector@@@Z			; vselfneg
;	COMDAT __real@bff0000000000000
CONST	SEGMENT
__real@bff0000000000000 DQ 0bff0000000000000r	; -1
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?vselfneg@@YAXPAVVector@@@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
?vselfneg@@YAXPAVVector@@@Z PROC			; vselfneg, COMDAT

; 222  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 223  : 	a->x *= -1.f;

	mov	eax, DWORD PTR _a$[ebp]
	fld	DWORD PTR [eax]
	fmul	QWORD PTR __real@bff0000000000000
	mov	ecx, DWORD PTR _a$[ebp]
	fstp	DWORD PTR [ecx]

; 224  : 	a->y *= -1.f;

	mov	eax, DWORD PTR _a$[ebp]
	fld	DWORD PTR [eax+4]
	fmul	QWORD PTR __real@bff0000000000000
	mov	ecx, DWORD PTR _a$[ebp]
	fstp	DWORD PTR [ecx+4]

; 225  : 	a->z *= -1.f;

	mov	eax, DWORD PTR _a$[ebp]
	fld	DWORD PTR [eax+8]
	fmul	QWORD PTR __real@bff0000000000000
	mov	ecx, DWORD PTR _a$[ebp]
	fstp	DWORD PTR [ecx+8]

; 226  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?vselfneg@@YAXPAVVector@@@Z ENDP			; vselfneg
_TEXT	ENDS
PUBLIC	?vdot@@YAMPAVVector@@0@Z			; vdot
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?vdot@@YAMPAVVector@@0@Z
_TEXT	SEGMENT
tv88 = -196						; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
?vdot@@YAMPAVVector@@0@Z PROC				; vdot, COMDAT

; 229  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 230  : 	return( a->x*b->x + a->y*b->y + a->z*b->z );

	mov	eax, DWORD PTR _a$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _b$[ebp]
	fmul	DWORD PTR [ecx]
	mov	edx, DWORD PTR _a$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _b$[ebp]
	fmul	DWORD PTR [eax+4]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _a$[ebp]
	fld	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _b$[ebp]
	fmul	DWORD PTR [edx+8]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR tv88[ebp]
	fld	DWORD PTR tv88[ebp]

; 231  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?vdot@@YAMPAVVector@@0@Z ENDP				; vdot
_TEXT	ENDS
PUBLIC	?vselfdot@@YAMPAVVector@@@Z			; vselfdot
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?vselfdot@@YAMPAVVector@@@Z
_TEXT	SEGMENT
tv138 = -196						; size = 4
_a$ = 8							; size = 4
?vselfdot@@YAMPAVVector@@@Z PROC			; vselfdot, COMDAT

; 234  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 235  : 	return ( sqr(a->x) + sqr(a->y) + sqr(a->z) );

	mov	eax, DWORD PTR _a$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _a$[ebp]
	fmul	DWORD PTR [ecx]
	mov	edx, DWORD PTR _a$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _a$[ebp]
	fmul	DWORD PTR [eax+4]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _a$[ebp]
	fld	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _a$[ebp]
	fmul	DWORD PTR [edx+8]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR tv138[ebp]
	fld	DWORD PTR tv138[ebp]

; 236  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?vselfdot@@YAMPAVVector@@@Z ENDP			; vselfdot
_TEXT	ENDS
PUBLIC	?vcross@@YAXPAVVector@@00@Z			; vcross
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?vcross@@YAXPAVVector@@00@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
?vcross@@YAXPAVVector@@00@Z PROC			; vcross, COMDAT

; 239  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 240  : 	c->x = a->y*b->z - a->z*b->y;

	mov	eax, DWORD PTR _a$[ebp]
	fld	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _b$[ebp]
	fmul	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _a$[ebp]
	fld	DWORD PTR [edx+8]
	mov	eax, DWORD PTR _b$[ebp]
	fmul	DWORD PTR [eax+4]
	fsubp	ST(1), ST(0)
	mov	ecx, DWORD PTR _c$[ebp]
	fstp	DWORD PTR [ecx]

; 241  : 	c->y = a->z*b->x - a->x*b->z;

	mov	eax, DWORD PTR _a$[ebp]
	fld	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _b$[ebp]
	fmul	DWORD PTR [ecx]
	mov	edx, DWORD PTR _a$[ebp]
	fld	DWORD PTR [edx]
	mov	eax, DWORD PTR _b$[ebp]
	fmul	DWORD PTR [eax+8]
	fsubp	ST(1), ST(0)
	mov	ecx, DWORD PTR _c$[ebp]
	fstp	DWORD PTR [ecx+4]

; 242  : 	c->z = a->x*b->y - a->y*b->x;

	mov	eax, DWORD PTR _a$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _b$[ebp]
	fmul	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _a$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _b$[ebp]
	fmul	DWORD PTR [eax]
	fsubp	ST(1), ST(0)
	mov	ecx, DWORD PTR _c$[ebp]
	fstp	DWORD PTR [ecx+8]

; 243  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?vcross@@YAXPAVVector@@00@Z ENDP			; vcross
_TEXT	ENDS
PUBLIC	?sqrt@@YAMM@Z					; sqrt
PUBLIC	__real@0000000000000000
PUBLIC	?vnorm@@YAXPAVVector@@@Z			; vnorm
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?vnorm@@YAXPAVVector@@@Z
_TEXT	SEGMENT
_C$ = -20						; size = 4
_Length$ = -8						; size = 4
_a$ = 8							; size = 4
?vnorm@@YAXPAVVector@@@Z PROC				; vnorm, COMDAT

; 246  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 247  : 	float Length, C;
; 248  : 
; 249  : 	Length = sqr(a->x) + sqr(a->y) + sqr(a->z);

	mov	eax, DWORD PTR _a$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _a$[ebp]
	fmul	DWORD PTR [ecx]
	mov	edx, DWORD PTR _a$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _a$[ebp]
	fmul	DWORD PTR [eax+4]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _a$[ebp]
	fld	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _a$[ebp]
	fmul	DWORD PTR [edx+8]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR _Length$[ebp]

; 250  : 
; 251  : 	if (Length != 0.f)

	fld	DWORD PTR _Length$[ebp]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	SHORT $LN1@vnorm

; 252  : 	{
; 253  : 		C = 1.f / (float)sqrt(Length);

	push	ecx
	fld	DWORD PTR _Length$[ebp]
	fstp	DWORD PTR [esp]
	call	?sqrt@@YAMM@Z				; sqrt
	add	esp, 4
	fld1
	fdivrp	ST(1), ST(0)
	fstp	DWORD PTR _C$[ebp]

; 254  : 		a->x *= C;

	mov	eax, DWORD PTR _a$[ebp]
	fld	DWORD PTR [eax]
	fmul	DWORD PTR _C$[ebp]
	mov	ecx, DWORD PTR _a$[ebp]
	fstp	DWORD PTR [ecx]

; 255  : 		a->y *= C;

	mov	eax, DWORD PTR _a$[ebp]
	fld	DWORD PTR [eax+4]
	fmul	DWORD PTR _C$[ebp]
	mov	ecx, DWORD PTR _a$[ebp]
	fstp	DWORD PTR [ecx+4]

; 256  : 		a->z *= C;

	mov	eax, DWORD PTR _a$[ebp]
	fld	DWORD PTR [eax+8]
	fmul	DWORD PTR _C$[ebp]
	mov	ecx, DWORD PTR _a$[ebp]
	fstp	DWORD PTR [ecx+8]
$LN1@vnorm:

; 257  : 	}
; 258  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?vnorm@@YAXPAVVector@@@Z ENDP				; vnorm
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\math.h
_TEXT	ENDS
;	COMDAT ?sqrt@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?sqrt@@YAMM@Z PROC					; sqrt, COMDAT

; 534  :         {return (sqrtf(_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	push	ecx
	fld	DWORD PTR __X$[ebp]
	fstp	DWORD PTR [esp]
	call	_sqrtf
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?sqrt@@YAMM@Z ENDP					; sqrt
_TEXT	ENDS
PUBLIC	?vlen@@YAMPAVVector@@@Z				; vlen
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\user\desktop\computergraphicsproject\viewer\vector.cpp
;	COMDAT ?vlen@@YAMPAVVector@@@Z
_TEXT	SEGMENT
tv138 = -196						; size = 4
_a$ = 8							; size = 4
?vlen@@YAMPAVVector@@@Z PROC				; vlen, COMDAT

; 261  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 262  : 	return (float)sqrt( sqr(a->x) + sqr(a->y) + sqr(a->z) );

	mov	eax, DWORD PTR _a$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _a$[ebp]
	fmul	DWORD PTR [ecx]
	mov	edx, DWORD PTR _a$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _a$[ebp]
	fmul	DWORD PTR [eax+4]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _a$[ebp]
	fld	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _a$[ebp]
	fmul	DWORD PTR [edx+8]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR tv138[ebp]
	fld	DWORD PTR tv138[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	call	?sqrt@@YAMM@Z				; sqrt
	add	esp, 4

; 263  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?vlen@@YAMPAVVector@@@Z ENDP				; vlen
_TEXT	ENDS
PUBLIC	?vdist@@YAMPAVVector@@0@Z			; vdist
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?vdist@@YAMPAVVector@@0@Z
_TEXT	SEGMENT
_x$ = -8						; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
?vdist@@YAMPAVVector@@0@Z PROC				; vdist, COMDAT

; 266  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 267  : 	float x;
; 268  : 	
; 269  : 	x = sqr(b->x-a->x) + sqr(b->y-a->y) + sqr(b->z-a->z);

	mov	eax, DWORD PTR _b$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _a$[ebp]
	fsub	DWORD PTR [ecx]
	mov	edx, DWORD PTR _b$[ebp]
	fld	DWORD PTR [edx]
	mov	eax, DWORD PTR _a$[ebp]
	fsub	DWORD PTR [eax]
	fmulp	ST(1), ST(0)
	mov	ecx, DWORD PTR _b$[ebp]
	fld	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _a$[ebp]
	fsub	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _b$[ebp]
	fld	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _a$[ebp]
	fsub	DWORD PTR [ecx+4]
	fmulp	ST(1), ST(0)
	faddp	ST(1), ST(0)
	mov	edx, DWORD PTR _b$[ebp]
	fld	DWORD PTR [edx+8]
	mov	eax, DWORD PTR _a$[ebp]
	fsub	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _b$[ebp]
	fld	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _a$[ebp]
	fsub	DWORD PTR [edx+8]
	fmulp	ST(1), ST(0)
	faddp	ST(1), ST(0)
	fstp	DWORD PTR _x$[ebp]

; 270  : 
; 271  : 	if (x != 0.f)

	fld	DWORD PTR _x$[ebp]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	SHORT $LN2@vdist

; 272  : 		return (float)sqrt( x );

	push	ecx
	fld	DWORD PTR _x$[ebp]
	fstp	DWORD PTR [esp]
	call	?sqrt@@YAMM@Z				; sqrt
	add	esp, 4
	jmp	SHORT $LN1@vdist
	jmp	SHORT $LN1@vdist
$LN2@vdist:

; 273  : 	else return 0.f;

	fldz
$LN1@vdist:

; 274  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?vdist@@YAMPAVVector@@0@Z ENDP				; vdist
_TEXT	ENDS
PUBLIC	?vselflerp@@YAXPAVVector@@0M@Z			; vselflerp
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?vselflerp@@YAXPAVVector@@0M@Z
_TEXT	SEGMENT
_t$ = -8						; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_f$ = 16						; size = 4
?vselflerp@@YAXPAVVector@@0M@Z PROC			; vselflerp, COMDAT

; 277  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 278  : 	float	t;
; 279  : 	
; 280  : 	t = 1.f-f;

	fld	DWORD PTR _f$[ebp]
	fld1
	fsubrp	ST(1), ST(0)
	fstp	DWORD PTR _t$[ebp]

; 281  : 
; 282  : 	a->x = a->x*f + b->x*t;

	mov	eax, DWORD PTR _a$[ebp]
	fld	DWORD PTR [eax]
	fmul	DWORD PTR _f$[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	fld	DWORD PTR [ecx]
	fmul	DWORD PTR _t$[ebp]
	faddp	ST(1), ST(0)
	mov	edx, DWORD PTR _a$[ebp]
	fstp	DWORD PTR [edx]

; 283  : 	a->y = a->y*f + b->y*t;

	mov	eax, DWORD PTR _a$[ebp]
	fld	DWORD PTR [eax+4]
	fmul	DWORD PTR _f$[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	fld	DWORD PTR [ecx+4]
	fmul	DWORD PTR _t$[ebp]
	faddp	ST(1), ST(0)
	mov	edx, DWORD PTR _a$[ebp]
	fstp	DWORD PTR [edx+4]

; 284  : 	a->z = a->z*f + b->z*t;

	mov	eax, DWORD PTR _a$[ebp]
	fld	DWORD PTR [eax+8]
	fmul	DWORD PTR _f$[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	fld	DWORD PTR [ecx+8]
	fmul	DWORD PTR _t$[ebp]
	faddp	ST(1), ST(0)
	mov	edx, DWORD PTR _a$[ebp]
	fstp	DWORD PTR [edx+8]

; 285  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?vselflerp@@YAXPAVVector@@0M@Z ENDP			; vselflerp
_TEXT	ENDS
PUBLIC	?vlerp@@YAXPAVVector@@0M0@Z			; vlerp
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?vlerp@@YAXPAVVector@@0M0@Z
_TEXT	SEGMENT
_t$ = -8						; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_f$ = 16						; size = 4
_c$ = 20						; size = 4
?vlerp@@YAXPAVVector@@0M0@Z PROC			; vlerp, COMDAT

; 288  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 289  : 	float	t;
; 290  : 	
; 291  : 	t = 1.f-f;

	fld	DWORD PTR _f$[ebp]
	fld1
	fsubrp	ST(1), ST(0)
	fstp	DWORD PTR _t$[ebp]

; 292  : 
; 293  : 	c->x = a->x*f + b->x*t;

	mov	eax, DWORD PTR _a$[ebp]
	fld	DWORD PTR [eax]
	fmul	DWORD PTR _f$[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	fld	DWORD PTR [ecx]
	fmul	DWORD PTR _t$[ebp]
	faddp	ST(1), ST(0)
	mov	edx, DWORD PTR _c$[ebp]
	fstp	DWORD PTR [edx]

; 294  : 	c->y = a->y*f + b->y*t;

	mov	eax, DWORD PTR _a$[ebp]
	fld	DWORD PTR [eax+4]
	fmul	DWORD PTR _f$[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	fld	DWORD PTR [ecx+4]
	fmul	DWORD PTR _t$[ebp]
	faddp	ST(1), ST(0)
	mov	edx, DWORD PTR _c$[ebp]
	fstp	DWORD PTR [edx+4]

; 295  : 	c->z = a->z*f + b->z*t;

	mov	eax, DWORD PTR _a$[ebp]
	fld	DWORD PTR [eax+8]
	fmul	DWORD PTR _f$[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	fld	DWORD PTR [ecx+8]
	fmul	DWORD PTR _t$[ebp]
	faddp	ST(1), ST(0)
	mov	edx, DWORD PTR _c$[ebp]
	fstp	DWORD PTR [edx+8]

; 296  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?vlerp@@YAXPAVVector@@0M0@Z ENDP			; vlerp
_TEXT	ENDS
END
